<node>
  <type_nodetype>415056</type_nodetype>
  <node_id>1239467</node_id>
  <title>nodeletwidget</title>
  <code>#performs operations on a single nodelet for the user, such as move, insert, remove
#	this messes with the current user $VARS-&gt;{nodelets}
#
#usage: (CGI parameters)
#	targid=(nodelet ID)
#	nlop=(what to do)
#		u[p]/d[own] - moves nodelet up/down a single item in pile (with wrap around)
#		p[osition] - moves nodelet to given position (if 'nlpos' not given, moved to top) (TODO - also insert, if passes permission check)
#		r[emove] - removes nodelet (doesn't allow removal of special nodelets - Epicenter for anybody, and ????? for editors
#		c[ollapse]/e[xpand] - collapses/expands nodelet (a collapsed nodelet shows title but doesn't show nor execute contents) (not supported)
#	nlpos=(position number; 0=top, 1=between topmost and next nodelet, negative=from bottom, too high=at bottom)
#
#returns result of operation in CGI parameter
#
#originally named 'nodeletwidget'
#
#created: 2004.12.29.n3 (Wednesday, December 29, 2004)
#updated: 2005-01-10(1) (Monday, January 10, 2005)


#permissions
my $UID = $USER-&gt;{node_id} || 0;
if( $APP-&gt;isGuest($USER) ) {	#FIXME is this the correct thing to check?
	return;
}
if($USER-&gt;{title} eq 'everyone') {
	return;
}
my $isRoot = exists $HTMLVARS{'group_gods'}{$UID};
my $isCE = $isRoot || (exists $HTMLVARS{'group_content editors'}{$UID});
return unless $UID==9740;	#N-Wing is testing

#constants
my $msg = 'DEBUG_opcode_nodeletorder';

#variable
my $s;	#scratch
my @allNodelets;
#my $num;	#number of nodelets before doing anything


#
# functions
#

#setDefaultNodelets
#	sets the default nodelets in user's $VARS-&gt;{nodelets}
#	this should only be called if user has no nodelets
#	returns the default nodelets, or undef if a problem
#created: 2004.12.29.n3 (Wednesday, December 29, 2004)
#updated: 2004.12.29.n3 (Wednesday, December 29, 2004)
local *setDefaultNodelets = sub {
	my $defaultNodelets = getNode('default nodelets','setting');	#FIXME FIXME
	return undef unless defined $defaultNodelets;
	$defaultNodelets = getVars($defaultNodelets);
	return undef unless defined $defaultNodelets;
	$defaultNodelets = join(',', keys(%$defaultNodelets));
	return undef if !( (defined $defaultNodelets) &amp;&amp; (length($defaultNodelets) );
	$VARS-&gt;{nodelets} = $defaultNodelets;
	return $defaultNodelets;
};


##findNodeletPos
##	returns the index in @allNodelets the given nodelet ID occurs, or undef if not found
##created: 2004.12.29.n3 (Wednesday, December 29, 2004)
##updated: 2004.12.29.n3 (Wednesday, December 29, 2004)
#local *findNodeletPos = sub {
#	my $toFind = $_[0];
#	my $i;
#	for($i=0;$i&lt;$num;++$i) {
#		return $i if $allNodelets[$i] eq $toFind;
#	}
#	return undef;
#};


#updateVarsNodelets
#	stores @allNodelets into user's VARS
#created: 2004.12.29.n3 (Wednesday, December 29, 2004)
#updated: 2004.12.29.n3 (Wednesday, December 29, 2004)
local *updateVarsNodelets = sub {
	my $t = join(',',@allNodelets);
	$VARS-&gt;{nodelets} = $t if (defined $t and length($t));
};




#
#nodelets as linked list
#

#to make nodelets easier to rearrange, nodelet position information
#is converted to a linked list implemented using a hash

#TODO look for &quot;hash chain&quot; or whatever in the color fun superdoc
#convertListToHashLinkedList
#	converts the given array into a special* linked list
#	first element (entry point) is undef, last element points to undef
#	key is element, value is next key
#	* undefs and duplicate elements in source list are silently dropped
#parameter: list ref (source list not modified)
#return: linked list in a hash ref
#created: 2005-01-10(1) (Monday, January 10, 2005)
#updated: 2005-01-10(1) (Monday, January 10, 2005)
local *convertListToHashLinkedList = sub {
	my $sourceList = $_[0];
	my %result;

	my $k = undef;

	foreach my $v (@$sourceList) {
		next unless defined $v;
		next if exists $result{$v};
		$result{$k} = $v;
		$k = $v;
	}

	$result{$k} = undef;

	return \%result;

};


#convertHashLinkedListToList
#	converts the given linked list in hash form into a normal list
#	if an error occurs while converting to list, the result as far as calculated is returned
#	entry point is undef
#parameter: hash ref (source hash is not modified)
#return: list
#created: 2005-01-10(1) (Monday, January 10, 2005)
#updated: 2005-01-10(1) (Monday, January 10, 2005)
local *convertHashLinkedListToList = sub {
	my $sourceHash = $_[0];
	my @result;

	my $v;
	my $k = undef;

	for(my $i=scalar(keys(%$sourceHash));$i&gt;0;--$i) {	#prevents infinite loop if given hash has an unwanted loop
		if(!exists $sourceHash-&gt;{$k}) {
			$query-&gt;param('DEBUGnodeletOrder'.$sourceHash,'no entry for '.(defined($k)?$k:'(undef)'));
			return @result;
		}
		$v = $sourceHash-&gt;{$k};
		if(!defined $v) {
			#all done
			return @result;
		}
		push(@result, $v);
		$k = $v;
	}
	$query-&gt;param(
		'DEBUGnodeletOrder'.$sourceHash,
		'loop in linked list ('.scalar(keys(%$sourceHash)).') elements; cur key='.(defined($k)?$k:'(undef)').',cur val='.(defined($v)?$v:'(undef)')
	);
	return @result;
};




#
# basic setup and read parameters
#

my $s;


#nodelet setting in user's VARS isn't in a nice format
#make sure user has nodelets (if not, set to default)
#break out into something that is easier to work with
unless( (exists $VARS-&gt;{nodelets}) &amp;&amp; defined($s=$VARS-&gt;{nodelets}) &amp;&amp; length($s) ) {
	unless(defined setDefaultNodelets()) {
		$query-&gt;param($msg, 'no nodelets, and unable to load defaults');
		return;
	}
}
@allNodelets = split(',', $VARS-&gt;{nodelets} );
unless(scalar(@allNodelets)) {
	$s = setDefaultNodelets();
	unless(defined $s) {
		$query-&gt;param($msg, 'no nodelets, and default is blank');
		return;
	}
	@allNodelets = split(',', $VARS-&gt;{nodelets} );
}
$num = scalar(@allNodelets);
my %nodeletsList = %{convertListToHashLinkedList(@allNodelets)};


#get CGI parameters
my $targID = $query-&gt;param('targid');
unless( (defined $targID) &amp;&amp; ($targID =~ /^([1-9]\d*)$/) {
	$query-&gt;param($msg, 'targid must be an integer';
	return;
}
$targID = $1;
my $op = $query-&gt;param('nlop');
unless( (defined $op) &amp;&amp; ($op =~ /^([udprc])$/) {
	$query-&gt;param($msg, 'nlop must be a specific single character');
	return;
}
$op = $1;
#nlpos is optional; if there, force between 0 and current number of nodelets, inclusive
my $nlpos = $query-&gt;param('nlpos');
if( (defined $nlpos) &amp;&amp; ($nlpos =~ /^(-?\d+)$/) {
	$nlpos = $1;
	if($nlpos &gt; $num) {
		$nlpos = $num;
	} elsif($nlpos &lt; 0) {
		$nlpos = $num+$nopos;
		$nlpos = 0 if $nlpos &lt; 0;
	}
} else {
	$nlpos = undef;
}


#
# perform specific operations
#

my $pos = findNodeletPos($targID);

#up/down
if(($op eq 'u') || ($op eq 'd')) {
	unless(defined $pos) {
		$query-&gt;param($msg, 'target nodelet to move up/down is not currently shown');
		return;
	}
	#TODO
}

#position (move to absolute position) (TODO - insert with permission check)
if($op eq 'p') {

	if(defined $pos) {

		#move
		if($pos&lt;$nlpos) {
			#TODO
		} elsif($pos&gt;$nlpos) {
			#TODO
		} else {
			$query-&gt;param($msg, 'new position is same as old position');
			return;
		}
		$query-&gt;param($msg, 'moved');

	} else {

		#insert
		#TODO
		$query-&gt;param($msg, 'insert currently unsupported');

	}
	updateVarsNodelets();
	return;
}

#remove
if($op eq 'r') {
	unless(defined $pos) {
		$query-&gt;param($msg, 'nodelet to remove is not currently shown');
		return;
	}

	#don't allow removal of special nodelets
	my $nl;
	$nl = getNode('Epicenter','nodelet');
	if((defined $nl) &amp;&amp; ($nl-&gt;{node_id}==$targID)) {
		$query-&gt;param($msg, 'may not remove Epicenter');
	}
	#on the other hand, this isn't super important, it just makes editing rather difficult
	#(and, of course, some editors would *whine* about it being in the way)
	#if($isCE) {
	#	$nl = getNode('Master Control','nodelet');	#???????
	#	if((defined $nl) &amp;&amp; ($nl-&gt;{node_id}==$targID)) {
	#		$query-&gt;param($msg, 'may not remove Master Control');
	#	}
	#}

	if($pos==0) {
		shift(@allNodelets);
	} elsif($pos==$num) {
		pop(@allNodelets);
	} else {
		@allNodelets = @allNodelets[ 0..$pos-1, $pos..$num-1 ];
	}
	updateVarsNodelets();
	$query-&gt;param($msg, 'removed nodelet '.$targID);
	return;
}

#collapse/expand
if(($op eq 'c') || ($op eq 'e')) {
	unless(defined $pos) {
		$query-&gt;param($msg, 'target nodelet to collapse/expand is not currently shown');
		return;
	}
	#TODO
	$query-&gt;param($msg, 'collapse/expand are currently unsupported');
	return;
}


#somehow something invalid was slipped by an earlier test
$query-&gt;param($msg, 'somehow passed as valid parameter, but not matched up');
return;
</code>
</node>

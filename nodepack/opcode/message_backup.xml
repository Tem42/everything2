<node>
  <type_nodetype>415056</type_nodetype>
  <node_id>1952207</node_id>
  <title>message backup</title>
  <code>my $for_user = $query-&gt;param('sendto');
my $message = $query-&gt;param('message');
my $UID = getId($USER)||0;
my $isRoot = exists($HTMLVARS{'group_gods'}{$UID});

foreach($query-&gt;param) {
	if($_ =~ /^deletemsg\_(\d+)$/) {
		my $MSG = $DB-&gt;sqlSelectHashref('*', 'message', &quot;message_id=$1&quot;);
next unless $MSG;
		next unless $isRoot||($UID==$$MSG{for_user});
		$DB-&gt;sqlDelete('message', &quot;message_id=$$MSG{message_id}&quot;);
	} elsif($_ =~ /^archive\_(\d+)$/) {
#NPB FIXME PM is better
		my $MSG = $DB-&gt;sqlSelectHashref('*', 'message', &quot;message_id=$1&quot;);
next unless $MSG;
		next unless $isRoot||($UID==$$MSG{for_user});
		my $realTime = $$MSG{tstamp};
		$DB-&gt;sqlUpdate('message', {archive=&gt;1, tstamp=&gt;$realTime}, 'message_id='.$$MSG{message_id});
	} elsif($_ =~ /^unarchive\_(\d+)$/) {
		my $MSG = $DB-&gt;sqlSelectHashref('*', 'message', &quot;message_id=$1&quot;);
next unless $MSG;
		next unless $isRoot||($UID==$$MSG{for_user});
		my $realTime = $$MSG{tstamp};
		$DB-&gt;sqlUpdate('message', {archive=&gt;0, tstamp=&gt;$realTime}, 'message_id='.$$MSG{message_id});
	}
}

return if $UID==$HTMLVARS{guest_user};
return if $$VARS{borged} or ($$USER{title} eq 'everyone');
return unless length($message);
#$message=encodeHTML($message);	#this is annoying!
#return unless length($message);
return if $message=~/^\s+$/;

if($message =~ /^\/(invite)\s+(\S*)$/si) {
	if($$USER{in_room}) {
		my $R = getNodeById($$USER{in_room});
		my $room;
		$room = $$R{title} if $R;
		$message = &quot;/msg $2 come join me in [$$R{title}]&quot;;
	} else {
		$message = &quot;/msg $2 come join me outside&quot;;
	}
}

my $valid = getVars(getNode('egg commands','setting'));

if ($message =~ /^\/(\S*)?\s+(\S*)/) {
	my $phrase = $1;
	$phrase = substr($phrase,0,-1) if (!$$valid{$phrase});
	if ($$valid{$phrase}) {
		return unless ($$VARS{easter_eggs}&gt;0);
		my $uName = $2;
		my $recUser = getNode($uName,&quot;user&quot;);
		if (!$recUser) {
			$uName =~ s/\_/ /gs;
			$recUser = getNode($uName, 'user');
		}

		return unless $recUser;
		return if ($$recUser{user_id} == $$USER{user_id});
		my $isRagnarok = 0;
		if ($isRagnarok) {
			return if (($$recUser{user_id} == $$USER{user_id}) and ($phrase ne 'heal'));
			if ($phrase eq 'fireball') {
				return unless $APP-&gt;getLevel($USER) &gt;= 7;
			}
			elsif($phrase eq 'heal') {
				my $healid = $$recUser{user_id};
				return unless ($$VARS{easter_eggs}&gt;0);
				$message = htmlcode('healuser',$healid.&quot;,1&quot;);
				return unless $message;
				$$VARS{easter_eggs}--;
			}
		#	elsif($phrase eq 'hugg') {
		#		my $enemyid = $$recUser{user_id};
		#		$message = htmlcode('hugguser',$enemyid.&quot;,1&quot;);
		#		return unless $message;
		#	}
			elsif ($phrase eq 'strike') {
				my $enemyid = $$recUser{user_id};
				if ($$recUser{title} eq 'random') {$enemyid = -1;}
				$message = htmlcode('strikeUser',$enemyid.&quot;,1&quot;);
				return unless $message;
				adjustExp($USER, -1);
			}
			else {
				#$$VARS{easter_eggs}--;
				adjustExp($recUser,3);
				$message = &quot;/&quot;.$phrase.&quot; $uName&quot;;
			}
		}
		else { #normal easter egg
			$$VARS{easter_eggs}--;
			adjustExp($recUser,3);
			$message = &quot;/&quot;.$phrase.&quot; $uName&quot;;
		}
	}
}



my $helpTopics = $message;
my ($sendHelp, $recipient);
while ($helpTopics =~ /^\/help\s+(.*)$/) {
	$sendHelp = 1;
	my $helpVars = getVars(getNode('help topics','setting'));
	$recipient = $$USER{user_id} unless $recipient;
	my $helpText = $1;
	$helpTopics = $helpVars-&gt;{$helpText};
	if (!$helpTopics) {
		$helpTopics = &quot;Sorry, no information on $1 is available. Please try [Everything2 Help] for further assistance.&quot;;
		if (($helpText =~ /^(\S*)?\s+(\S*)/)&amp;&amp;($isRoot)) {
			$helpTopics = $helpVars-&gt;{$2};
			return unless $helpTopics;
			$recipient = getNode($1, 'user')-&gt;{user_id};
		}
	}
}

if ($sendHelp) {
	$HTMLVARS{msgparams} = {
		'author_id' =&gt; getId(getNode('Virgil', 'user')),
		'recipient_id' =&gt; $recipient,
		'message' =&gt; $helpTopics,
	};
	htmlcode('sendPrivateMessage','');

	return $helpTopics;
}

my $settingsInfo = $message;
my ($sendSettings, $checkUser);
while ($settingsInfo =~ /^\/settings\s+(.*)$/) {
	$sendSettings = 1;
	my $settingsText = $1;
	if (($settingsText =~ /^(\S*)?\s+(\S*)/)&amp;&amp;($isRoot)) {
		$checkUser = getNode($1, 'user');
		unless ($checkUser) {
			$settingsInfo =&quot;No such user $1&quot;;
last;
		};
		my $uV = getVars($checkUser);
		my @results;
my $searchStr = $2;
		for my $key ( keys %{$uV} ) {
			if ($key =~ /$searchStr/gi) {
			       push @results, &quot;$key =&gt; &quot;.$$uV{$key};
			}
		}
		$settingsInfo = &quot;Settings for &quot;.$$checkUser{title}.&quot;: &quot;.join(&quot;, &quot;,@results);
if (@results == 0) {
$settingsInfo = &quot;No settings matched your search.&quot;;
}
	}
}

if ($sendSettings) {
	$HTMLVARS{msgparams} = {
		'author_id' =&gt; getId(getNode('Virgil', 'user')),
		'recipient_id' =&gt; $$USER{user_id},
		'message' =&gt; $settingsInfo,
	};
	htmlcode('sendPrivateMessage','');

	return $settingsInfo;
}



if($message =~ /^\/(msg\??|tell\??)(\{.+?\}\??|\s+\S+)\s+(.+)$/s) {
	#values:
	#	$1 - msg/tell and possibly online only
	#	$2 - recipient(s) and possibly online only
	#	$3 - message
	my $isONO = (substr($1,-1,1) eq '?');
	my $allTargets = $2;
	my $message = $3;
	my @recipients;
	if(substr($allTargets,0,1) eq '{') {
		#given multiple recipients
		$isONO ||= (substr($allTargets,-1,1) eq '?');
#$query-&gt;param('DEBUGbefore',$allTargets);
		if($allTargets =~ /^\{(.+?)\}\??$/) {	#should always match
			@recipients = split(/\s+/, $1);	#break apart names by spaces
#$query-&gt;param('DEBUGafter',join(',',@recipients));
		}
	} else {
		#only a single recipient
		if($allTargets =~ /(\S+)/) {	#should always match
			@recipients = ($1);
		}
	}
	unless(scalar(@recipients)) {	#invalid message command, so give error
		$message = 'The format of your private message was unrecognized. You tried to send &quot;'.$message.'&quot;.';
		@recipients = ($USER-&gt;{title});
	}
	$HTMLVARS{msgparams} = {
		'recipient' =&gt; \@recipients,
		'message' =&gt; $message,
		'ono' =&gt; $isONO,
	};
	htmlcode('sendPrivateMessage','0');

} elsif($message =~ /^\/old(msg\??|tell\??)\s+(\S+)\s+(.+)$/s) {
	#for msg typo-N-Wing changed \S* and .* into \S+ and .+
	my $onlyOnline = (substr($1,-1,1) eq '?') ? 1 : 0;
	$message = $3;
	my $user = $2;
	my $FORWARDS = getVars(getNode('chatterbox forward','setting'));
	#$user = $$FORWARDS{$user} if exists $$FORWARDS{$user};
	$user = $$FORWARDS{lc($user)} if exists $$FORWARDS{lc($user)};

	my $U = getNode($user, 'usergroup');
	$U = getNode($user, 'user') unless $U;
	$user =~ s/\_/ /gs unless $U;
	$U = getNode($user, 'usergroup') unless $U;
	$U = getNode($user, 'user') unless $U;
	$U = getNode($user, 'lockeduser') unless $U;

	if(not $U) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;You tried to talk to $user, but they don't exist on this system:\&quot;$message\&quot;&quot;, author_user =&gt; getId(getNode('root','user')), for_user =&gt;getId($USER) });
		return;
	}

	my $ugID = 0;
	if($$U{type}{title} eq 'usergroup') {
		$ugID = getId($U) || 0;
		unless(Everything::isApproved($USER, $U)) {
			$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;You aren't a part of the user group \&quot;$$U{title}\&quot;, so you can't say \&quot;$message\&quot;.&quot;, author_user =&gt; getId(getNode('root','user')), for_user=&gt;getId($USER) });
			return;
		}
	}

	my @rec;

	my $m;
	if(exists $$U{group}) {
		my $csr = $DB-&gt;sqlSelectMany('messageignore_id', 'messageignore', 'ignore_node='.$$U{node_id});
		my %ignores;
		while (my ($ig) = $csr-&gt;fetchrow) { $ignores{$ig} = 1 }
		$csr-&gt;finish;

		@rec = map { exists($ignores{getId($_)}) ? () : $_} @{$DB-&gt;selectNodegroupFlat($U)};
#		$message = '['.uc($$U{title}).']: ' . $message;
		for(my $i=0;$i&lt;scalar(@rec);++$i) {
			$m=$rec[$i];
			$m=$$m{node_id};
			$rec[$i] = $m;
		}
		push(@rec, $UID);	#so when admins msg a group they aren't in, they'll get the msg they sent

		#sorted for easy user duplication detection
		@rec = sort { $a &lt;=&gt; $b } @rec;
	} else {
		push @rec, getId($U) unless $DB-&gt;sqlSelect('ignore_node', 'messageignore', &quot;messageignore_id=$$U{node_id} and ignore_node=$$USER{node_id}&quot;);
	}

	if($onlyOnline) {
		$message = 'ONO: ' . $message;
		my %onlines;
		my $csr = $DB-&gt;sqlSelectMany('member_user', 'room', '', '');
		while( my ($ig) = $csr-&gt;fetchrow) {
			$onlines{$ig} = 1;
		}
		$csr-&gt;finish;
		my @actives;
		foreach $m (@rec) {
			if($onlines{$m}) {
				push @actives, $m;
			} else {
				my $v = getVars(getNodeById($m));
				if($$v{'getofflinemsgs'}) { push @actives, $m; }
			}
		}
		@rec = @actives;
	}

	#group archive - have to do this after online only check
	if($ugID) {

		my $allowArchives = getVars(getNode('allow message archive','setting'));
		if($allowArchives &amp;&amp; exists $$allowArchives{$$U{title}}) {
			push @rec, $$U{node_id};
		}
	}

	#add message to table for each user
	my $old = 0;
	foreach $m (@rec) {
		next if $m==$old;
		$DB-&gt;sqlInsert('message', {msgtext=&gt;$message, author_user=&gt;$UID, for_user=&gt;$m, for_usergroup=&gt;$ugID });
		$old = $m;
	}

	$query-&gt;param('sentmessage', 'you said &quot;' . encodeHTML($message) . '&quot; to '.linkNode($U));

#botched /msg test
#} elsif( ($message =~ /^(\/)?(msg|tell)/) || ($message =~ /^\/(smg|mgs)/) ) {
#} elsif( ($message =~ /^\W?(.sg|m.g|ms.|smg|mgs)/) &amp;&amp; !$$VARS{noTypoCheck} ) {
} elsif( ($message =~ /^\W?(.sg|m^[aeiouy]g|ms.|smg|mgs)/) &amp;&amp; !$$VARS{noTypoCheck} ) {

	$DB-&gt;sqlInsert('message',{
		msgtext=&gt;'typo alert: '.$message,
		author_user=&gt;$UID,
		for_user=&gt;$UID,
	});

} elsif($isRoot and $message =~ /^\/fakeborg\s+(.*)$/) {
	my $fakeTarget = $1;
	return unless length($fakeTarget);

	my $message = '/me has swallowed ['.$fakeTarget.']. ';

	#FIXME: should be a local sub
	my @EDBURSTS = (
		'*BURP*',
		'Mmmm...',
		'['.$fakeTarget.'] is good food!',
		'['.$fakeTarget.'] was tasty!',
		'keep \'em coming!',
		'['.$fakeTarget.'] yummy! More!',
		'[EDB] needed that!',
		'*GULP*','moist noder flesh',
		'*B R A P *',
	);
	$message .= $EDBURSTS[int(rand(@EDBURSTS))];

	my $BORG = getNode('EDB', 'user');

	$DB-&gt;sqlInsert('message', {
		msgtext =&gt; $message,
		author_user =&gt; (getId($BORG) || 0),
		for_user =&gt; 0,
		room =&gt; $$USER{in_room},
	});

} elsif($isRoot and $message =~ /^\/borg\s+(\S*)/) {
	my $user = $1;
	my $reason = undef;
	if($message =~ /^\/borg\s+\S+\s+(.+?)$/) {
		$reason = $1;
	}
	my $BORG = getNode('EDB', 'user');
	my $U = getNode($user, 'user');
	$user =~ s/\_/ /gs;
	$U = getNode($user, 'user') unless $U;

	unless($U) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;Can't borg 'em, $user doesn't exist on this system!&quot;, author_user =&gt; getId($BORG), for_user =&gt;getId($USER) });
		return;
	}
	if($reason) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; 'I ate you: ' . $reason, author_user =&gt; getID($BORG), for_user =&gt;getId($U) });
	}

	$user = $$U{title};	#ensure proper case
	my $message = &quot;/me has swallowed [$user]. &quot;;

	my @EDBURSTS = (
		'*BURP*', 'Mmmm...', &quot;[$user] is good food!&quot;,
		&quot;[$user] was tasty!&quot;, 'keep \'em coming!',
		&quot;[$user] yummy! More!&quot;, '[EDB] needed that!',
		'*GULP*','moist noder flesh', '*B R A P *'
	);
	$message .= $EDBURSTS[int(rand(@EDBURSTS))];

	my $V = getVars($U);
	++$$V{numborged};
	$$V{borged} = time;
	setVars($U, $V);
	$DB-&gt;sqlUpdate('room', {borgd =&gt; '1'}, 'member_user='.getId($U));


	my $OTHERUSERS = getNode('other users', 'nodelet');
	$$OTHERUSERS{nltext} =  Everything::HTML::parseCode($$OTHERUSERS{nlcode}, $OTHERUSERS);
	updateNode($OTHERUSERS, -1);


	$DB-&gt;sqlInsert('message', {
		msgtext =&gt; $message,
		author_user =&gt; getId($BORG),
		for_user =&gt; 0,
		room =&gt; $$USER{in_room}
	});

######### Begin Jay Messing around
} elsif($isRoot and $message=~/^\/topic\s+(.*)$/) {

  $message = $1;

  my $settingsnode = getNodeById(1149799); #More hard-coded goodness for speed.
  my $topics = getVars($settingsnode);

  $$topics{$$USER{in_room}} = $message;

  setVars($settingsnode, $topics);

######### End Jay Messing around
######### More Jay Messing around
} elsif($isRoot and $message=~ /^\/sayas\s+(\S*)\s+(.*)$/s) {

	my $message = $2;
	my $fromuser = lc($1);
	my $fromref;

	if($fromuser eq 'webster') {
		$fromref = getNode('Webster 1913', 'user');
	} elsif($fromuser eq 'edb') {
		$fromref = getNode('EDB', 'user');
	} elsif($fromuser eq 'klaproth') {
		$fromref = getNode('Klaproth', 'user');
	} elsif($fromuser eq 'eddie') {
		$fromref = getNode('Cool Man Eddie', 'user');
### Gorgonzola adds Giant Teddy Bear
	} elsif($fromuser eq 'bear') {
		$fromref = getNode('Giant Teddy Bear', 'user');
### Gorgonzola adds Virgil
	} elsif($fromuser eq 'virgil') {
		$fromref = getNode('Virgil', 'user');
	} elsif(($fromuser eq 'guest') || ($fromuser eq 'gu')) {
		$fromref = getNode('Guest User', 'user');
	}

	if($fromref) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; $message , author_user =&gt; getId($fromref), for_user =&gt; 0, room =&gt; $$USER{in_room}});
	} else {
		$$VARS{barf} = 'nay!';
		$DB-&gt;sqlInsert('message', {msgtext =&gt; 'To sayas, you need to give me a user, choices are: EDB, eddie, virgil, Bear, Klaproth, or Webster', author_user =&gt; getId(getNode('root', 'user')), for_user =&gt; getId($USER), room =&gt; $$USER{in_room}});
	}

######### End Jay Messing around

} elsif($message=~/^\/chatteroff/) {
	$$VARS{publicchatteroff}=1;
} elsif($message=~/^\/chatteron/) {
	delete $$VARS{publicchatteroff};
#} elsif($isRoot and ($message =~ /^\/toss\s+(\S+)\s+(.+?)$/) and ($$USER{title} eq 'N-Wing')) {
#	my $luser = $1;
#	my $dest = $2;
#	my $reason = 0; #TODO

#	$dest =~ s/[^A-Za-z0-9 \-+_\!]//g;
#	if($dest eq 'pa') {
#		$dest = 'Political Asylum';
#	} elsif($dest eq 'nn') {
#		$dest = 'Noders Nursery';
#	}
#	my $R = getNode($dest, 'room');
#	my $BORG = getNode('EDB', 'user');
#	my $U = getNode($luser, 'user');
#	$user =~ s/\_/ /gs;
#	$U = getNode($luser, 'user') unless $U;

#	$DB-&gt;sqlInsert('message', {msgtext =&gt; $U{title} . ' into node_id=' . getId($R), author_user =&gt; getId(getNode('root','user')), for_user =&gt; getId($USER), room =&gt; $$USER{in_room}}); #debuging...

#	unless($R and ($dest ne 'outside')) {
#		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;Can't move 'em, there is no room \&quot;$dest\&quot;!&quot;, author_user =&gt; getId($BORG), for_user =&gt;getId($USER) });
#		return;
#	}
#	unless($U) {
#		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;Can't move 'em, $user doesn't exist on this system!&quot;, author_user =&gt; getId($BORG), for_user =&gt;getId($USER) });
#		return;
#	}
#	$DB-&gt;sqlInsert('message', {msgtext =&gt; 'I tossed you into '.$dest.($reason?': '.$reason:'').'.', author_user =&gt; getId($BORG), for_user =&gt; getId($U) });

#	$message = &quot;/me has thrown [$luser] into [$dest]. &quot;;
#	my @EDBURSTS = (
#	&quot;[$luser] is good exercise!&quot;, &quot;[$luser] was heavy!&quot;,
#	&quot;Don't be a [$luser].&quot;, &quot;[$luser] was annoying me!&quot;, 	'[EDB] needed that!','stale noder flesh'
#	);
#	$message .= $EDBURSTS[int(rand(@EDBURSTS))];

#	my $V = getVars($U);
#	$$V{in_room} = $R?getId($R):0;
#	setVars($U, $V);
#	changeRoom($U, $R?getId($R):0);

#	$DB-&gt;sqlInsert('message', {msgtext =&gt; $message, author_user =&gt; getId($BORG), for_user =&gt; 0, room =&gt; $$USER{in_room} });

#	my $OTHERUSERS = getNode('other users', 'nodelet');
#	$$OTHERUSERS{nltext} =  Everything::HTML::parseCode($$OTHERUSERS{nlcode}, $OTHERUSERS);
#	updateNode($OTHERUSERS, -1);

} elsif($message =~ /^\/macro\s+(.*?)$/) {
	$message = $1;
	my $rootID = getId(getNode('root','user'));
	if($isRoot || (exists $HTMLVARS{'group_content editors'}{$UID})) {
		if($message =~ /^(\S+)\s+(.+?)$/) {
			$message = $1;
			$$VARS{'chatmacro'}=$2;
		} else {
			delete $$VARS{'chatmacro'};
		}
		htmlcode('doChatMacro', $message);
#		$message = 'you ran macro '.$message.' with parameters: '.$$VARS{'chatmacro'};
		undef $message;
		delete $$VARS{'chatmacro'};
	} else {
		$message = 'Sorry, you aren\'t allowed to use macros yet. You tried to run: '.$message;
	}
	$DB-&gt;sqlInsert('message', {msgtext =&gt; $message, author_user =&gt; $rootID, for_user =&gt; $UID }) if $message;


} elsif($message =~ /^\/(ignore|unignore)(\s+.*)?$/) {
	#ignore user via IRC command added 2007 March 11
	my $which = $1;
	$message = $2;
	if($message =~ /(\S+)/) {
		$message = $1;
		if($which eq 'unignore') {
			$message = 'Sorry; /unignore is currently unimplemented. For now, you can stop ignoring someone at [User Settings] (near the bottom).';
		} elsif($which eq 'ignore') {
			$message = htmlcode('ignoreUser', $message);
		} else {
			$message = 'Unrecognized command: &quot;'.$message.'&quot;.';
		}
	} else {
		$message = 'You must specify a user.';
	}
	$query-&gt;param('sentmessage', $message) if length($message);


} else {
	unless($$VARS{publicchatteroff}) {	#is there a purpose for this?
	#return unless $$USER{title} eq 'nate';

	### Make sure they've been around 24 hours before opening the catbox to them.
#	my $getTime = $DB-&gt;sqlSelect(&quot;datediff(now(),createtime)+1 as difftime&quot;,&quot;node&quot;,&quot;node_id=&quot;.$UID.&quot; having difftime&lt;31&quot;);
#	if ($getTime &amp;&amp; $getTime&lt;=1) {
#		$DB-&gt;sqlInsert('message', {msgtext =&gt; 'The chatterbox will be open to you after your first day on everything2.', author_user =&gt; $rootID, for_user =&gt; $UID });
#		return;
#	}

	$message = substr($message, 0, 512);	#keep old, shorter length for public chatter
	utf8::encode($message);

	my $messageInterval = 480;
	my $wherestr = &quot;for_user=0 and tstamp &gt;= date_sub(now(), interval $messageInterval second)&quot;; 
	$wherestr .= ' and room='.$$USER{in_room} unless ($$VARS{omniphonic});
	$wherestr .= ' and author_user='.$$USER{user_id};

	my $lastmessage = $DB-&gt;sqlSelect('trim(msgtext)', 'message', $wherestr.&quot; order by message_id desc limit 1&quot;);
my $trimmedMessage = $message;
$trimmedMessage =~ s/^\s+//;
$trimmedMessage =~ s/\s+$//; 
	if ($lastmessage eq $trimmedMessage) {

		#$HTMLVARS{msgparams} = {
		#'author_id' =&gt; getId(getNode('Virgil', 'user')),
		#'recipient_id' =&gt; $$USER{user_id},
		#'message' =&gt; &quot;Hey, if you're using refresh to reload the chatterbox, you don't have to! Just hit the TALK button with the textbox empty, and the chat will update itself.&quot;,
		#};
		#htmlcode('sendPrivateMessage','1');
		return;
	}

return if (isSuspended($USER,&quot;chat&quot;));

	$DB-&gt;sqlInsert('message', {msgtext =&gt; $message, author_user =&gt; getId($USER), for_user =&gt; 0, room =&gt; $$USER{in_room}});
	}
}
</code>
</node>

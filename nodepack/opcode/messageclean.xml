<node>
  <type_nodetype>415056</type_nodetype>
  <node_id>1462446</node_id>
  <title>messageclean</title>
  <code>my $for_user = $query-&gt;param('sendto');
my $message = $query-&gt;param('message');
my $UID = getId($USER)||0;
my $isRoot = exists($HTMLVARS{'group_gods'}{$UID});
my $uid = $UID;	#deprecated

local *hasMsgAccess = sub {
  my ($msg, $user) = @_;
  return unless($msg);
  return if($msg-&gt;{author_user} != $user-&gt;{node_id} and not isGod($user));
  return 1;
};

local *deleteMsg = sub {
    my ($MSG, $user) = @_;
    return unless hasMsgAccess($MSG, $user);
    $DB-&gt;sqlDelete(&quot;message&quot;, &quot;message_id=$$MSG{message_id}&quot;);
    return 1;
};

local *archiveMsg = sub { 
    my ($MSG, $user, $archivebit) = @_;
    return unless hasMsgAccess($MSG, $user);
    $archivebit = 1 unless defined($archivebit);
    $DB-&gt;sqlUpdate(&quot;message&quot;, {archive=&gt;$archivebit}, &quot;message_id=$$MSG{message_id}&quot;);
    return 1;
};

local *spaceSplit = sub {
   my ($text) = @_;
   if($text =~ /(.*?)\s*(.*)/)
   {
     return ($1, $2);
   }else
   {
     return ($text, &quot;&quot;);
   }
};

local *getUserSmart = sub {
    my ($name) = @_;
    return unless $name;
    return $name if(ref($name) eq &quot;HASH&quot;);
    my $n = getNode($name, &quot;user&quot;);
    $n ||= getNode($name, &quot;usergroup&quot;);
    return $n;
};

local *getMsgQueue = sub {
   my ($userorgroup, $from) = @_;
   return unless $userorgroup;

   if($userorgroup-&gt;{type_nodetype} == getType(&quot;user&quot;)-&gt;{node_id}){
      return [$userorgroup-&gt;{node_id}]
   }elsif($userorgroup-&gt;{type_nodetype} == getType(&quot;usergroup&quot;)-&gt;{node_id}){
      unless(Everything::isApproved($from, $userorgroup)){
          return ($DB-&gt;selectNodegroupFlat($usergroup), 1);
      }
   }else{
      return;
   }
    return;
}

local *sendMsg = sub {
    my ($to, $from, $msgtext) = @_;
    $to = getUserSmart($to);
    $from = getUserSmart($from);
    return unless defined($to) and defined($from) and $msgtext;

    my (@$msgq, $isGrp) = getMsgQueue($to);

    foreach(@$msgq){
      my $msghash = {msgtext =&gt; $msgtext, author_user =&gt; $from-&gt;{node_id}, for_user =&gt; $_};
      $msghash-&gt;{for_usergroup} = $to-&gt;{node_id} if($isGrp);
      $DB-&gt;sqlInsert('message', $msghash);
    }
};

local *inviteUser = sub  {
             my ($invitee) = @_;
             my $room;
             if($room = getNodeById($USER-&gt;{in_room})){
                $room = $room-&gt;{title};
             }else{
                $room = &quot;go outside|outside&quot;;
             }
             
             sendMsg($invitee, $USER, &quot;come join me in [$room]&quot;);
         };

local *getMessageRecips = sub {
    my($msgbody) = @_;
    my ($to, $body);

    if($msgbody =~ s/^\{(.*?)\}\s*//g)
    {
        @$to = split(/\s*/,$1);
        $body = $msgbody;
    }else{
        ($to, $body) = spaceSplit($msgbody);
        @$to = [$to];
    }

    return ($to, $body);

};

local *sendPrivateMessage = sub {
   my($msgbody, $ONO) = @_;
   $ONO ||= 0;

   my ($to, $body) = getMessageRecips($msgbody);
   
   foreach(@$to)
   {
     sendMsg($_, $USER, $body);
   }

};

my $msgops = {
     &quot;delete&quot; = sub { deleteMsg(shift, shift) },
     &quot;archive&quot; = sub { archiveMsg(shift, shift) },
     &quot;unarchive&quot; = sub { archiveMsg(shift, shift, 0) },
};

my $msgtypes = {
     &quot;msg&quot;        =&gt; sub { sendPrivateMessage(shift) },
     &quot;msg?&quot;       =&gt; sub { sendPrivateMessage(shift, 1) },
     &quot;tell&quot;       =&gt; sub { sendPrivateMessage(shift) },
     &quot;tell?&quot;      =&gt; sub { sendPrivateMessage(shift, 1) },
     &quot;borg&quot;       =&gt; 1,
     &quot;topic&quot;      =&gt; 1,
     &quot;sayas&quot;      =&gt; 1,
     &quot;chatteroff&quot; =&gt; 1,
     &quot;chatteron&quot;  =&gt; 1,
     &quot;invite&quot;     =&gt; \&amp;inviteUser,

     &quot;say&quot;        =&gt; 1,

};

foreach($query-&gt;param) {
	if($_ =~ /^(.*?)\_(\d+)$/) {
	    my $MSG = $DB-&gt;sqlSelectHashref('*', 'message', &quot;message_id=$2&quot;);
            if(exists($msgops-&gt;{$1)){$msgops-&gt;{$1}-&gt;($MSG, $USER)};
	}
}

return if $uid==$HTMLVARS{guest_user};
return if $$VARS{borged} or ($$USER{title} eq 'everyone');
return unless length($message);
return if $message=~/^\s+$/;

my ($op, $body) = spaceSplit($message);
unless($op =~ s/^\//g){
   $op = &quot;say&quot;;  $body = $message;
}

if(exists($msgtypes-&gt;{$op}))
{
  $msgtypes-&gt;{$op}-&gt;($message);
}

return;

if($message =~ /^\/(msg\??|tell\??)(\{.+?\}\??|\s+\S+)\s+(.+)$/s) {
	#values:
	#	$1 - msg/tell and possibly online only
	#	$2 - recipient(s) and possibly online only
	#	$3 - message
	my $isONO = (substr($1,-1,1) eq '?');
	my $message = $3;
	my @recipients;
	if(substr($2,0,1) eq '{') {
		#given multiple recipients
		$isONO ||= (substr($2,-1,1) eq '?');
		if($2 =~ /^\{(.+?)\}\??$/) {	#should always match
			@recipients = split(/\s+/, $1);	#break apart names by spaces
		}
	} else {
		#only a single recipient
		if($2 =~ /(\S+)/) {	#should always match
			@recipients = ($1);
		}
	}
	unless(scalar(@recipients)) {	#invalid message command, so give error
		$message = 'The format of your private message was unrecognized. You tried to send &quot;'.$message.'&quot;.';
		@recipients = ($USER-&gt;{title});
	}
	$HTMLVARS{msgparams} = {
		'recipient' =&gt; \@recipients,
		'message' =&gt; $message,
		'ono' =&gt; $isONO,
	};
	htmlcode('sendPrivateMessage','0');

} elsif($message =~ /^\/old(msg\??|tell\??)\s+(\S+)\s+(.+)$/s) {
	#for msg typo-N-Wing changed \S* and .* into \S+ and .+
	my $onlyOnline = (substr($1,-1,1) eq '?') ? 1 : 0;
	$message = $3;
	my $user = $2;
	my $FORWARDS = getVars(getNode('chatterbox forward','setting'));
	#$user = $$FORWARDS{$user} if exists $$FORWARDS{$user};
        $user = $$FORWARDS{lc($user)} if exists $$FORWARDS{lc($user)};

        my $U = getNode($user, 'usergroup');
	$U = getNode($user, 'user') unless $U;
	$user =~ s/\_/ /gs unless $U;
        $U = getNode($user, 'usergroup') unless $U;
	$U = getNode($user, 'user') unless $U;
        $U = getNode($user, 'lockeduser') unless $U;

	if(not $U) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;You tried to talk to $user, but they don't exist on this system:\&quot;$message\&quot;&quot;, author_user =&gt; getId(getNode('root','user')), for_user =&gt;getId($USER) });
		return;
	}

	my $ugID = 0;
	if($$U{type}{title} eq 'usergroup') {
		$ugID = getId($U) || 0;
		unless(Everything::isApproved($USER, $U)) {
			$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;You aren't a part of the user group \&quot;$$U{title}\&quot;, so you can't say \&quot;$message\&quot;.&quot;, author_user =&gt; getId(getNode('root','user')), for_user=&gt;getId($USER) });
			return;
		}
	}

	my @rec;

	my $m;
	if(exists $$U{group}) {
                my $csr = $DB-&gt;sqlSelectMany('messageignore_id', 'messageignore', 'ignore_node='.$$U{node_id});
                my %ignores;
                while (my ($ig) = $csr-&gt;fetchrow) { $ignores{$ig} = 1 }
                $csr-&gt;finish;

		@rec = map { exists($ignores{getId($_)}) ? () : $_} @{$DB-&gt;selectNodegroupFlat($U)};
#		$message = '['.uc($$U{title}).']: ' . $message;
		for(my $i=0;$i&lt;scalar(@rec);++$i) {
			$m=$rec[$i];
			$m=$$m{node_id};
			$rec[$i] = $m;
		}
		push @rec, $uid;	#so when admins msg a group they aren't in, they'll get the msg they sent

		#sorted for easy user duplication detection
		@rec = sort { $a &lt;=&gt; $b } @rec;
	} else {
		push @rec, getId($U) unless $DB-&gt;sqlSelect('ignore_node', 'messageignore', &quot;messageignore_id=$$U{node_id} and ignore_node=$$USER{node_id}&quot;);
	}

	if($onlyOnline) {
		$message = 'ONO: ' . $message;
		my %onlines;
		my $csr = $DB-&gt;sqlSelectMany('member_user', 'room', '', '');
		while( my ($ig) = $csr-&gt;fetchrow) {
			$onlines{$ig} = 1;
		}
		$csr-&gt;finish;
		my @actives;
		foreach $m (@rec) {
			if($onlines{$m}) {
				push @actives, $m;
			} else {
				my $v = getVars(getNodeById($m));
				if($$v{'getofflinemsgs'}) { push @actives, $m; }
			}
		}
		@rec = @actives;
	}

	#group archive - have to do this after online only check
	if($ugID) {

		my $allowArchives = getVars(getNode('allow message archive','setting'));
		if($allowArchives &amp;&amp; exists $$allowArchives{$$U{title}}) {
			push @rec, $$U{node_id};
		}
	}

	#add message to table for each user
	my $old = 0;
	foreach $m (@rec) {
		next if $m==$old;
		$DB-&gt;sqlInsert('message', {msgtext=&gt;$message, author_user=&gt;$UID, for_user=&gt;$m, for_usergroup=&gt;$ugID });
		$old = $m;
	}

	$query-&gt;param('sentmessage', 'you said &quot;' . encodeHTML($message) . '&quot; to '.linkNode($U));

#botched /msg test
#} elsif( ($message =~ /^(\/)?(msg|tell)/) || ($message =~ /^\/(smg|mgs)/) ) {
} elsif( ($message =~ /^\W?(.sg|m.g|ms.|smg|mgs)/) &amp;&amp; !$$VARS{noTypoCheck} ) {
	$DB-&gt;sqlInsert('message',{
		msgtext=&gt;'typo alert: '.$message,
		author_user=&gt;$UID,
		for_user=&gt;$UID,
	});

} elsif($isRoot and $message =~ /^\/fakeborg\s+(.*)$/) {
	my $fakeTarget = $1;
	return unless length($fakeTarget);

	my $message = '/me has swallowed ['.$fakeTarget.']. ';

	#FIXME: should be a local sub
	my @EDBURSTS = (
		'*BURP*',
		'Mmmm...',
		'['.$fakeTarget.'] is good food!',
		'['.$fakeTarget.'] was tasty!',
		'keep \'em coming!',
		'['.$fakeTarget.'] yummy! More!',
		'[EDB] needed that!',
		'*GULP*','moist noder flesh',
		'*B R A P *',
	);
	$message .= $EDBURSTS[int(rand(@EDBURSTS))];

	my $BORG = getNode('EDB', 'user');

	$DB-&gt;sqlInsert('message', {
		msgtext =&gt; $message,
		author_user =&gt; (getId($BORG) || 0),
		for_user =&gt; 0,
		room =&gt; $$USER{in_room},
	});

} elsif($isRoot and $message =~ /^\/borg\s+(\S*)/) {
	my $user = $1;
	my $reason = undef;
	if($message =~ /^\/borg\s+\S+\s+(.+?)$/) {
		$reason = $1;
	}
	my $BORG = getNode('EDB', 'user');
	my $U = getNode($user, 'user');
	$user =~ s/\_/ /gs;
	$U = getNode($user, 'user') unless $U;

	unless($U) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;Can't borg 'em, $user doesn't exist on this system!&quot;, author_user =&gt; getId($BORG), for_user =&gt;getId($USER) });
		return;
	}
	if($reason) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; 'I ate you: ' . $reason, author_user =&gt; getId($BORG), for_user =&gt;getId($U) });
	}

	$user = $$U{title};	#ensure proper case
	my $message = &quot;/me has swallowed [$user]. &quot;;

	my @EDBURSTS = (
		'*BURP*', 'Mmmm...', &quot;[$user] is good food!&quot;,
		&quot;[$user] was tasty!&quot;, 'keep \'em coming!',
		&quot;[$user] yummy! More!&quot;, '[EDB] needed that!',
		'*GULP*','moist noder flesh', '*B R A P *'
	);
	$message .= $EDBURSTS[int(rand(@EDBURSTS))];

	my $V = getVars($U);
	++$$V{numborged};
	$$V{borged} = time;
	setVars($U, $V);
	$DB-&gt;sqlUpdate('room', {borgd =&gt; '1'}, 'member_user='.getId($U));


	my $OTHERUSERS = getNode('other users', 'nodelet');
	$$OTHERUSERS{nltext} =  Everything::HTML::parseCode($$OTHERUSERS{nlcode}, $OTHERUSERS);
	updateNode($OTHERUSERS, -1);


	$DB-&gt;sqlInsert('message', {
		msgtext =&gt; $message,
		author_user =&gt; getId($BORG),
		for_user =&gt; 0,
		room =&gt; $$USER{in_room}
	});

######### Begin Jay Messing around
} elsif($isRoot and $message=~/^\/topic\s+(.*)$/) {

  $message = $1;

  my $settingsnode = getNodeById(1149799); #More hard-coded goodness for speed.
  my $topics = getVars($settingsnode);

  $$topics{$$USER{in_room}} = $message;

  setVars($settingsnode, $topics);

######### End Jay Messing around
######### More Jay Messing around
} elsif($isRoot and $message=~ /^\/sayas\s+(\S*)\s+(.*)$/s) {

	my $message = $2;
	my $fromuser = lc($1);
	my $fromref;

	if($fromuser eq 'webster') {
		$fromref = getNode('Webster 1913', 'user');
	} elsif($fromuser eq 'edb') {
		$fromref = getNode('EDB', 'user');
	} elsif($fromuser eq 'klaproth') {
		$fromref = getNode('Klaproth', 'user');
	} elsif($fromuser eq 'eddie') {
		$fromref = getNode('Cool Man Eddie', 'user');
	} elsif(($fromuser eq 'guest') || ($fromuser eq 'gu')) {
		$fromref = getNode('Guest User', 'user');
	}

	if($fromref) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; $message , author_user =&gt; getId($fromref), for_user =&gt; 0, room =&gt; $$USER{in_room}});
	} else {
		$$VARS{barf} = 'nay!';
		$DB-&gt;sqlInsert('message', {msgtext =&gt; 'To sayas, you need to give me a user, choices are: EDB, Klaproth, or Webster', author_user =&gt; getId(getNode('root', 'user')), for_user =&gt; getId($USER), room =&gt; $$USER{in_room}});
	}

######### End Jay Messing around

} elsif($message=~/^\/chatteroff/) {
	$$VARS{publicchatteroff}=1;
} elsif($message=~/^\/chatteron/) {
	delete $$VARS{publicchatteroff};
#} elsif($isRoot and ($message =~ /^\/toss\s+(\S+)\s+(.+?)$/) and ($$USER{title} eq 'N-Wing')) {
#	my $luser = $1;
#	my $dest = $2;
#	my $reason = 0; #TODO

#	$dest =~ s/[^A-Za-z0-9 \-+_\!]//g;
#	if($dest eq 'pa') {
#		$dest = 'Political Asylum';
#	} elsif($dest eq 'nn') {
#		$dest = 'Noders Nursery';
#	}
#	my $R = getNode($dest, 'room');
#	my $BORG = getNode('EDB', 'user');
#	my $U = getNode($luser, 'user');
#	$user =~ s/\_/ /gs;
#	$U = getNode($luser, 'user') unless $U;

#	$DB-&gt;sqlInsert('message', {msgtext =&gt; $U{title} . ' into node_id=' . getId($R), author_user =&gt; getId(getNode('root','user')), for_user =&gt; getId($USER), room =&gt; $$USER{in_room}}); #debuging...

#	unless($R and ($dest ne 'outside')) {
#		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;Can't move 'em, there is no room \&quot;$dest\&quot;!&quot;, author_user =&gt; getId($BORG), for_user =&gt;getId($USER) });
#		return;
#	}
#	unless($U) {
#		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;Can't move 'em, $user doesn't exist on this system!&quot;, author_user =&gt; getId($BORG), for_user =&gt;getId($USER) });
#		return;
#	}
#	$DB-&gt;sqlInsert('message', {msgtext =&gt; 'I tossed you into '.$dest.($reason?': '.$reason:'').'.', author_user =&gt; getId($BORG), for_user =&gt; getId($U) });

#	$message = &quot;/me has thrown [$luser] into [$dest]. &quot;;
#	my @EDBURSTS = (
#	&quot;[$luser] is good exercise!&quot;, &quot;[$luser] was heavy!&quot;,
#	&quot;Don't be a [$luser].&quot;, &quot;[$luser] was annoying me!&quot;, 	'[EDB] needed that!','stale noder flesh'
#	);
#	$message .= $EDBURSTS[int(rand(@EDBURSTS))];

#	my $V = getVars($U);
#	$$V{in_room} = $R?getId($R):0;
#	setVars($U, $V);
#	changeRoom($U, $R?getId($R):0);

#	$DB-&gt;sqlInsert('message', {msgtext =&gt; $message, author_user =&gt; getId($BORG), for_user =&gt; 0, room =&gt; $$USER{in_room} });

#	my $OTHERUSERS = getNode('other users', 'nodelet');
#	$$OTHERUSERS{nltext} =  Everything::HTML::parseCode($$OTHERUSERS{nlcode}, $OTHERUSERS);
#	updateNode($OTHERUSERS, -1);

} elsif($message =~ /^\/macro\s+(.*?)$/) {
	$message = $1;
	my $rootID = getId(getNode('root','user'));
	if($isRoot || (exists $HTMLVARS{'group_content editors'}{$uid})) {
		if($message =~ /^(\S+)\s+(.+?)$/) {
			$message = $1;
			$$VARS{'chatmacro'}=$2;
		} else {
			delete $$VARS{'chatmacro'};
		}
		htmlcode('doChatMacro', $message);
#		$message = 'you ran macro '.$message.' with parameters: '.$$VARS{'chatmacro'};
		undef $message;
		delete $$VARS{'chatmacro'};
	} else {
		$message = 'Sorry, you aren\'t allowed to use macros yet. You tried to run: '.$message;
	}
	$DB-&gt;sqlInsert('message', {msgtext =&gt; $message, author_user =&gt; $rootID, for_user =&gt; $uid }) if $message;

} else {
	unless($$VARS{publicchatteroff}) {	#is there a purpose for this?
	#return unless $$USER{title} eq 'nate';
	$DB-&gt;sqlInsert('message', {msgtext =&gt; $message, author_user =&gt; getId($USER), for_user =&gt; 0, room =&gt; $$USER{in_room}});
	}
}</code>
</node>

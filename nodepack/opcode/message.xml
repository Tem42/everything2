<node>
  <type_nodetype>415056</type_nodetype>
  <node_id>445058</node_id>
  <title>message</title>
  <code>return if $APP-&gt;isGuest($USER);

my $for_user = $query-&gt;param('sendto');
my $message = $query-&gt;param('message');
my $UID = getId($USER)||0;
my $isRoot = exists($HTMLVARS{'group_gods'}{$UID});
my $isChanop = $APP-&gt;isChanop($USER, &quot;nogods&quot;);

foreach($query-&gt;param) {
	if($_ =~ /^deletemsg\_(\d+)$/) {
		my $MSG = $DB-&gt;sqlSelectHashref('*', 'message', &quot;message_id=$1&quot;);
		next unless $MSG;
		next unless $isRoot || ($UID==$$MSG{for_user});
		$DB-&gt;sqlDelete('message', &quot;message_id=$$MSG{message_id}&quot;);
	} elsif($_ =~ /^archive\_(\d+)$/) {
		#NPB FIXME Perl Monks is better
		my $MSG = $DB-&gt;sqlSelectHashref('*', 'message', &quot;message_id=$1&quot;);
		next unless $MSG;
		next unless $isRoot||($UID==$$MSG{for_user});
		my $realTime = $$MSG{tstamp};
		$DB-&gt;sqlUpdate('message', {archive=&gt;1, tstamp=&gt;$realTime}, 'message_id='.$$MSG{message_id});
	} elsif($_ =~ /^unarchive\_(\d+)$/) {
		my $MSG = $DB-&gt;sqlSelectHashref('*', 'message', &quot;message_id=$1&quot;);
next unless $MSG;
		next unless $isRoot||($UID==$$MSG{for_user});
		my $realTime = $$MSG{tstamp};
		$DB-&gt;sqlUpdate('message', {archive=&gt;0, tstamp=&gt;$realTime}, 'message_id='.$$MSG{message_id});
	}
}
return if $$VARS{borged} or ($$USER{title} eq 'everyone');

my $sushash = $DB-&gt;sqlSelectHashref(&quot;suspension_sustype&quot;, &quot;suspension&quot;,&quot;suspension_user=$$USER{node_id} and suspension_sustype='1948205'&quot;); # Check for unverified email
return if ($$sushash{suspension_sustype}&amp;&amp; $for_user==0);

$message =~ s/^\s+|\s+$//g;
return if $message eq '';

#Replace synonyms for /whisper just with /whisper.
$message =~ s/^\/(small|aside|ooc|whispers?|monologue)\b/\/whisper/i; 

#Frivolous synonyms for singing
$message =~ s/^\/(aria|chant|song|rap|gregorianchant)\b/\/sing/i;

#Synonym for /me's
$message =~ s/^\/my/\/me\'s/i;

#Synonym for /roll 1d2
if ($message =~ /^\/(flip|coinflip)\s*$/i) { $message = &quot;/rolls 1d2&quot;; }

# The validCommand check is used to prevent accidental dropped messages and similar
#  mistakes.  Commands which are passed through to be posted in the room (and hence
#  are parsed by [showchatter]) need to be in this list.
my $validCommand = 0;
my @validCommands = qw/
	small aside whisper whispers monologue
	sing sings me me's roll rolls
	fireball sanctify
/;
my %validCommands = map { $_ =&gt; 1 } @validCommands;
if ($message =~ m!^/([^\s]+)!) {
	my $command = $1;
	$validCommand = 1 if $validCommands{$command};
}

if($message =~ /^\/(invite)\s+(\S*)$/si) {
	if($$USER{in_room}) {
		my $R = getNodeById($$USER{in_room});
		my $room;
		$room = $$R{title} if $R;
		$message = &quot;/msg $2 come join me in [$$R{title}]&quot;;
	} else {
		$message = &quot;/msg $2 come join me outside&quot;;
	}
}

my $valid = getVars(getNode('egg commands','setting'));

if ($message =~ /^\/(\S*)?\s+(.+?)\s*$/) {
	my $phrase = $1;
	$phrase = substr($phrase,0,-1) if (!$$valid{$phrase});
	if ($$valid{$phrase}) {
		$validCommand = 1;
		if ($$VARS{easter_eggs} &lt; 1) {
			my $message = &quot;You have no eggs to do that with.&quot;;
			$query-&gt;param('sentmessage', $message);
			return;
		}
		my $uName = $2;
		my $recUser = getNode($uName,&quot;user&quot;);
		if (!$recUser) {
			$uName =~ s/\_/ /gs;
			$recUser = getNode($uName, 'user');
		}
		return unless $recUser;
		if ($$recUser{user_id} == $$USER{user_id}) {
			my $message = &quot;You can't do that to yourself!&quot;;
			$query-&gt;param('sentmessage', $message);
			return;
		}
		
		$$VARS{easter_eggs}--;
		adjustGP($recUser, 3);
		$message = &quot;/&quot;.$phrase.&quot; $uName&quot;;
	}
}

### Fireball level power --mauler

if ($message =~ /^\/fireball\s+(.*)$/i) {
	my $minLvl = 15;

	if (($APP-&gt;getLevel($USER) &gt;= $minLvl) || ($isRoot)) {

		if ($$VARS{easter_eggs} &gt; 0) {

			my $fireballer = $$USER{title};
			my $uName = $1;
			my $recUser = getNode($uName,&quot;user&quot;);
			my $fireballee = $uName;
			if (!$recUser) {
				$uName =~ s/\_/ /gs;
				$recUser = getNode($uName, 'user');
			}
			if ($recUser) {
				$fireballee = $$recUser{title};
			}

			$$VARS{easter_eggs}--;
			$$recUser{sanctity} += 1;
			updateNode($recUser, -1);
			adjustGP($recUser, 5);

			htmlcode('sendPrivateMessage',{
				'recipient_id' =&gt; getId($recUser),
				'message' =&gt; &quot;WHOOSH! You feel yourself engulfed in flames! &quot;
					. &quot;It burns! It burns! Or does it? After a moment, you feel &quot;
					. &quot;a pleasant sensation. Like a warm embrace. And you &quot;
					. &quot;realize that this is not fire after all, but [5 GP|love].&quot;
					. &quot; The kind of love that could only have come from user &quot;
					. &quot;[$fireballer].&quot;,
				'author' =&gt; 'fireball',
			});

			my $rnd = int(rand(10));

			if ($rnd == 1) {
				$message = &quot;/conflagrate $fireballee&quot;;
			} elsif ($rnd == 2) {
				$message = &quot;/immolate $fireballee&quot;;
			} elsif ($rnd == 3) {
				$message = &quot;/singe $fireballee&quot;;
			} elsif ($rnd == 4) {
				$message = &quot;/explode $fireballee&quot;;
			} elsif ($rnd == 5) {
				$message = &quot;/limn $fireballee&quot;;
			} else {
				$message = &quot;/fireball $fireballee&quot;;
			}
		} else {
			$message = &quot;/me\'s fireball fizzles.&quot;;
		}
	} else {
		$message = &quot;/me\'s fireball fizzles.&quot;;
	}
}
## End fireball

## Sanctify as a catbox command --mauler

if (($message =~ /^\/sanctify\s+(.*)$/i)) {
	return if ($$VARS{GPoptout});
	my $minLvl = 11;
	my $Sanctificity = 10;
	if (($APP-&gt;getLevel($USER) &gt;= $minLvl) || ($isRoot)) {
		my $sanctifyer = $$USER{title};
		my $uName = $1;
		my $recUser = getNode($uName,&quot;user&quot;);
		my $sanctee = $uName;
		if (!$recUser) {
			$uName =~ s/\_/ /gs;
			$recUser = getNode($uName, 'user');
		}
		if ($recUser) {	
			$sanctee = $$recUser{title};
		}

		return unless $recUser;
		return if ($$recUser{user_id} == $$USER{user_id});

		$$recUser{sanctity} += 1;
		updateNode($recUser, -1);

		adjustGP($recUser, $Sanctificity);
		adjustGP($USER, -$Sanctificity);
                $APP-&gt;securityLog(getNode('Sanctify user', 'superdoc'), $USER, &quot;$$USER{title} sanctified $sanctee with $Sanctificity GP.&quot;);

		htmlcode('sendPrivateMessage',{
				'recipient_id' =&gt; getId($recUser),
				'message' =&gt; &quot;Whoa! You've been [sanctify|sanctified] in the catbox by [$sanctifyer]!&quot;,
				'author' =&gt; 'Cool Man Eddie'
			});

		$message = &quot;/sanctify $sanctee&quot;;
	} else {
#		$message = &quot;/me has insufficient sanctity.&quot;;
		return;
	}
}

## End Sanctify command


## drag disruptive users into another room - admin function
## drag multiple users separated by spaces, e.g.
##
## /drag ushdfgakjasgh Swap

if (($message =~ /^\/drag\s+(.*)$/i) &amp;&amp; $isChanop) {
  my $twits = $1;

  htmlcode('dragUsers',$twits);
  return;
}

## end /drag command code

## dice rolling command code
if ($message =~ /^\/roll\s?(.*)$/i)
	{
	my @dice = ();
	my $totalizer = 0;
	my $rollstr = $1;
	$rollstr =~ s/\s//g; ## remove spaces
	## eg: 3d6[+1]
	## anything extra is trimmed and ignored
	if ($rollstr =~ m/((\d+)d(-?\d+)(([\+-])(\d+))?(keep(\d+))?)/i)
		{
		my $diceCount = int($2);
		my $diceSides = int($3);
		my $diceKept = int($8);

		# If no &quot;keep&quot; text or negative dice kept, keep all dice
		if ($diceKept &lt;= 0 || $diceKept &gt; $diceCount)
			{ $diceKept = $diceCount; }

		if ($diceCount &gt; 1000) ## prevent silliness
			{ $message = &quot;/rolls too many dice and makes a mess.&quot;; }
		elsif ($diceSides &lt; 0) ## prevent silliness
			{ $message = &quot;/rolls anti-dice, keep them away from the normal dice please.&quot;; }
		else
			{
			unless ($diceSides == 0) ## zero-sided dice
				{
				for (my $i=0; $i &lt; $diceCount; $i++) 
					{ push @dice, int(rand($diceSides))+1; }
				@dice = reverse sort @dice;
				for (my $i=0; $i &lt; $diceKept; $i++)
					{
					$totalizer += $dice[$i];
					}
				}
			if ($5 eq '+') { $totalizer += $6; }
			if ($5 eq '-') { $totalizer -= $6; }
			$message = &quot;/rolls &quot; . $1 . &quot; &amp;rarr; &quot; . $totalizer;
			}
		}
	else
		{ $message = &quot;/rolls poorly, format: 3d6&amp;#91;+1&amp;#93;&quot;; }
	}
## end dice rolling command code

my $helpTopics = $message;
my ($sendHelp, $recipient);
while ($helpTopics =~ /^\/help\s+(.*)$/i) {
	$sendHelp = 1;
	my $helpVars = getVars(getNode('help topics','setting'));
	$recipient = $$USER{user_id} unless $recipient;
	my $helpText = $1;
	$helpTopics = $helpVars-&gt;{$helpText};
	if (!$helpTopics) {
                my $theTopic = encodeHTML($1);
		$helpTopics = &quot;Sorry, no information on $theTopic is available. Please try [Everything2 Help] for further assistance.&quot;;
		if (($helpText =~ /^(\S*)?\s+(\S*)/)&amp;&amp;($isRoot)) {
			$helpTopics = $helpVars-&gt;{$2};
			return unless $helpTopics;
			$recipient = getNode($1, 'user')-&gt;{user_id};
		}
	}
}

if ($sendHelp) {
	htmlcode('sendPrivateMessage',{
		'author_id' =&gt; getId(getNode('Virgil', 'user')),
		'recipient_id' =&gt; $recipient,
		'message' =&gt; $helpTopics,
	});

	return $helpTopics;
}

if($message =~ /^\/(msg\??|tell\??)(\{.+?\}\??|\s+\S+)(\s+.+)?$/si) {
	#values:
	#	$1 - msg/tell and possibly online only
	#	$2 - recipient(s) and possibly online only
	#	$3 - message
	my $isONO = (substr($1,-1,1) eq '?');
	my $allTargets = $2;
	my $message = $3;

	return if $message=~/^\s+$/;

	my @recipients;
	if(substr($allTargets,0,1) eq '{') {
		#given multiple recipients
		$isONO ||= (substr($allTargets,-1,1) eq '?');
		if($allTargets =~ /^\{(.+?)\}\??$/) {	#should always match
			@recipients = split(/\s+/, $1);	#break apart names by spaces
		}
	} else {
		#only a single recipient
		if($allTargets =~ /(\S+)/) {	#should always match
			@recipients = ($1);
		}
	}
	unless(scalar(@recipients)) {	#invalid message command, so give error
		$message = 'The format of your private message was unrecognized. You tried to send &quot;'.$message.'&quot;.';
		@recipients = ($USER-&gt;{title});
	}
	htmlcode('sendPrivateMessage',{
		'recipient' =&gt; \@recipients,
		'message' =&gt; $message,
		'ono' =&gt; $isONO,
	});

} elsif($message =~ /^\/old(msg\??|tell\??)\s+(\S+)\s+(.+)$/si) {
	#for msg typo-N-Wing changed \S* and .* into \S+ and .+
	my $onlyOnline = (substr($1,-1,1) eq '?') ? 1 : 0;
	$message = $3;
	my $user = $2;
	my $FORWARDS = getVars(getNode('chatterbox forward','setting'));
	#$user = $$FORWARDS{$user} if exists $$FORWARDS{$user};
	$user = $$FORWARDS{lc($user)} if exists $$FORWARDS{lc($user)};

	my $U = getNode($user, 'usergroup');
	$U = getNode($user, 'user') unless $U;
	$user =~ s/\_/ /gs unless $U;
	$U = getNode($user, 'usergroup') unless $U;
	$U = getNode($user, 'user') unless $U;
	$U = getNode($user, 'lockeduser') unless $U;

	if(not $U) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;You tried to talk to $user, but they don't exist on this system:\&quot;$message\&quot;&quot;, author_user =&gt; getId(getNode('root','user')), for_user =&gt;getId($USER) });
		return;
	}

	my $ugID = 0;
	if($$U{type}{title} eq 'usergroup') {
		$ugID = getId($U) || 0;
		unless(Everything::isApproved($USER, $U)) {
			$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;You aren't a part of the user group \&quot;$$U{title}\&quot;, so you can't say \&quot;$message\&quot;.&quot;, author_user =&gt; getId(getNode('root','user')), for_user=&gt;getId($USER) });
			return;
		}


	}

	my @rec;

	my $m;
	if(exists $$U{group}) {
		my $csr = $DB-&gt;sqlSelectMany('messageignore_id', 'messageignore', 'ignore_node='.$$U{node_id});
		my %ignores;
		while (my ($ig) = $csr-&gt;fetchrow) { $ignores{$ig} = 1 }
		$csr-&gt;finish;

		@rec = map { exists($ignores{getId($_)}) ? () : $_} @{$DB-&gt;selectNodegroupFlat($U)};
#		$message = '['.uc($$U{title}).']: ' . $message;
		for(my $i=0;$i&lt;scalar(@rec);++$i) {
			$m=$rec[$i];
			$m=$$m{node_id};
			$rec[$i] = $m;
		}
		push(@rec, $UID);	#so when admins msg a group they aren't in, they'll get the msg they sent

		#sorted for easy user duplication detection
		@rec = sort { $a &lt;=&gt; $b } @rec;
	} else {
		push @rec, getId($U) unless $DB-&gt;sqlSelect('ignore_node', 'messageignore', &quot;messageignore_id=$$U{node_id} and ignore_node=$$USER{node_id}&quot;);
	}

	if($onlyOnline) {
		$message = 'ONO: ' . $message;
		my %onlines;
		my $csr = $DB-&gt;sqlSelectMany('member_user', 'room', '', '');
		while( my ($ig) = $csr-&gt;fetchrow) {
			$onlines{$ig} = 1;
		}
		$csr-&gt;finish;
		my @actives;
		foreach $m (@rec) {
			if($onlines{$m}) {
				push @actives, $m;
			} else {
				my $v = getVars(getNodeById($m));
				if($$v{'getofflinemsgs'}) { push @actives, $m; }
			}
		}
		@rec = @actives;
	}

	#group archive - have to do this after online only check
	if($ugID) {


		my $allowArchives = getVars(getNode('allow message archive','setting'));
		if($allowArchives &amp;&amp; exists $$allowArchives{$$U{title}}) {
			push @rec, $$U{node_id};
		}
	}

	#add message to table for each user
	my $old = 0;
	foreach $m (@rec) {
		next if $m==$old;
		$DB-&gt;sqlInsert('message', {msgtext=&gt;$message, author_user=&gt;$UID, for_user=&gt;$m, for_usergroup=&gt;$ugID });
		$old = $m;
	}

	$query-&gt;param('sentmessage', 'you said &quot;' . encodeHTML($message) . '&quot; to '.linkNode($U));

#botched /msg test
} elsif( ($message =~ /^\W?(.sg|m^[aeiouy]g|ms.|smg|mgs)/i) &amp;&amp; !$$VARS{noTypoCheck} ) {

	$DB-&gt;sqlInsert('message',{
		msgtext=&gt;'typo alert: '.$message,
		author_user=&gt;$UID,
		for_user=&gt;$UID,
	});

} elsif( ($isRoot || $isChanop) and $message =~ /^\/fakeborg\s+(.*)$/i) {
	my $fakeTarget = $1;
	return unless length($fakeTarget);

	my $message = '/me has swallowed ['.$fakeTarget.']. ';

	#FIXME: should be a local sub
	my @EDBURSTS = (
		'*BURP*',
		'Mmmm...',
		'['.$fakeTarget.'] is good food!',
		'['.$fakeTarget.'] was tasty!',
		'keep \'em coming!',
		'['.$fakeTarget.'] yummy! More!',
		'[EDB] needed that!',
		'*GULP*','moist noder flesh',
		'*B R A P *',
	);
	$message .= $EDBURSTS[int(rand(@EDBURSTS))];

	my $BORG = getNode('EDB', 'user');

	$DB-&gt;sqlInsert('message', {
		msgtext =&gt; $message,
		author_user =&gt; (getId($BORG) || 0),
		for_user =&gt; 0,
		room =&gt; $$USER{in_room},
	});

} elsif($isChanop  and $message =~ /^\/borg\s+(\S*)/i) {
	my $user = $1;
	my $reason = undef;
	if($message =~ /^\/borg\s+\S+\s+(.+?)$/i) {
		$reason = $1;
	}
	my $BORG = getNode('EDB', 'user');
	my $U = getNode($user, 'user');
	$user =~ s/\_/ /gs;
	$U = getNode($user, 'user') unless $U;

	unless($U) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; &quot;Can't borg 'em, $user doesn't exist on this system!&quot;, author_user =&gt; getId($BORG), for_user =&gt;getId($USER) });
		return;
	}
	$user = $$U{title};	#ensure proper case


#	if($reason) {
#		$DB-&gt;sqlInsert('message', {msgtext =&gt; 'I ate you: ' . $reason, author_user =&gt; getId($BORG), for_user =&gt;getId($U) });
#	}
	#added 2008-08-12 - borgings now let borgee know who borged them
	my $sendMessage = '[' . $$USER{title} . '] instructed me to eat you';
	if($reason) {
		$sendMessage = $sendMessage . ': '.$reason;
	}
	$DB-&gt;sqlInsert('message', {msgtext =&gt; $sendMessage, author_user =&gt; getId($BORG), for_user =&gt;getId($U) });
	$sendMessage = 'you instructed me to eat [' . $user . '] ('.getId($U).')';
	if($reason) {
		$sendMessage = $sendMessage . ': '.$reason;
	}
	$DB-&gt;sqlInsert('message', {msgtext =&gt; $sendMessage, author_user =&gt; getId($BORG), for_user =&gt; $UID });


	#update user stats
	my $V = getVars($U);

	++$$V{numborged};
	$$V{borged} = time;
	setVars($U, $V);
	$DB-&gt;sqlUpdate('room', {borgd =&gt; '1'}, 'member_user='.getId($U));


	#update nodelet
	my $OTHERUSERS = getNode('other users', 'nodelet');
	$$OTHERUSERS{nltext} =  Everything::HTML::parseCode($$OTHERUSERS{nlcode}, $OTHERUSERS);
	updateNode($OTHERUSERS, -1);

        htmlcode('addNotification', 'chanop borged user', 0, {
	       chanop_id =&gt; $USER-&gt;{node_id},
	       user_id =&gt; $U-&gt;{node_id}
	});

	#as of 2008-08-12, not showing messages in public area
	return;

	#display message in chatterbox
	my $message = &quot;/me has swallowed [$user]. &quot;;

	my @EDBURSTS = (
		'*BURP*', 'Mmmm...', &quot;[$user] is good food!&quot;,
		&quot;[$user] was tasty!&quot;, 'keep \'em coming!',
		&quot;[$user] yummy! More!&quot;, '[EDB] needed that!',
		'*GULP*','moist noder flesh', '*B R A P *'
	);
	$message .= $EDBURSTS[int(rand(@EDBURSTS))];

	$DB-&gt;sqlInsert('message', {
		msgtext =&gt; $message,
		author_user =&gt; getId($BORG),
		for_user =&gt; 0,
		room =&gt; $$USER{in_room}
	});

	return;


######### Begin Jay Messing around
} elsif(($isRoot or $isChanop) and $message=~/^\/topic\s+(.*)$/i) {

  $message = $1;
  utf8::encode($message);

  my $settingsnode = getNodeById(1149799); #More hard-coded goodness for speed.
  my $topics = getVars($settingsnode);

  $$topics{$$USER{in_room}} = $message;

  setVars($settingsnode, $topics);

  # Log topic changes -- the gift shop is the official &quot;topic change location&quot;
  $message = encodeHTML($message);
  my $msgOp = getNode('E2 Gift Shop', 'superdoc');
  my $room = getNodeById($$USER{in_room});
  my $roomName = $$USER{in_room} == 0 ?
                  &quot;outside&quot; :
                  ($room ? $$room{title} : &quot;missing room ($$USER{in_room})&quot;);
  $APP-&gt;securityLog(getNode('E2 Gift Shop', 'superdoc'), $USER, &quot;\[$$USER{title}\[user\]\] changed $roomName topic to '$message'&quot;);

######### End Jay Messing around
######### More Jay Messing around
} elsif( ($isRoot || $isChanop) and $message=~ /^\/sayas\s+(\S*)\s+(.*)$/si) {

	my $message = $2;
	my $fromuser = lc($1);
	my $fromref;

	if($fromuser eq 'webster') {
		$fromref = getNode('Webster 1913', 'user');
	} elsif($fromuser eq 'edb') {
		$fromref = getNode('EDB', 'user');
	} elsif($fromuser eq 'klaproth') {
		$fromref = getNode('Klaproth', 'user');
	} elsif($fromuser eq 'eddie') {
		$fromref = getNode('Cool Man Eddie', 'user');
### Gorgonzola adds Giant Teddy Bear
	} elsif($fromuser eq 'bear') {
		$fromref = getNode('Giant Teddy Bear', 'user');
### Gorgonzola adds Virgil
	} elsif($fromuser eq 'virgil') {
		$fromref = getNode('Virgil', 'user');
	} elsif(($fromuser eq 'guest') || ($fromuser eq 'gu')) {
		$fromref = getNode('Guest User', 'user');
	}

	if($fromref) {
		$DB-&gt;sqlInsert('message', {msgtext =&gt; $message , author_user =&gt; getId($fromref), for_user =&gt; 0, room =&gt; $$USER{in_room}});
	} else {
		$$VARS{barf} = 'nay!';
		$DB-&gt;sqlInsert('message', {msgtext =&gt; 'To sayas, you need to give me a user, choices are: EDB, eddie, virgil, Bear, Klaproth, or Webster', author_user =&gt; getId(getNode('root', 'user')), for_user =&gt; getId($USER), room =&gt; $$USER{in_room}});
	}

######### End Jay Messing around

} elsif($message=~/^\/chatteroff/i) {
	$$VARS{publicchatteroff}=1;
} elsif($message=~/^\/chatteron/i) {
	delete $$VARS{publicchatteroff};
} elsif($message =~ /^\/macro\s+(.*?)$/i) {
	$message = $1;
	my $rootID = getId(getNode('root','user'));
	if($isRoot || (exists $HTMLVARS{'group_content editors'}{$UID})) {
		if($message =~ /^(\S+)\s+(.+?)$/) {
			$message = $1;
			$$VARS{'chatmacro'}=$2;
		} else {
			delete $$VARS{'chatmacro'};
		}
		htmlcode('doChatMacro', $message);
#		$message = 'you ran macro '.$message.' with parameters: '.$$VARS{'chatmacro'};
		undef $message;
		delete $$VARS{'chatmacro'};
	} else {
		$message = 'Sorry, you aren\'t allowed to use macros yet. You tried to run: '.$message;
	}
	$DB-&gt;sqlInsert('message', {msgtext =&gt; $message, author_user =&gt; $rootID, for_user =&gt; $UID }) if $message;


} elsif($message =~ /^\/(ignore|unignore)(\s+.*)?$/i) {
	#ignore user via IRC command added 2007 March 11
	my $which = $1;
	$message = $2;
	if($message =~ /\s+(.+)/) {
		$message = $1;
		if($which eq 'unignore') {
			$message = htmlcode('unignoreUser', $message);
		} elsif($which eq 'ignore') {
			$message = htmlcode('ignoreUser', $message);
		} else {
			$message = 'Unrecognized command: &quot;'.$message.'&quot;.';
		}
	} else {
		$message = 'You must specify a user.';
	}
	$query-&gt;param('sentmessage', $message) if length($message);

} elsif( ($message =~ m!^\s*/!) &amp;&amp; !$validCommand &amp;&amp; !$$VARS{noTypoCheck} ) {

	$DB-&gt;sqlInsert('message',{
		msgtext =&gt; &quot;You typed an invalid command: $message&quot;,
		author_user =&gt; $UID,
		for_user =&gt; $UID,

	});

} else {
	return if $$VARS{publicchatteroff};

	$message = substr($message, 0, 512);	#keep old, shorter length for public chatter
	utf8::encode($message);

	my $messageInterval = 480;
	my $wherestr = &quot;for_user=0 and tstamp &gt;= date_sub(now(), interval $messageInterval second)&quot;;
	$wherestr .= ' and room='.$$USER{in_room} unless ($$VARS{omniphonic});
	$wherestr .= ' and author_user='.$$USER{user_id};

	my $lastmessage = $DB-&gt;sqlSelect('trim(msgtext)', 'message', $wherestr.&quot; order by message_id desc limit 1&quot;);
	my $trimmedMessage = $message;
	$trimmedMessage =~ s/^\s+//;
	$trimmedMessage =~ s/\s+$//;
	if ($lastmessage eq $trimmedMessage) {
		return;
	}

	return if (isSuspended($USER,&quot;chat&quot;));
	return if ($$VARS{infected} == 1);

	$DB-&gt;sqlInsert('message', {msgtext =&gt; $message, author_user =&gt; getId($USER), for_user =&gt; 0, room =&gt; $$USER{in_room}});
}</code>
</node>

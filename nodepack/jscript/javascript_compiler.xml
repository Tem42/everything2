<node>
  <type_nodetype>1786405</type_nodetype>
  <doctext>$.extend(e2, {
	fxDuration: (e2.fxDuration || 200) - 1, // fx off is stored as 1
	isChatterlight: /^Chatterlight/i.test(document.title) &amp;&amp; (e2.autoChat = true),
	collapsedNodelets: e2.collapsedNodelets || '',
	
	tinyMCESettings: {
		// add mode before use
		theme: 'advanced',
		plugins: 'table',
		theme_advanced_buttons3_add_before: 'tablecontrols,|',
		theme_advanced_disable: 'styleselect,image,anchor,link,unlink,row_props,cell_props',
		theme_advanced_statusbar_location: 'bottom',
		theme_advanced_resizing: true,
		element_format: 'html',
		remove_linebreaks: false,
		forced_root_block: '',
		inline_styles: false,
		entity_encoding: 'raw',
		invalid_elements: 'a,img,div,span',
		extended_valid_elements: 'big,small,i,b,tt,p[align],hr[width]',
		formats: {
			alignleft:    { selector: 'p', attributes : { align: &quot;left&quot; } },
			alignright:   { selector: 'p', attributes : { align: &quot;right&quot; } },
			aligncenter:  { selector: 'p', attributes : { align: &quot;center&quot; } }
		}
	},
	
	timeout: 20, //seconds
	defaultUpdatePeriod: 3.5, // minutes
	sleepAfter: 17 // minutes
});

jQuery.fx.interval = 40; // 25 frames/second: assume user is human. (Default = 13 =&gt; ~80Hz == daft)
if (e2.fxDuration == 0) jQuery.fx.off = true;

[%
use DateTime;
use DateTime::Format::Strptime;

my $modifiedTimeFormat = '%a, %d %b %Y %T %Z'; # format for HTML header
my $editTimeFormat = '%F %T'; # format used by database

my $modifiedDt = $$NODE{edittime};

while ($$VARS{includedJS} =~ s/(^|,)(?:
	(1878034)| # Everything2 Ajax
	(1872965)| # Zen Nodelet Collapser
	1872456| # Prototype 1
	1872457| # Prototype 2
	1842173	 # async voting
	)\b($|\1)?,*/$1/x ) {
	delete $$VARS{noquickvote} if $2;
	delete $$VARS{nonodeletcollapser} if $3;
}

my ($str, $N, @JS) ;
@JS = (getNode('default javascript', 'jscript'));
push @JS, getNode('Everything2 Ajax', 'jscript') unless $$VARS{noquickvote} ;
push @JS, getNode('Zen Nodelet Collapser', 'jscript') unless $$VARS{nonodeletcollapser} ;
push @JS , split(',', $$VARS{includedJS}) if $$VARS{includedJS};

my $jsType = getId(getType('jscript'));
foreach (@JS) {
	getRef $_;
	next unless $_ &amp;&amp; $$_{type_nodetype} == $jsType;
	$str .= &quot;// === $$_{title}, $$_{edittime} ===\n\n$$_{doctext}\n\n&quot;;
	$modifiedDt = $$_{edittime} if $$_{edittime} gt $modifiedDt;
}

# For caching purposes, we want to set a Last-Modified HTTP
#  header matching the last time this user's javascript
#  preferences were updated or the latest update to
#  this or an included jscript node
my $dateInputer = new DateTime::Format::Strptime(
  pattern     =&gt; $editTimeFormat
  , locale      =&gt; 'en_US'
);

my $dateOutputer = new DateTime::Format::Strptime(
  pattern     =&gt; $modifiedTimeFormat
  , locale      =&gt; 'en_US'
);

$modifiedDt = $dateInputer-&gt;parse_datetime($modifiedDt);

my $prefsModified = DateTime-&gt;from_epoch(epoch =&gt; $$VARS{'preference_last_update_time'})
	if defined $$VARS{'preference_last_update_time'};
$modifiedDt = $prefsModified if $prefsModified &amp;&amp; $prefsModified &gt; $modifiedDt;

my $modifiedDateStr = $dateOutputer-&gt;format_datetime($modifiedDt);
$HEADER_PARAMS{'-Last-Modified'} = $modifiedDateStr;

return &quot;e2.guest=true;\n$str&quot; if ($$USER{title} eq 'Guest User' or $query -&gt; param('guest'));
# $$USER{title} eq 'Guest User' is not enough for testing because of the base element in html head,
# but don't rely on param check alone because Javascript Compiler may get cached

return $str;
%]
</doctext>
  <contentversion></contentversion>
  <s3bucket></s3bucket>
  <node_id>1869865</node_id>
  <title>Javascript Compiler</title>
  <s3content_id></s3content_id>
</node>

<node>
  <doctext>//  JavaScript class for handling colors
//  1/24/02

//-----------------------------------------------------------------------------
//  Named colors
var NAMED = new Object();
//  Which of the named colors are fake.
var FAKE  = new Object();
initNamedColors();

//-----------------------------------------------------------------------------
//  These are IntRange instances. They are properly initalized below, after the 
//  IntRange class is fully defined.
var RGBRange    = null; //  RGB values
var HueRange    = null; //  Hue
var SatBriRange = null; //  Saturation and brightness

//-----------------------------------------------------------------------------
function zpadl( s, digits ) {
    while ( s.length &lt; digits )
        s = &quot;0&quot; + s;
    return s;
}


function toHex( x, digits ) {
    var n = parseInt( x.toString() );

    if ( digits == null )
        digits = 1;

    if ( isNaN( n ) )
        n = 0;

    return zpadl(n.toString( 16 ), 2 );
}


//-----------------------------------------------------------------------------
function IntRange( low, high, dflt ) {
    this.set( low, high, dflt );
}

IntRange.prototype.low      = 0;
IntRange.prototype.high     = 255;
IntRange.prototype.dflt     = 0;

IntRange.prototype.set = function( low, high, dflt ) {
    if ( low != null ) {
        this.low = parseInt( low );
        if ( isNaN( this.low ) )
            this.low = IntRange.prototype.low;
    }

    if ( high != null ) {
        this.high = parseInt( high );
        if ( isNaN( this.high ) )
            this.high = IntRange.prototype.high;
    }

    if ( dflt != null ) {
        this.dflt = parseInt( dflt );
        if ( isNaN( this.dflt ) )
            this.dflt = IntRange.prototype.dflt;
    }

    return this;
}

//  If n is a string that might not be base 10, provide a radix
IntRange.prototype.enforceOn = function( n, radix ) {
    n = parseInt( n, radix );

    if ( isNaN( n ) )
        return this.dflt;
    else if ( n &lt; this.low )
        return this.low;
    else if ( n &gt; this.high )
        return this.high;
    else
        return n;
}


//-----------------------------------------------------------------------------
//  Due to the weird JS object model, IntRange() exists before we define it. 
//  This is because it is declared, so it exists as soon as the file is parsed. 
//  Its member functions, however, aren not added until *execution* of the file 
//  gets to that point: They are assignments rather than declarations. If we do 
//  this before then, we get errors because the constructor calls 
//  IntRange.prototype.set, which remains undefined until we assign a function 
//  object to it. 
RGBRange    = new IntRange( 0, 255, 0 );    //  RGB values
HueRange    = new IntRange( 0, 419, 0 );    //  Hue
SatBriRange = new IntRange( 0, 100, 0 );    //  Saturation and brightness


//-----------------------------------------------------------------------------
function htmlColor( r, g, b ) {
    return &quot;#&quot; + toHex(r, 2 ) + toHex(g, 2 ) + toHex(b, 2 );
}

function namedColorValue( s ) {
    var s = NAMED[ s ];

    return ( ( &quot;&quot; + s ) == &quot;undefined&quot; ) ? &quot;#000000&quot; : s;
}


//-----------------------------------------------------------------------------
//  This one is the whole point.
//  Constructor:
//      Color( a, b, c )    //  If all arguments are null, default to 0, 0, 0;
//                          //  If b or c is null but a is not, call 
//                          //  this.fromString( a );
//                          //  Otherwise, call this.fromRGB( a, b, c ).
//
//  Members:
//      r, g, b             //  Red, green, and blue values.
//
//      fromString( s )     //  If the first character of s is &quot;#&quot;, s is 
//                          //  presumed to be an HTML hex color string. 
//                          //  Otherwise, it is presumed to be a named HTML 
//                          //  color.
//
//      toString()          //  return HTML hex color string: #RRGGBB
//      fromRGB( r, g, b )  //  Initialize from red, green, and blue values
//      fromHSB( h, s, b )  //  Initialize from hue, saturation, and brightness
//      toHSB()             //  return HSB object w/ h, s, and b members
//
//      getRGBSorted()      //  return an Object with min, max, and mid members.
//                          //  We use it internally.
//-----------------------------------------------------------------------------
function Color( a, b, c ) {
    if ( a != null ) {
        if ( b == null &amp;&amp; c == null ) {
            this.fromString( a );
        } else {
            this.fromRGB( a, b, c );
        }
    }
}

Color.prototype.r   = 0;
Color.prototype.g   = 0;
Color.prototype.b   = 0;

Color.prototype.fromRGB = function( r, g, b ) {
    this.r = RGBRange.enforceOn( r );
    this.g = RGBRange.enforceOn( g );
    this.b = RGBRange.enforceOn( b );

    return this;
}

Color.prototype.toString = function() {
    return htmlColor( this.r, this.g, this.b );
}

Color.prototype.fromString = function( s ) {
    s = (s + &quot;&quot;).toString();

    if ( s.substr( 0, 1 ) != &quot;#&quot; )
        s = namedColorValue( s );

    s = zpadl( s.replace( /^[^0-9a-f]/gi, &quot;&quot; ), 6 );

    var clrs = s.match( /([0-9a-f][0-9a-f])/gi );

    this.r = RGBRange.enforceOn( clrs[ 0 ], 16 );
    this.g = RGBRange.enforceOn( clrs[ 1 ], 16 );
    this.b = RGBRange.enforceOn( clrs[ 2 ], 16 );

    return this;
}

Color.prototype.fromHSB = function( hue, sat, bright ) {
    sat /= 100;
    bright /= 100;

    if ( sat == 0 ) {
        this.r = bright;
        this.g = bright;
        this.b = bright;

        return this;
    } else {
        hue = hue / 60;
        var i = Math.floor( hue );
        var f = hue - i;
        var p = bright * ( 1.0 - sat );
        var q = bright * ( 1.0 - sat * f );
        var t = bright * ( 1.0 - sat * ( 1.0 - f ) );

        bright *= 255;
        t *= 255;
        p *= 255;
        q *= 255;

        switch ( i ) {
            case 0:
                return this.fromRGB( bright, t, p );

            case 1:
                return this.fromRGB( q, bright, p );

            case 2:
                return this.fromRGB( p, bright, t );

            case 3:
                return this.fromRGB( p, q, bright );

            case 4:
                return this.fromRGB( t, p, bright );

            default:
                return this.fromRGB( bright, p, q );
        }
    }
}


Color.prototype.getRGBSorted = function() {
    var ary = new Array( this.r, this.b, this.g );

    //  Make sure we sort these as integers, not strings.
    //  According to Netscape JS documentation, the callback will not work with 
    //  some pre-v4 versions of Netscape on some platforms. Or something. Maybe 
    //  it was version 2. 
    ary.sort( function( a, b ) { return parseInt( a ) - parseInt( b ); } );

    /*
    var rtn = new Object();

    rtn.min = ary[ 0 ];
    rtn.mid = ary[ 1 ];
    rtn.max = ary[ 2 ];

    alert( rtn.toSource() );

    return rtn;
    */

    //  Object literal. Ph334r my 1337 skillz.
    return { min: ary[ 0 ], mid: ary[ 1 ], max: ary[ 2 ] };
}


Color.prototype.toHSB = function() {
    var domainBase      = 0;
    var domainOffset    = 0;

    var hsb = new HSB();
    var mmm = this.getRGBSorted();

    if ( mmm.max == 0 ) {
        hsb.b = 0;
        hsb.s = 0;
    } else {
        hsb.b = mmm.max / 255;
        hsb.s = ( hsb.b - ( mmm.min / 255.0 ) ) / hsb.b;
    }

    var oneSixth = 1.0 / 6.0;

    domainOffset = ( mmm.mid - mmm.min ) / ( mmm.max - mmm.min ) / 6.0;

    if ( mmm.max == mmm.min ) {
        hsb.h = 0;
    } else {
        if ( this.r == mmm.max ) {
            if ( mmm.mid == this.g ) {
                domainBase = 0 / 6.0;
            } else {
                domainBase = 5 / 6.0;
                domainOffset = oneSixth - domainOffset;
            }
        } else if ( this.g == mmm.max ) {
            if ( mmm.mid == this.b ) {
                domainBase = 2 / 6.0;
            } else {
                domainBase = 1 / 6.0;
                domainOffset = oneSixth - domainOffset;
            }
        } else {
            if ( mmm.mid == this.r ) {
                domainBase = 4 / 6.0;
            } else {
                domainBase = 3 / 6.0;
                domainOffset = oneSixth - domainOffset;
            }
        }

        hsb.h = domainBase + domainOffset;
    }

    hsb.h = Math.round( hsb.h * 360 );
    hsb.s = Math.round( hsb.s * 100 );
    hsb.b = Math.round( hsb.b * 100 );

    return hsb.integerize();
}


//-----------------------------------------------------------------------------
//  This HSB class is primitive. Think of it as a struct with functions rather
//  than a real class. It exists only so Color.toHSB() has a type to return.
//-----------------------------------------------------------------------------
function HSB( h, s, b ) {
    this.h = h || 0;
    this.s = s || 0;
    this.b = b || 0;
}

HSB.prototype.integerize = function() {
    this.h = parseInt( this.h );
    this.s = parseInt( this.s );
    this.b = parseInt( this.b );

    return this;
}

HSB.prototype.toString = function() {
    return this.toColor().toString();
}


HSB.prototype.toColor = function() {
    return new Color().fromHSB( this.h, this.s, this.b );
}


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function initNamedColors() {
    NAMED[ &quot;snow&quot; ]                 = &quot;#fffafa&quot;;
    NAMED[ &quot;ghostwhite&quot; ]           = &quot;#f8f8ff&quot;;
    NAMED[ &quot;whitesmoke&quot; ]           = &quot;#f5f5f5&quot;;
    NAMED[ &quot;gainsboro&quot; ]            = &quot;#dcdcdc&quot;;
    NAMED[ &quot;floralwhite&quot; ]          = &quot;#fffaf0&quot;;
    NAMED[ &quot;oldlace&quot; ]              = &quot;#fdf5e6&quot;;
    NAMED[ &quot;linen&quot; ]                = &quot;#faf0e6&quot;;
    NAMED[ &quot;antiquewhite&quot; ]         = &quot;#faebd7&quot;;
    NAMED[ &quot;papayawhip&quot; ]           = &quot;#ffefd5&quot;;
    NAMED[ &quot;blanchedalmond&quot; ]       = &quot;#ffebcd&quot;;
    NAMED[ &quot;bisque&quot; ]               = &quot;#ffe4c4&quot;;
    NAMED[ &quot;peachpuff&quot; ]            = &quot;#ffdab9&quot;;
    NAMED[ &quot;navajowhite&quot; ]          = &quot;#ffdead&quot;;
    NAMED[ &quot;moccasin&quot; ]             = &quot;#ffe4b5&quot;;
    NAMED[ &quot;cornsilk&quot; ]             = &quot;#fff8dc&quot;;
    NAMED[ &quot;ivory&quot; ]                = &quot;#fffff0&quot;;
    NAMED[ &quot;lemonchiffon&quot; ]         = &quot;#fffacd&quot;;
    NAMED[ &quot;seashell&quot; ]             = &quot;#fff5ee&quot;;
    NAMED[ &quot;honeydew&quot; ]             = &quot;#f0fff0&quot;;
    NAMED[ &quot;mintcream&quot; ]            = &quot;#f5fffa&quot;;
    NAMED[ &quot;azure&quot; ]                = &quot;#f0ffff&quot;;
    NAMED[ &quot;aliceblue&quot; ]            = &quot;#f0f8ff&quot;;
    NAMED[ &quot;lavender&quot; ]             = &quot;#e6e6fa&quot;;
    NAMED[ &quot;lavenderblush&quot; ]        = &quot;#fff0f5&quot;;
    NAMED[ &quot;mistyrose&quot; ]            = &quot;#ffe4e1&quot;;
    NAMED[ &quot;white&quot; ]                = &quot;#ffffff&quot;;
    NAMED[ &quot;black&quot; ]                = &quot;#000000&quot;;
    NAMED[ &quot;darkslategray&quot; ]        = &quot;#2f4f4f&quot;;
    NAMED[ &quot;dimgray&quot; ]              = &quot;#696969&quot;;
    NAMED[ &quot;slategray&quot; ]            = &quot;#708090&quot;;
    NAMED[ &quot;lightslategray&quot; ]       = &quot;#778899&quot;;
    NAMED[ &quot;gray&quot; ]                 = &quot;#bebebe&quot;;
    NAMED[ &quot;lightgray&quot; ]            = &quot;#d3d3d3&quot;;
    NAMED[ &quot;midnightblue&quot; ]         = &quot;#191970&quot;;
    NAMED[ &quot;cornflowerblue&quot; ]       = &quot;#6495ed&quot;;
    NAMED[ &quot;darkslateblue&quot; ]        = &quot;#483d8b&quot;;
    NAMED[ &quot;slateblue&quot; ]            = &quot;#6a5acd&quot;;
    NAMED[ &quot;mediumslateblue&quot; ]      = &quot;#7b68ee&quot;;
    NAMED[ &quot;mediumblue&quot; ]           = &quot;#0000cd&quot;;
    NAMED[ &quot;royalblue&quot; ]            = &quot;#4169e1&quot;;
    NAMED[ &quot;blue&quot; ]                 = &quot;#0000ff&quot;;
    NAMED[ &quot;dodgerblue&quot; ]           = &quot;#1e90ff&quot;;
    NAMED[ &quot;deepskyblue&quot; ]          = &quot;#00bfff&quot;;
    NAMED[ &quot;skyblue&quot; ]              = &quot;#87ceeb&quot;;
    NAMED[ &quot;lightskyblue&quot; ]         = &quot;#87cefa&quot;;
    NAMED[ &quot;steelblue&quot; ]            = &quot;#4682b4&quot;;
    NAMED[ &quot;lightsteelblue&quot; ]       = &quot;#b0c4de&quot;;
    NAMED[ &quot;lightblue&quot; ]            = &quot;#add8e6&quot;;
    NAMED[ &quot;powderblue&quot; ]           = &quot;#b0e0e6&quot;;
    NAMED[ &quot;paleturquoise&quot; ]        = &quot;#afeeee&quot;;
    NAMED[ &quot;darkturquoise&quot; ]        = &quot;#00ced1&quot;;
    NAMED[ &quot;mediumturquoise&quot; ]      = &quot;#48d1cc&quot;;
    NAMED[ &quot;turquoise&quot; ]            = &quot;#40e0d0&quot;;
    NAMED[ &quot;cyan&quot; ]                 = &quot;#00ffff&quot;;
    NAMED[ &quot;lightcyan&quot; ]            = &quot;#e0ffff&quot;;
    NAMED[ &quot;cadetblue&quot; ]            = &quot;#5f9ea0&quot;;
    NAMED[ &quot;mediumaquamarine&quot; ]     = &quot;#66cdaa&quot;;
    NAMED[ &quot;aquamarine&quot; ]           = &quot;#7fffd4&quot;;
    NAMED[ &quot;darkgreen&quot; ]            = &quot;#006400&quot;;
    NAMED[ &quot;darkolivegreen&quot; ]       = &quot;#556b2f&quot;;
    NAMED[ &quot;darkseagreen&quot; ]         = &quot;#8fbc8f&quot;;
    NAMED[ &quot;seagreen&quot; ]             = &quot;#2e8b57&quot;;
    NAMED[ &quot;mediumseagreen&quot; ]       = &quot;#3cb371&quot;;
    NAMED[ &quot;lightseagreen&quot; ]        = &quot;#20b2aa&quot;;
    NAMED[ &quot;palegreen&quot; ]            = &quot;#98fb98&quot;;
    NAMED[ &quot;springgreen&quot; ]          = &quot;#00ff7f&quot;;
    NAMED[ &quot;lawngreen&quot; ]            = &quot;#7cfc00&quot;;
    NAMED[ &quot;chartreuse&quot; ]           = &quot;#7fff00&quot;;
    NAMED[ &quot;greenyellow&quot; ]          = &quot;#adff2f&quot;;
    NAMED[ &quot;limegreen&quot; ]            = &quot;#32cd32&quot;;
    NAMED[ &quot;forestgreen&quot; ]          = &quot;#228b22&quot;;
    NAMED[ &quot;green&quot; ]                = &quot;#00ff00&quot;;
    NAMED[ &quot;olivedrab&quot; ]            = &quot;#6b8e23&quot;;
    NAMED[ &quot;yellowgreen&quot; ]          = &quot;#9acd32&quot;;
    NAMED[ &quot;darkkhaki&quot; ]            = &quot;#bdb76b&quot;;
    NAMED[ &quot;palegoldenrod&quot; ]        = &quot;#eee8aa&quot;;
    NAMED[ &quot;lightgoldenrodyellow&quot; ] = &quot;#fafad2&quot;;
    NAMED[ &quot;lightyellow&quot; ]          = &quot;#ffffe0&quot;;
    NAMED[ &quot;yellow&quot; ]               = &quot;#ffff00&quot;;
    NAMED[ &quot;gold&quot; ]                 = &quot;#ffd700&quot;;
    NAMED[ &quot;goldenrod&quot; ]            = &quot;#daa520&quot;;
    NAMED[ &quot;darkgoldenrod&quot; ]        = &quot;#b8860b&quot;;
    NAMED[ &quot;rosybrown&quot; ]            = &quot;#bc8f8f&quot;;
    NAMED[ &quot;indianred&quot; ]            = &quot;#cd5c5c&quot;;
    NAMED[ &quot;saddlebrown&quot; ]          = &quot;#8b4513&quot;;
    NAMED[ &quot;sienna&quot; ]               = &quot;#a0522d&quot;;
    NAMED[ &quot;peru&quot; ]                 = &quot;#cd853f&quot;;
    NAMED[ &quot;burlywood&quot; ]            = &quot;#deb887&quot;;
    NAMED[ &quot;beige&quot; ]                = &quot;#f5f5dc&quot;;
    NAMED[ &quot;wheat&quot; ]                = &quot;#f5deb3&quot;;
    NAMED[ &quot;sandybrown&quot; ]           = &quot;#f4a460&quot;;
    NAMED[ &quot;tan&quot; ]                  = &quot;#d2b48c&quot;;
    NAMED[ &quot;chocolate&quot; ]            = &quot;#d2691e&quot;;
    NAMED[ &quot;firebrick&quot; ]            = &quot;#b22222&quot;;
    NAMED[ &quot;brown&quot; ]                = &quot;#a52a2a&quot;;
    NAMED[ &quot;darksalmon&quot; ]           = &quot;#e9967a&quot;;
    NAMED[ &quot;salmon&quot; ]               = &quot;#fa8072&quot;;
    NAMED[ &quot;lightsalmon&quot; ]          = &quot;#ffa07a&quot;;
    NAMED[ &quot;orange&quot; ]               = &quot;#ffa500&quot;;
    NAMED[ &quot;darkorange&quot; ]           = &quot;#ff8c00&quot;;
    NAMED[ &quot;coral&quot; ]                = &quot;#ff7f50&quot;;
    NAMED[ &quot;lightcoral&quot; ]           = &quot;#f08080&quot;;
    NAMED[ &quot;tomato&quot; ]               = &quot;#ff6347&quot;;
    NAMED[ &quot;orangered&quot; ]            = &quot;#ff4500&quot;;
    NAMED[ &quot;red&quot; ]                  = &quot;#ff0000&quot;;
    NAMED[ &quot;hotpink&quot; ]              = &quot;#ff69b4&quot;;
    NAMED[ &quot;deeppink&quot; ]             = &quot;#ff1493&quot;;
    NAMED[ &quot;pink&quot; ]                 = &quot;#ffc0cb&quot;;
    NAMED[ &quot;lightpink&quot; ]            = &quot;#ffb6c1&quot;;
    NAMED[ &quot;palevioletred&quot; ]        = &quot;#db7093&quot;;
    NAMED[ &quot;maroon&quot; ]               = &quot;#b03060&quot;;
    NAMED[ &quot;mediumvioletred&quot; ]      = &quot;#c71585&quot;;
    NAMED[ &quot;magenta&quot; ]              = &quot;#ff00ff&quot;;
    NAMED[ &quot;violet&quot; ]               = &quot;#ee82ee&quot;;
    NAMED[ &quot;plum&quot; ]                 = &quot;#dda0dd&quot;;
    NAMED[ &quot;orchid&quot; ]               = &quot;#da70d6&quot;;
    NAMED[ &quot;mediumorchid&quot; ]         = &quot;#ba55d3&quot;;
    NAMED[ &quot;darkorchid&quot; ]           = &quot;#9932cc&quot;;
    NAMED[ &quot;darkviolet&quot; ]           = &quot;#9400d3&quot;;
    NAMED[ &quot;blueviolet&quot; ]           = &quot;#8a2be2&quot;;
    NAMED[ &quot;purple&quot; ]               = &quot;#a020f0&quot;;
    NAMED[ &quot;mediumpurple&quot; ]         = &quot;#9370db&quot;;
    NAMED[ &quot;thistle&quot; ]              = &quot;#d8bfd8&quot;;
    //  fake
    NAMED[ &quot;wharfkhaki&quot; ]           = &quot;#d5d1c1&quot;;
    NAMED[ &quot;wharfolive&quot; ]           = &quot;#6e6d56&quot;;
    NAMED[ &quot;jukkaback&quot; ]            = &quot;#ddddbb&quot;;
    NAMED[ &quot;jukkaodd&quot; ]             = &quot;#cccc99&quot;;
    NAMED[ &quot;jukkabrown&quot; ]           = &quot;#7e7e66&quot;;

    FAKE[ &quot;wharfkhaki&quot; ]        = true;
    FAKE[ &quot;wharfolive&quot; ]        = true;
    FAKE[ &quot;jukkaback&quot; ]         = true;
    FAKE[ &quot;jukkaodd&quot; ]          = true;
    FAKE[ &quot;jukkabrown&quot; ]        = true;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------</doctext>
  <node_id>2069767</node_id>
  <type_nodetype>1786405</type_nodetype>
  <title>colorclass.js</title>
</node>

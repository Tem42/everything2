<node>
  <type_nodetype>4</type_nodetype>
  <modperlsafe>1</modperlsafe>
  <node_id>1075515</node_id>
  <title>displayUserInfo</title>
  <code>if ($query-&gt;param('remfave')) {
	my $nid = $$NODE{node_id};
	my $fav = $$VARS{favorite_noders};
	$fav =~ s/$nid//;
	$fav =~ s/,,/,/g;
	$fav = substr($fav,1) if (substr($fav,0,1) eq ',');
	$fav = substr($fav,0,-1) if (substr($fav,length($fav)-1) eq ',');
	$$VARS{favorite_noders} = $fav;
	setVars($USER,$VARS);
}

if ($query-&gt;param('addfave')) {
	my $nid = $$NODE{node_id};
	next if $$VARS{favorite_noders} =~ /$nid/;
	$$VARS{favorite_noders} .= &quot;,$nid&quot;;
	setVars($USER,$VARS);
}



my @showThings = @_;
@showThings = (
	'msgalias',
	'createtime',
	'last',
	'nwriteups',
        'recentwriteups',
	'level',
        'gp',
	'coolsspent',
	'mission',
	'specialties',
	'employment',
	'motto',
	'groups',
	'lastnoded',
	'presents',
	'draftshare',
	'manip',
	'msgme',
	'msgyou',
) unless scalar(@showThings);

my @noHTMLSCREEN = ('nwriteups', 'coolsspent', 'level');

#only works when called from a user node
#FIXME? should we abort for locked users? maybe just certain things?
return unless ($$NODE{type_nodetype}==getId(getType('user')));


#constants
my $UID = getId($USER);
my $isGuest = $APP-&gt;isGuest($USER);
my $isRoot = $APP-&gt;isAdmin($USER);
my $isCE = $APP-&gt;isEditor($USER);
my $nid = getId($NODE);
my $isMe = (!$isGuest) &amp;&amp; ($nid==$UID);
my $SETTINGS = getVars $NODE;



#editor-only additional information
#TODO maybe also show user some of their own settings?
if($isCE) {
	push(@showThings, 'settingssome'); # if ($isMe || $isRoot);
}



#display
my $textPre = &quot;&quot;;
my $textMid = &quot;&quot;;
my $textPost = &quot;&quot;;
if ($$THEME{noTable}) {
	$textPre = '&lt;dt&gt;';
	$textMid = '&lt;/dt&gt;&lt;dd&gt;';
	$textPost = &quot;&lt;/dd&gt;\n&quot;;
} else {
	my $bgKey = undef;
	my $bgValue = undef;
	$bgKey = $$THEME{writeupTitleColor} if exists $$THEME{writeupTitleColor};
	$bgKey ||= '#999999';
	$textPre = '&lt;tr';
	$textPre .= ' bgcolor=&quot;'.$bgKey.'&quot;' if $bgKey;
	$textPre .= '&gt;&lt;td class=&quot;oddrow&quot; align=&quot;left&quot;&gt;';
	$textMid = '&lt;/td&gt;&lt;/tr&gt;&lt;tr';
	$textMid .= ' bgcolor=&quot;'.$bgValue.'&quot;' if $bgValue;
	$textMid .= '&gt;&lt;td align=&quot;right&quot;&gt;';
	$textPost = &quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;;
}

local *info_groups = sub {

	return htmlcode('showUserGroups','').(($APP-&gt;isEditor($USER) )?(&quot; - &quot;.linkNode(getNode(&quot;Editor Endorsements&quot;,&quot;superdoc&quot;),&quot;My Endorsements&quot;,{editor=&gt;$$NODE{node_id}})):(''));
#return &quot;&quot;;
};

local *info_recentwriteups = sub{
    return unless $$SETTINGS{showrecentwucount};
    my $recentwriteups = htmlcode('writeupssincelastyear',$nid);
    $recentwriteups = '&lt;em&gt;none!&lt;/em&gt;' unless $recentwriteups; 
    return $recentwriteups;
};

local *info_msgalias = sub {
	#jb says: same as in [usercheck]
	my $cf = getVars(getNode('chatterbox forward', 'setting'));
	my $retstr = '';
	return unless($$cf{lc($$NODE{title})});

	my $ptr = $$cf{lc($$NODE{title})};
	my $tousr = getNode($ptr, 'user');
	unless($tousr)
	{
		$ptr =~ s/_/ /g;
		$tousr = getNode($ptr, 'user');
	}
	return unless $tousr;
	return linkNode($tousr);

};

local *info_lastnoded = sub {
	return if $$VARS{hidelastnoded};
	my $n = $$NODE{title};
	return if ($n eq 'EDB') || ($n eq 'Klaproth') || ($n eq 'Cool Man Eddie') || ($n eq 'Webster 1913');

	my $lastnoded = getNodeById($$SETTINGS{lastnoded});
	return unless($lastnoded);
	my $parentnode = getNodeById($$lastnoded{parent_e2node});

	return linkNode($lastnoded, $$parentnode{title});

};

local *info_draftshare = sub {
	return if $isGuest;
	return linkNode(getNode('Drafts', 'superdoc'), 'Your drafts')
		if ($$USER{node_id} == $$NODE{node_id});
	return linkNode(getNode('Drafts', 'superdoc'), &quot;$$NODE{title}'s drafts&quot;,
		{other_user =&gt; $$NODE{title}});
};

local *info_manip = sub {
 	return unless $APP-&gt;isEditor($USER);
 	return htmlcode('editor homenode tools');
};

local *info_gp = sub {
        return if $isGuest;
        my $isRoot = $APP-&gt;isAdmin($USER);
        return unless($isMe or $isRoot);
        return if ((exists $$VARS{GPoptout})&amp;&amp;(defined $$VARS{GPoptout}));
        return $$NODE{GP};
};



#new style
local *info_msgme = sub {
	return if $isGuest;
	my $n = $NODE-&gt;{title};
	return if ($n eq 'EDB') || ($n eq 'Klaproth') || ($n eq 'Cool Man Eddie') || ($n eq 'Guest User');

	my $qp='msguser_'.$nid;
	my $t='';
	if(!$isMe &amp;&amp; $$VARS{borged}) {
		$t = '(you may not talk now)';
	} elsif($nid &amp;&amp; (defined $query-&gt;param($qp)) &amp;&amp; (length($query-&gt;param($qp))) ) {
		my $msg = $query-&gt;param($qp);
		my $ccMe = (defined $query-&gt;param('cc'.$qp)) &amp;&amp; ($query-&gt;param('cc'.$qp) eq '1') ? 1 : 0;

		my $failMessage = htmlcode('sendPrivateMessage',{
			'recipient_id'=&gt;$nid,
			'message'=&gt;$msg,
			'ccself'=&gt;$ccMe,
		});

		undef $failMessage unless (defined $failMessage) &amp;&amp; (length($failMessage));

		if(defined $failMessage) {
			$t = '&lt;strong&gt;Error&lt;/strong&gt;: unable to send message &quot;'.$msg.'&quot;: '.$failMessage;
		} else {
			$query-&gt;param($qp,'');	#clear text field
			$t = $msg;
      $t = escapeAngleBrackets($t);
			$t = parseLinks($t,0,1) unless $$VARS{showRawPrivateMsg};
			$t = '&lt;small&gt;You said &quot;&lt;/small&gt;'.$t.'&lt;small&gt;&quot; to '.linkNode($nid).'.&lt;/small&gt;';
		}
		$t .= &quot;&lt;br /&gt;\n&quot;;
	}

	return '&lt;small&gt;' . $t . htmlcode('openform') . $query-&gt;checkbox('cc'.$qp,'','1','CC ') . $query-&gt;textfield($qp,'',30,1234) . ' ' . $query-&gt;submit('message send', 'Send') . $query-&gt;end_form() . '&lt;/small&gt;';

};


#do NOT change this - this is the backup of the old-style
local *info_msgme_old = sub {
	return if $isGuest;
	my $n = $NODE-&gt;{title};
	return if ($n eq 'EDB') || ($n eq 'Klaproth') || ($n eq 'Cool Man Eddie') || ($n eq 'Guest User');

	my $s='msguser_'.$nid;
	my $t='';
	if(!$isMe &amp;&amp; $$VARS{borged}) {
		$t = '(you may not talk now)';
	} elsif($nid &amp;&amp; (defined $query-&gt;param($s)) &amp;&amp; (length($query-&gt;param($s))) ) {
		$t=$query-&gt;param($s);
		$DB-&gt;sqlInsert('message', {msgtext=&gt;$t, author_user=&gt;$UID, for_user=&gt;$nid});
		$t=parseLinks($t,0) unless $$VARS{showRawPrivateMsg};
		$t='&lt;small&gt;You said &quot;&lt;/small&gt;'.$t.'&lt;small&gt;&quot; to '.linkNode($nid).&quot;.&lt;/small&gt;&lt;br /&gt;&quot;;
	}

	return $t . htmlcode('openform') . '&lt;input type=&quot;text&quot; name=&quot;'.$s.'&quot; value=&quot;&quot; size=&quot;24&quot; maxlength=&quot;255&quot;&gt; ' . $query-&gt;submit('message send', 'blab') . $query-&gt;end_form();

};

local *info_msgyou = sub {
	return if $isGuest;
	#return if $$VARS{hidemsgyou};
	return unless my $nummsgs = $DB-&gt;sqlSelect('count(*)', 'message', &quot;for_user=$$USER{node_id} and author_user=$$NODE{node_id}&quot;);
	return linkNode(getNode('message inbox', 'superdoc'), &quot;$nummsgs messages&quot;,{ fromuser =&gt; $$NODE{title} });

};

local *info_last = sub {
        return if $isGuest;
        return if $$SETTINGS{hidelastseen};
	my $tmp = htmlcode('timesince',$$NODE{lasttime});
	$tmp = defined($tmp) ? (' ('.$tmp.')') : '';
	return htmlcode('parsetime','lasttime') . $tmp;
};

local *info_usersince = sub {

	my $tmp = htmlcode('timesince',$$NODE{createtime});
	$tmp = defined($tmp) ? (' ('.$tmp.')') : '';
	return htmlcode('parsetime','createtime') . $tmp;
};

local *info_presents = sub {
	return unless $isMe;
	#temporarily rescinding homenode specialty vars - ktj 4-11-07
	#return if $$VARS{hidevotedata};

	my $v = $$USER{votesleft} || 0;
	my $c = $$VARS{cools} || 0;

	my $lvl = $APP-&gt;getLevel($USER) || 0;
	my $tV = getVars(getNode('level votes', 'setting'))-&gt;{$lvl} || 0;
	$tV = 0 if $tV eq 'NONE';

	my $tC = getVars(getNode('level cools', 'setting'))-&gt;{$lvl} || 0;
	$tC = 0 if $tC eq 'NONE';

	return '&lt;strong&gt;'.$v.'&lt;/strong&gt;&lt;small&gt; / '.$tV.'&lt;/small&gt; votes &amp;nbsp; | &amp;nbsp; &lt;strong&gt;'.$c.'&lt;/strong&gt;&lt;small&gt; / '.$tC.'&lt;/small&gt; C!s';
};


local *info_settingssome = sub {
	return unless $isCE;
	my @disp = ();

	push(@disp, 'TinyMCE o' . ($SETTINGS-&gt;{settings_useTinyMCE} ? 'n' : 'ff') );	#maybe only show if enabled?

	return scalar(@disp) ? join('; ', @disp) : '';
};


local *infoDefault = sub {
	my $k = $_[0] || '';
	my $v = $$SETTINGS{$k} ? $$SETTINGS{$k} : $$NODE{$k};
	$v = htmlScreen($v) unless grep /$k/, @noHTMLSCREEN;
	return parseLinks($v);
};



#titles of info things to display
my %prettyTitles = (
	createtime=&gt;'user since',
	last=&gt;'last seen',
	nwriteups=&gt;'number of write-ups',
        recentwriteups=&gt;'number of write-ups within last year',
	level=&gt;'level / experience',
	mission=&gt;'mission drive within everything',
	specialties=&gt;'specialties',
        gp=&gt;'GP',
	employment=&gt;'school/company',
	motto=&gt;'motto',
	groups=&gt;'member of',
	lastnoded=&gt;'most recent writeup',
#	msgme=&gt;'/msg me',	#set for each user, below
	msgyou=&gt;'/msgs from me',
	draftshare=&gt;'works in progress',
	msgalias=&gt;'is a chatterbox forward for',
	manip=&gt;'manipulation',
	coolsspent=&gt;'C!s spent',
	presents=&gt;'your daily votes and C!s',
	settingssome=&gt;'some user settings',
);
if($isMe) {
	$prettyTitles{msgme} = '/msg yourself';
	$prettyTitles{msgyou} = 'talking to yourself';
} else {
	my $t=$$NODE{title};
	$t=~tr/ /_/;
	$prettyTitles{msgme} = 'Send private message to '.$t;
}

my %specialDisplays = (
	msgalias=&gt;\&amp;info_msgalias,
	last=&gt;\&amp;info_last,
	groups=&gt;\&amp;info_groups,
        recentwriteups=&gt;\&amp;info_recentwriteups,
#	msgme=&gt;,\&amp;info_msgme_old,	#old way that works
	msgme=&gt;,\&amp;info_msgme,	#new way, may be buggy
	msgyou=&gt;,\&amp;info_msgyou,
        gp=&gt;\&amp;info_gp,
	presents=&gt;\&amp;info_presents,
	lastnoded=&gt;\&amp;info_lastnoded,
	draftshare=&gt;\&amp;info_draftshare,
	manip=&gt;\&amp;info_manip,
	settingssome=&gt;\&amp;info_settingssome,
);
unless(($nid==220) ||($nid==322)) {	#hack around nate and hemos
	$specialDisplays{'createtime'} = \&amp;info_usersince;
}

#build result
my $str = '';
my $locker = getNodeById($$NODE{acctlock});
$str .= '&lt;big&gt;&lt;strong&gt;Account locked&lt;/strong&gt;&lt;/big&gt; by '.linkNode($locker).'&lt;br&gt;' if(($isCE || $isRoot) &amp;&amp; $$NODE{acctlock} != 0);
my $t = undef; #nice Title
my $s = undef; #which Sub to call
my $r = undef; #Result of sub call

if ($$THEME{noTable}) {
	$str .=  &quot;&lt;dl&gt;\n&quot;;	
}

foreach my $k (@showThings) {
	$t = $prettyTitles{$k} || $k;
	$s = $specialDisplays{$k} || \&amp;infoDefault; #TODO generate function by title name, if doesn't exist, do default stuff
	$r = &amp;$s($k);
	if($r) { $str .= $textPre . $t . $textMid . $r . $textPost; }
}
if ($$THEME{noTable}) {
	$str .=  &quot;&lt;/dl&gt;\n&quot;;	
}

$str;
</code>
</node>

<node>
  <type_nodetype>4</type_nodetype>
  <node_id>1468740</node_id>
  <title>mergeApprovedTags</title>
  <code>#merges multiple hash refs of allowed [HTML] tags into a new hash
#a hash containing valid tags has:
#	key (case sensitive) of the tag name
#	value (case ???) of allowed attributes (comma separated), or '1' for no allowed attributes
#most sites have at least [allowed HTML tags] (setting)
#input: list ref in $HTMLVARS{'allowedTagsListRef'}
#output: hash ref in $HTMLVARS{'allowedTags'};
#created: 2003.06.09.n1
#updated: 2003.06.13.n5
#author: Nathan Bronecke

return if !exists $HTMLVARS{'approvedTagsListRef'};
return if ref($HTMLVARS{'approvedTagsListRef'}) ne 'ARRAY';

my @tagsIn = @{$HTMLVARS{'approvedTagsListRef'}};
undef $HTMLVARS{'approvedTagsListRef'};


#make sure working with valid hashes
my @validRefs;
foreach(@tagsIn) {
	if(ref($_) eq 'HASH') {
		push(@validRefs, $_);
	}
}

my %merged;
my @work;
foreach my $h (@validRefs) {
	foreach my $k (keys(%$h)) {
		unless(exists $merged{$k}) {
			#brand new tag, add it unchanged (very common case)
			$merged{$k} = $h-&gt;{$k};
		} else {
			#tag already exists, so have to deal with attributes

			if($merged{$k} eq '1') {
				#current allowance is no attributes, so just set to new attributes
				$merged{$k} = $h-&gt;{$k};
			} elsif($h-&gt;{$k} ne '1') {
				#both current and new have attributes, so merge them

				#seen/grep part from Perl Cookbook (first edition, August 1998),
				#recipe 4.6, &quot;faster and even more different&quot;
				my %seen;
				$merged{k} = join(',',
					grep { ! $seen{$_} ++ }
					(split(',', $merged{$k}), split(',', $h-&gt;{$k}))
				);
			}
		}
	}
}	#foreach @validRefs

$HTMLVARS{'approvedTags'} = \%merged;

return;</code>
</node>

<node>
  <type_nodetype>4</type_nodetype>
  <node_id>2003576</node_id>
  <title>notificationsJSON</title>
  <code>my $limit = 10;
my $wrap = shift;

use JSON;
my $str;

my $safe_JSON_decode = sub {
  my $args = { };
  my $argJSON = shift;
  # Suppress failed conversion -- return empty hash instead
  local $SIG{__DIE__} = sub { };
  $args = JSON::from_json($argJSON);
  return $args;
};

# hide node notes from non-editors
my $isEditor = htmlcode('isEditor');

my $otherNotifications = &quot;0&quot;;

if ($$VARS{settings}) {

   my $notificationList = %{from_json($$VARS{settings})}-&gt;{notifications};
   my @notify = ( );

   for (keys %{$notificationList}) {
      next if !htmlcode('canseeNotification', $_);
      push @notify, $_;
   }

   $otherNotifications = join(&quot;,&quot;,@notify) if scalar @notify;

}

my $currentTime = time;
my $sqlString = &lt;&lt;ENDSQL;

SELECT notified.notification_id, notified.args, notified.notified_id
  , UNIX_TIMESTAMP(notified.notified_time) 'notified_time'
  , (hourLimit * 3600 - $currentTime + UNIX_TIMESTAMP(notified.notified_time)) AS timeLimit
  FROM notified
  INNER JOIN notification
    ON notification.notification_id = notified.notification_id
  LEFT OUTER JOIN notified AS reference
    ON reference.user_id = $$USER{user_id} 
    AND reference.reference_notified_id = notified.notified_id
    AND reference.is_seen = 1
  WHERE
    (
     notified.user_id = $$USER{user_id}
     AND notified.is_seen = 0
    )
    OR 
    (
     notified.user_id IN ($otherNotifications)
     AND reference.is_seen IS NULL
    )
  HAVING (timeLimit &gt; 0)
  ORDER BY notified_id DESC
  LIMIT $limit

ENDSQL

my $dbh = $DB-&gt;getDatabaseHandle();
my $db_notifieds = $dbh-&gt;selectall_arrayref($sqlString, {Slice =&gt; {}} );
my $notification_list = { };
my $notify_count = 1;

foreach my $notify (@$db_notifieds) {

        my $notification = getNodeById($$notify{notification_id});
        my $displayCode = $notification-&gt;{code};
        my $invalidCheckCode = $notification-&gt;{invalid_check};
        my $argJSON = $$notify{args};
        $argJSON =~ s/'/\'/g;
        my $args = &amp;$safe_JSON_decode($argJSON);
        my $evalNotify = sub {
            my $notifyCode = shift;
            my $wrappedNotifyCode = &quot;sub { my \$args = shift; 0; $notifyCode
              };&quot;;
            my $wrappedSub = evalCode($wrappedNotifyCode);
            return &amp;$wrappedSub($args);
        };

        # Don't return an invalid notification and remove it from the notified table
        if ($invalidCheckCode ne '' &amp;&amp; &amp;$evalNotify($invalidCheckCode)) {
           $DB-&gt;sqlDelete('notified', 'notified_id = ' . int($$notify{notified_id}));
           next;
        }

		my ($pre, $post);
		if ($wrap){
			my $liId = &quot;notified_$$notify{notified_id}&quot;;
			$pre = qq'&lt;li class=&quot;timestamp_$$notify{notified_time}&quot; id=&quot;$liId&quot;&gt;';
			$pre .= qq'&lt;a class=&quot;dismiss $liId&quot; title=&quot;dismiss notification&quot; href=&quot;javascript:;&quot;&gt;&amp;#91;x]&lt;/a&gt; ';
			$post = &quot;&lt;/li&gt;\n&quot;;
		}

        $$notification_list{$notify_count}
			= {
				id =&gt; $$notify{notified_id},
				value =&gt; $pre.parseLinks(&amp;$evalNotify($displayCode)).$post,
				timestamp =&gt; $$notify{notified_time},
			};
        $notify_count++;
}

return $notification_list;
</code>
</node>

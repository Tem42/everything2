<node>
  <type_nodetype>4</type_nodetype>
  <node_id>1838064</node_id>
  <title>getOnThisDay</title>
  <code>###########################################################################
#
#  Most of this is just the code from various CPAN modules that we don't have installed.
#
###########################################################################
package XML::Parser::Lite;

use strict;
use vars qw($VERSION);
#$VERSION = sprintf(&quot;%d.%s&quot;, map {s/_//g; $_} q$Name:  $ =~ /-(\d+)_([\d_]+)/);
$VERSION = '0.65_3';

sub XML::Parser::Lite::new { 
  my $self = shift;
  my $class = ref($self) || $self;
  return $self if ref $self;

  $self = bless {} =&gt; $class;
  my %parameters = @_;
  $self-&gt;setHandlers(); # clear first 
  $self-&gt;setHandlers(%{$parameters{Handlers} || {}});
  return $self;
}

sub XML::Parser::Lite::setHandlers {
  my $self = shift; 
  no strict 'refs'; local $^W;
  # clear all handlers if called without parameters
  unless (@_) { foreach (qw(Start End Char Final Init)) { *$_ = sub {} } }
  while (@_) { my($name =&gt; $func) = splice(@_, 0, 2); *$name = defined $func ? $func : sub {} }
  return $self;
}

sub XML::Parser::Lite::regexp {
  my $patch = shift || '';
  my $package = __PACKAGE__;

  # This parser is based on &quot;shallow parser&quot; http://www.cs.sfu.ca/~cameron/REX.html 

  # Robert D. Cameron &quot;REX: XML Shallow Parsing with Regular Expressions&quot;,
  # Technical Report TR 1998-17, School of Computing Science, Simon Fraser University, November, 1998.
  # Copyright (c) 1998, Robert D. Cameron. 
  # The following code may be freely used and distributed provided that
  # this copyright and citation notice remains intact and that modifications
  # or additions are clearly identified.

  my $TextSE = &quot;[^&lt;]+&quot;;
  my $UntilHyphen = &quot;[^-]*-&quot;;
  my $Until2Hyphens = &quot;$UntilHyphen(?:[^-]$UntilHyphen)*-&quot;;
  my $CommentCE = &quot;$Until2Hyphens&gt;?&quot;;
  my $UntilRSBs = &quot;[^\\]]*](?:[^\\]]+])*]+&quot;;
  my $CDATA_CE = &quot;$UntilRSBs(?:[^\\]&gt;]$UntilRSBs)*&gt;&quot;;
  my $S = &quot;[ \\n\\t\\r]+&quot;;
  my $NameStrt = &quot;[A-Za-z_:]|[^\\x00-\\x7F]&quot;;
  my $NameChar = &quot;[A-Za-z0-9_:.-]|[^\\x00-\\x7F]&quot;;
  my $Name = &quot;(?:$NameStrt)(?:$NameChar)*&quot;;
  my $QuoteSE = &quot;\&quot;[^\&quot;]*\&quot;|'[^']*'&quot;;
  my $DT_IdentSE = &quot;$S$Name(?:$S(?:$Name|$QuoteSE))*&quot;;
  my $MarkupDeclCE = &quot;(?:[^\\]\&quot;'&gt;&lt;]+|$QuoteSE)*&gt;&quot;;
  my $S1 = &quot;[\\n\\r\\t ]&quot;;
  my $UntilQMs = &quot;[^?]*\\?+&quot;;
  my $PI_Tail = &quot;\\?&gt;|$S1$UntilQMs(?:[^&gt;?]$UntilQMs)*&gt;&quot;;
  my $DT_ItemSE = &quot;&lt;(?:!(?:--$Until2Hyphens&gt;|[^-]$MarkupDeclCE)|\\?$Name(?:$PI_Tail))|%$Name;|$S&quot;;
  my $DocTypeCE = &quot;$DT_IdentSE(?:$S)?(?:\\[(?:$DT_ItemSE)*](?:$S)?)?&gt;?&quot;;
  my $DeclCE = &quot;--(?:$CommentCE)?|\\[CDATA\\[(?:$CDATA_CE)?|DOCTYPE(?:$DocTypeCE)?&quot;;
  my $PI_CE = &quot;$Name(?:$PI_Tail)?&quot;;

  # these expressions were modified for backtracking and events
  my $EndTagCE = &quot;($Name)(?{${package}::end(\$2)})(?:$S)?&gt;&quot;;
  my $AttValSE = &quot;\&quot;([^&lt;\&quot;]*)\&quot;|'([^&lt;']*)'&quot;;
  my $ElemTagCE = &quot;($Name)(?:$S($Name)(?:$S)?=(?:$S)?(?:$AttValSE)(?{[\@{\$^R||[]},\$4=&gt;defined\$5?\$5:\$6]}))*(?:$S)?(/)?&gt;(?{${package}::start(\$3,\@{\$^R||[]})})(?{\${7} and ${package}::end(\$3)})&quot;;
  my $MarkupSPE = &quot;&lt;(?:!(?:$DeclCE)?|\\?(?:$PI_CE)?|/(?:$EndTagCE)?|(?:$ElemTagCE)?)&quot;;

  # Next expression is under &quot;black magic&quot;.
  # Ideally it should be '($TextSE)(?{${package}::char(\$1)})|$MarkupSPE',
  # but it doesn't work under Perl 5.005 and only magic with
  # (?:....)?? solved the problem. 
  # I would appreciate if someone let me know what is the right thing to do 
  # and what's the reason for all this magic. 
  # Seems like a problem related to (?:....)? rather than to ?{} feature.
  # Tests are in t/31-xmlparserlite.t if you decide to play with it.
  &quot;(?:($TextSE)(?{${package}::char(\$1)}))$patch|$MarkupSPE&quot;;
}

sub XML::Parser::Lite::compile { local $^W; 
  # try regexp as it should be, apply patch if doesn't work
  foreach (regexp(), regexp('??')) {
    eval qq{sub parse_re { use re &quot;eval&quot;; 1 while \$_[0] =~ m{$_}go }; 1} or die;
    last if eval { parse_re('&lt;foo&gt;bar&lt;/foo&gt;'); 1 }
  };

  *compile = sub {};
}

setHandlers();
compile();

sub XML::Parser::Lite::parse { 
  init(); 
  parse_re($_[1]);
  final(); 
}

my(@stack, $level);

sub XML::Parser::Lite::init { 
  @stack = (); $level = 0;
  Init(__PACKAGE__, @_);  
}

sub XML::Parser::Lite::final { 
  die &quot;not properly closed tag '$stack[-1]'\n&quot; if @stack;
  die &quot;no element found\n&quot; unless $level;
  Final(__PACKAGE__, @_) 
} 

sub XML::Parser::Lite::start { 
  die &quot;multiple roots, wrong element '$_[0]'\n&quot; if $level++ &amp;&amp; !@stack;
  push(@stack, $_[0]);
  Start(__PACKAGE__, @_); 
}

sub XML::Parser::Lite::char { 
  Char(__PACKAGE__, $_[0]), return if @stack;

  # check for junk before or after element
  # can't use split or regexp due to limitations in ?{} implementation, 
  # will iterate with loop, but we'll do it no more than two times, so
  # it shouldn't affect performance
  for (my $i=0; $i &lt; length $_[0]; $i++) {
    die &quot;junk '$_[0]' @{[$level ? 'after' : 'before']} XML element\n&quot;
      if index(&quot;\n\r\t &quot;, substr($_[0],$i,1)) &lt; 0; # or should '&lt; $[' be there
  }
}

sub XML::Parser::Lite::end { 
  pop(@stack) eq $_[0] or die &quot;mismatched tag '$_[0]'\n&quot;;
  End(__PACKAGE__, $_[0]);
}

package XML::RSS::Parser::Lite::Item;

use strict;

our $VERSION = '0.10';

sub XML::RSS::Parser::Lite::Item::new {
	my $class = shift;

	my $self = {
		'title', '',
		'url', '',
		'description', '',
		@_,
	};
	
	bless($self, $class);
	return $self;
}


sub XML::RSS::Parser::Lite::Item::set {
	my $self = shift;

	my %defs = (@_);
	foreach my $k (keys %defs) {
		$self-&gt;{$k} = $defs{$k};
	}
}

sub XML::RSS::Parser::Lite::Item::get {
	my $self = shift;
	
	my $want = shift;
	return $self-&gt;{$want};
}


package XML::RSS::Parser::Lite;

use strict;

our $VERSION = '0.10';

sub XML::RSS::Parser::Lite::new { 
	my $class = shift;

	my $parser = new XML::Parser::Lite;
	my $self = {
		parser		=&gt; $parser,
		place		=&gt; '',
		title		=&gt; '',
		url		=&gt; '',
		description	=&gt; '',
		items		=&gt; [],
		latest		=&gt; new XML::RSS::Parser::Lite::Item,
	};

	$self-&gt;{parser}-&gt;setHandlers(
		Final	=&gt; sub { shift; $self-&gt;final(@_) },
		Start	=&gt; sub { shift; $self-&gt;start(@_) },
		End	=&gt; sub { shift; $self-&gt;end(@_) },
		Char	=&gt; sub { shift; $self-&gt;char(@_) },
	);

	bless($self, $class);
	return $self;
}

sub XML::RSS::Parser::Lite::parse {
	my $self = shift;
	my $xml = shift;
	
	$self-&gt;{parser}-&gt;parse($xml);
}


sub XML::RSS::Parser::Lite::final { 
	my $self = shift; 

	$self-&gt;{parser}-&gt;setHandlers(Final =&gt; undef, Start =&gt; undef, End =&gt; undef, Char =&gt; undef);
}

sub XML::RSS::Parser::Lite::start {
	my $self = shift;
	my $tag = shift;
	
	$self-&gt;{place} .= &quot;/$tag&quot;;
	$self-&gt;{latest} = $self-&gt;add if ($self-&gt;{place} eq '/rss/channel/item');
}

sub XML::RSS::Parser::Lite::char {
	my $self = shift;
	my $text = shift;
	
	$self-&gt;{latest}-&gt;set('title', $text) if ($self-&gt;{place} eq '/rss/channel/item/title');
	$self-&gt;{latest}-&gt;set('url', $text) if ($self-&gt;{place} eq '/rss/channel/item/link');
	$self-&gt;{latest}-&gt;set('description', $text) if ($self-&gt;{place} eq '/rss/channel/item/description');
	
	$self-&gt;{title} = $text if ($self-&gt;{place} eq '/rss/channel/title');
	$self-&gt;{url} = $text if ($self-&gt;{place} eq '/rss/channel/link');
	$self-&gt;{description} = $text if ($self-&gt;{place} eq '/rss/channel/description');
}

sub XML::RSS::Parser::Lite::end { 
	my $self = shift; 
	my $tag = shift;
	
	my $place = $self-&gt;{place};
	$place = substr($place, 0, length($place)-length($tag)-1); # regex here causes segmentation fault!
	$self-&gt;{place} = $place;
}



sub XML::RSS::Parser::Lite::add {
	my ($self) = shift;
	
	my $it = new XML::RSS::Parser::Lite::Item(@_);
	push(@{$self-&gt;{items}}, $it);

	return $it;
}


sub XML::RSS::Parser::Lite::count {
	my $self = shift;
	return scalar @{$self-&gt;{items}};
}


sub XML::RSS::Parser::Lite::get {
	my $self = shift;
	
	my $what = shift;
	if ($what =~ /^\d*$/) {
		return @{$self-&gt;{items}}[$what];
	}
	
	return $self-&gt;{$what};
}

require LWP::Simple;
        my $xml =  LWP::Simple::get(&quot;http://news.bbc.co.uk/rss/on_this_day/front_page/rss.xml&quot;);
        my $rp = new XML::RSS::Parser::Lite;
        $rp-&gt;parse($xml);
        
        my $str;

        for (my $i = 0; $i &lt; $rp-&gt;count(); $i++) {
                my $it = $rp-&gt;get($i);
                $str .= &quot;&lt;p&gt;&lt;b&gt;&quot; . $it-&gt;get('title') . &quot;&lt;/b&gt;&lt;br&gt;&quot; . $it-&gt;get('description') . &quot;&lt;/p&gt;\n&quot;;
        }
$str;</code>
</node>

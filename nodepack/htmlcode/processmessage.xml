<node>
  <type_nodetype>4</type_nodetype>
  <node_id>972298</node_id>
  <title>processMessage</title>
  <code>[%
#[message] (opcode) gets uglier and uglier as more chatter commands are added
#to help simplify things, this assumes that the command and parameters are already split on a space, and takes the appropriate action
#shoot, probably a problem with commas

my (@parts) = @_;
my $n = scalar(@parts);

return if $$VARS{borgd} || ($$USER{title} eq 'everyone') || ($$HTMLVARS{guest_user}==$$USER{node_id}) || !$n;

#set up defaults
my $m = @parts[0];
my $author = $$USER{node_id};
my $foruser = 0;
my $whichroom = $$USER{in_room};

if($m !~ /^\//) {
$m = join(' ', @parts);
$m = htmlScreen($m);
} else {

$m = substring($m,1); #remove that /

if($m eq 'say') {
shift @parts;
$m = join(' ', @parts);
$m = s/^ *//; #remove previous spaces
} elsif($m eq 'invite') {
  my $r;
  if($whichroom) {
    $r = getNodeById($whichroom);
    $r = $r ? 'in ['.$$r{title}.']' : 'somewhere';
  } else {
    $r = 'outside';
  }
htmlcode('processMessage', ('/msg', @parts, $r));
return;
} elsif(($m eq 'msg') or ($m eq 'tell')) {
} elsif($m eq 'borg') {
} elsif($m eq 'edb') {
} elsif($m eq 'chatteroff') {
} elsif($m eq 'chatteron') {
}

}

return $DB-&gt;sqlInsert('message', {msgtext=&gt;$m, author_user=&gt;$author, for_user=&gt;$foruser, room=&gt;$whichroom}) if $m;
}
return 0;

???? I don't want this run yet, so this line will cause a server error....
%]</code>
</node>

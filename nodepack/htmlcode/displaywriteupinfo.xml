<node>
  <type_nodetype>4</type_nodetype>
  <node_id>1163496</node_id>
  <title>displayWriteupInfo</title>
  <code>#customized display of writeup information
#pass (optional) writeup ID, (optional) things to show

#
# setup
#

#parameters
my ($WRITEUP) = @_;
$WRITEUP ||= $NODE;
return 'Ack! displayWriteupInfo: Can\'t get writeup '.$WRITEUP unless getRef $WRITEUP;

my $nID = getId($NODE);
my $wuID = getId $WRITEUP;

use Everything::Experience;

#constants
my $UID = getId($USER)||$HTMLVARS{'guest_user'};
my $isGuest = ($UID==$HTMLVARS{'guest_user'});
my $isRoot = !$isGuest &amp;&amp; exists $HTMLVARS{group_gods}{$UID};
my $isCE = !$isGuest &amp;&amp; ($isRoot || exists $HTMLVARS{'group_content editors'}{$UID});
my $aid = $$WRITEUP{author_user} || 0;
my $wuAuthor = getNodeById($aid) || undef;
my $isMine = (!$isGuest) &amp;&amp; ($aid==$UID);
my $isDraft = ($$WRITEUP{type}{title} eq 'draft');
my $authorIsBot = (defined $wuAuthor) &amp;&amp; (($wuAuthor-&gt;{title} eq 'Webster 1913'));	#FIXME: get (cached) bot setting
my $inPrintMode = $query-&gt;param('displaytype') eq 'printable';	#FIXME - is that the best way to see if printable?	#if displaytype=printable - when printing, we don't want things like, for example, voting buttons
my $v=getVars($wuAuthor);

#client-side error
local *userWarn = sub {
	return '&lt;small title=&quot;displayWriteupInfo (htmlcode)&quot;&gt;!!! ' . $_[0] . ' !!!&lt;/small&gt;';
};


#parameters again

my $inHeader;	#true=before WU text, false=after WU text (note: we use a slightly bad way of determining if we're in the header or footer)
my $fnName;	#name of current function
#lookup table of user-entered function to actual function to run
#	by default, function return values are cached
#	a function may override the default caching by setting $infofunctions-&gt;{$fnName} to the string that should be used for future calls instead
my $infofunctions;
my $CACHE_NAME = 'cache_displayWriteupInfo_'.$wuID;
if( (exists $HTMLVARS{$CACHE_NAME}) &amp;&amp; (defined $HTMLVARS{$CACHE_NAME}) ) {
	$inHeader=0;
	$infofunctions = $HTMLVARS{$CACHE_NAME};

} else {
	$inHeader=1;
	$infofunctions = {
		'type'=&gt;\&amp;info_wutype,
		'kill'=&gt;\&amp;info_kill,
		'draftstatus'=&gt;\&amp;draftstatus,
		'vote'=&gt;\&amp;info_vote,
		'cfull'=&gt;\&amp;info_c_full,
		'cshort'=&gt;\&amp;info_c_short,
		'dtcreate'=&gt;\&amp;info_dt_create,
		'author'=&gt;\&amp;info_author,
		'authoranon'=&gt;\&amp;info_author_anon,
		'print'=&gt;\&amp;info_print,
		'pseudoanon'=&gt;\&amp;info_author_pseudo,
		'typeauthorprint'=&gt;\&amp;info_typeauthor,
		'notnew'=&gt;\&amp;info_hidden,	#original name
		'hidden'=&gt;\&amp;info_hidden,	#name that makes more sense
		'length'=&gt;\&amp;info_length,
		'sendmsg'=&gt;\&amp;sendMessage,
		'social'=&gt;\&amp;showBookmarks,
		'hits'=&gt;\&amp;info_hits,
		'addto'=&gt;\&amp;info_addto,
		'cats'=&gt;\&amp;info_cats,
		'audio'=&gt;\&amp;audio,
		'music'=&gt;\&amp;music,
		'nothing'=&gt;\&amp;info_nothing,
	};
	$HTMLVARS{$CACHE_NAME} = $infofunctions;
}



#determine things to display
my @showThings;
if($inPrintMode) {
	#override user setting and show all information when printing
	if($inHeader) {
		@showThings = ('l:typeauthorprint','c:kill','c:vote','r:dtcreate','\n','l:cfull','c:hidden','r:length');
	} else {
		@showThings = ();
	}
} else {
	#use user vars, if set, or default
	if($inHeader) {
		#header
		if ($$VARS{wuhead}){
			@showThings = split(/\s*,\s*/, $$VARS{wuhead});
		} else {
			#no settings given, so use default header, which is mostly &quot;classic&quot;
			@showThings = ('c:type','c:author','c:hits', 'r:dtcreate');
		}
	} else {
		#footer

		if ($$VARS{wufoot}){
			@showThings = split(/\s*,\s*/, $$VARS{wufoot});
		} else {
			@showThings = ('l:kill','c:vote');
			push @showThings,('c:cfull') unless (exists $$VARS{wuhead} &amp;&amp; ($$VARS{wuhead}=~'cfull'||$$VARS{wuhead}=~'cshort'));
			push @showThings,('c:sendmsg','c:addto','r:social');
		}
	}
}
{
	#my $max = 16; #don't let user go nuts
	my $max = 50;	#don't let the user go too nuts (we cache now, so repeating something several times doesn't really matter)
	@showThings = @showThings[0..$max-1] if scalar(@showThings)&gt;$max;
}

my $t;	#temporary values that subs can use

#display constants
my %tDataOpen = (
	'l'=&gt;'&lt;td style=&quot;text-align:left&quot; class=&quot;',
	'c'=&gt;'&lt;td class=&quot;',
	'r'=&gt;'&lt;td  style=&quot;text-align:right&quot; class=&quot;',
);
my $tDataClose = '&lt;/td&gt;';
my $tRowOpen = '&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;&lt;tr class=&quot;';
my $tRowClose = &quot;&lt;/tr&gt;&lt;/table&gt;\n&quot;;

# subs
#

#links to the current WU, showing the given text
#does NOT create softlink, since they are useless between e2node and writeup
local *linkWU = sub {
	my ($txt) = @_;
	$txt = $WRITEUP-&gt;{title} || '???' unless (defined $txt) &amp;&amp; length($txt);
	return linkNode($WRITEUP,$txt);
};

#ripped from displayUserInfo
local *info_authorsince = sub {

	#not if bot, or printable, or $VARS
	return if $authorIsBot;
	return if $inPrintMode;
	return if $$VARS{info_authorsince_off};
	return if $$v{hidelastseen} &amp;&amp; !$isCE;
	return unless $wuAuthor;
	return &quot; &quot; if $isGuest;
	my $lastTime = $$wuAuthor{lasttime};
	my $lastTimeTitle = htmlcode('timesince', $lastTime, &quot;noHTML&quot;);
	my $lastTimeText = htmlcode('timesince', $lastTime, &quot;short&quot;);
	return ''
		. qq[&lt;small title=&quot;Author last logged in $lastTimeTitle&quot;&gt;]
		. &quot;($lastTimeText)&quot;
		. &quot;&lt;/small&gt;&quot;
		;

};

local *info_wutype = sub {
	return linkWU('&lt;b&gt;Draft&lt;/b&gt;') if $isDraft;
	$t = $$WRITEUP{wrtype_writeuptype} || 0;
	return userWarn(linkWU('bad WU type: 0')) unless $t;
	getRef $t;
	return userWarn(linkWU('bad WU type: '.$$t{node_id})) unless $t;
	return userWarn(linkWU('0 length WU type title: '.$$t{node_id})) unless length($$t{title});
	return '&lt;span class=&quot;type&quot;&gt;('.linkWU($$t{title}).')&lt;/span&gt;';
};

local *info_kill = sub {
	$infofunctions-&gt;{$fnName} = '';
	return htmlcode(&quot;$$WRITEUP{type}{title}tools&quot;, $wuID)
		if $isCE or $isMine or $isDraft;
};

local *info_vote = sub {
	return htmlcode('ilikeit',$wuID) if $$USER{user_id} == $HTMLVARS{guest_user};
	$t = htmlcode('voteit',$wuID,2);
	return '' unless $t;
	$infofunctions-&gt;{$fnName} = '';
	return '&lt;small&gt;'.$t.'&lt;/small&gt;';
};

local *info_c_full = sub {
	unless ( $$USER{node_id}!=$HTMLVARS{guest_user} ||
			$query-&gt;param('showwidget') eq 'showCs'.$$WRITEUP{node_id} ){
		return '' unless $$WRITEUP{cooled} ;
		return linkNode($NODE,
			$$WRITEUP{cooled}.' &lt;b&gt;C!&lt;/b&gt;'.( $$WRITEUP{cooled}==1 ? '' : 's' ),
			{ showwidget=&gt;'showCs'.$$WRITEUP{node_id}, lastnode_id =&gt; 0 ,
			-title =&gt; $$WRITEUP{cooled}.' users found this writeup COOL' ,
			-class =&gt; &quot;action ajax cools$wuID:writeupcools:$wuID&quot; ,
			-id =&gt; &quot;cools$wuID&quot; } );
	}
	return htmlcode('writeupcools',$wuID);
};

local *info_c_short = sub {
	$$VARS{wuhead} =~ s/cshort/cfull/;
	$$VARS{wufoot} =~ s/cshort/cfull/;
	return info_c_full();
};

local *info_dt_create = sub {
	return '&lt;small class=&quot;date&quot;&gt;'.htmlcode('parsetimestamp', $$WRITEUP{publishtime} || $$WRITEUP{createtime}).'&lt;/small&gt;';
};

local *info_author = sub {
	my $anon = 'anonymous' unless !$$VARS{anonymousvote} || $isMine || $authorIsBot || hasVoted($WRITEUP, $USER) || $isDraft;
	if ($$VARS{anonymousvote} == 1 &amp;&amp; $anon){
		return '(anonymous)' . ($isCE?' '.info_authorsince():'');
	}
	if(defined $wuAuthor) {
		my $authorLink = linkNode( $wuAuthor , $anon , { lastnode_id =&gt; 0 , -class =&gt; 'author' } ) ;
		$authorLink = '&lt;s&gt;'.$authorLink.'&lt;/s&gt;' if $isCE &amp;&amp; !$authorIsBot &amp;&amp; (exists $wuAuthor-&gt;{acctlock}) &amp;&amp; ($wuAuthor-&gt;{acctlock});
		return 'by &lt;a name=&quot;'.$wuAuthor-&gt;{title}.'&quot;&gt;&lt;/a&gt;&lt;strong&gt;' . $authorLink . '&lt;/strong&gt; ' . ( !$anon ? info_authorsince():'');
	} else {
		return '&lt;em&gt;unable to find author '.$aid.'&lt;/em&gt;';
	}
};
# FIXME: direct links to writeups won't work if author is anonymous
local *info_author_anon = sub {
	$$VARS{anonymousvote} = '1';
	$$VARS{wuhead} =~ s/authoranon/author/;
	$$VARS{wufoot} =~ s/authoranon/author/;
	return &amp;info_author();
};

local *info_author_pseudo = sub {
	$$VARS{anonymousvote} = '2';
	$$VARS{wuhead} =~ s/pseudoanon/author/;
	$$VARS{wufoot} =~ s/pseudoanon/author/;
	return &amp;info_author() ;
};

local *info_print = sub {
	return if $inPrintMode;
	return '('.linkNode($WRITEUP, 'print', {displaytype=&gt;'printable',lastnode_id=&gt;0}).')';
};

local *info_typeauthor = sub {
	return &amp;info_wutype() . ' ' . &amp;info_author() . ' ' . &amp;info_print();
};

local *info_hidden = sub {
	return unless $isCE || $isMine;
	my $disp = '&lt;small&gt;(' . ($$WRITEUP{notnew} ? 'hidden' : 'public') . ')&lt;/small&gt;';
	$infofunctions-&gt;{'notnew'} = $infofunctions-&gt;{'hidden'} = $disp;
	return $disp;
};

local *info_length = sub {
	#most of these counts are rough,
	#and can be fooled rather easily;
	#however, it isn't worth taking
	#the CPU time to find exact values

	my $wdt = breakTags($$WRITEUP{doctext}) || '';
	my $c;	#count

	#paragraphs - could be off by one if &lt;p&gt; incorrectly used to end a paragraph instead of to start one
	$c=0;
	while($wdt =~ /&lt;[Pp][&gt;\s]/g) {	#weak paragraph count
		++$c;
	}
	$c=1 if !$c;
	$t = $c.' &lt;abbr title=&quot;approximate paragraphs&quot;&gt;' . ($VARS-&gt;{noCharEntities} ? 'p' : '&amp;para;') . '&lt;/abbr&gt;, ';

	#if we want to burn CPU, we could count sections - p, blockquote, ul, ol, hr, anything else - as separators

	#now only deal with plain text
	$wdt =~ s/\&lt;.+?\&gt;//gs;

	#sentences
	$c = ($wdt =~ tr/.!?//);
	$t .= $c.' &lt;abbr title=&quot;approximate sentences&quot;&gt;s&lt;/abbr&gt;, ' if $c;

	#words
	$c=0;
	while($wdt =~ /\w+/g) {
		++$c;
	}
	$t .= $c.' &lt;abbr title=&quot;approximate words&quot;&gt;w&lt;/abbr&gt;, ' if $c;
#	$t .= (($wdt =~ s/\W+/ /gs)||0).' w, ';

	$t .= length($$WRITEUP{doctext}) . ' &lt;abbr title=&quot;characters&quot;&gt;c&lt;/abbr&gt;';

	return $t;
};


local *info_hits = sub {
	my $hitStr; # This is a kludgy way to do this, but it seems efficient - Oo.
	(my $y,my $m,my $d) = split /-/, $$WRITEUP{createtime};
	my $dateval = $d+31*$m+365*$y; 
	if ($dateval &gt; 733253 ) { $hitStr='publication'; }
	else { $hitStr='23rd October 2008'; }
        #my $hitshits=$DB-&gt;sqlSelect(&quot;hits&quot;,&quot;node&quot;,&quot;node_id=$wuID&quot;); # $$WRITEUP{hits} ?
	#return qq'&lt;span title=&quot;hits since $hitStr according to the node table&quot;&gt;Hits: $$WRITEUP{hits}&lt;/span&gt;';
        return &quot;&quot;
};


local *info_nothing = sub {
	return;
};

local *info_addto = sub {
	return '' if $query -&gt; param( 'showwidget' ) eq 'addto'.$$WRITEUP{ node_id } ; #noscript: widget is in page header
	my $str;
	unless ($isDraft){
		$str = htmlcode('categoryform', $WRITEUP, 'writeupform');
		$str .= htmlcode('weblogform', $WRITEUP, 'writeupform') if $$VARS{can_weblog};
	}
	if ($str){
		my $author = getNodeById( $$WRITEUP{ author_user } ) ;
		$author = $author -&gt; { title } if $author ;
		$author =~ s/[\W]/ /g ;
		$query -&gt; param( 'showwidget' , 'addto'.$$WRITEUP{ node_id } ) if
				$query -&gt; param( 'op' ) eq 'weblog' &amp;&amp; $query -&gt; param( 'target' ) == $$WRITEUP{ node_id } or
				$query -&gt; param( 'op' ) eq 'category' &amp;&amp; $query -&gt; param( 'nid' ) == $$WRITEUP{ node_id } ;
		$str = htmlcode( 'widget' , '
			&lt;small&gt;'.htmlcode( 'bookmarkit' , $WRITEUP , &quot;Add $author&quot;.&quot;'s writeup to your E2 bookmarks&quot; ).'&lt;/small&gt;
			&lt;hr&gt;
			'.$str , 'span' , 'Add to&amp;hellip;' ,
			{ showwidget =&gt; 'addto'.$$WRITEUP{ node_id } ,
			'-title' =&gt; &quot;Add $author&quot;.&quot;'s writeup to your bookmarks, a category or a usergroup page&quot; ,
			'-closetitle' =&gt; 'hide addto options' ,
			node =&gt; $WRITEUP , addto =&gt; 'noscript' } ) ;
	} else {
		$str = '&lt;small&gt;'.htmlcode( 'bookmarkit' , $WRITEUP , 'bookmark' ).'&lt;/small&gt;' ;
	}
	return &quot;&lt;span class=\&quot;addto\&quot;&gt;\n$str\n&lt;/span&gt;&quot;
};

local *info_cats = sub {
	return htmlcode('listnodecategories', $$WRITEUP{ node_id });
};

local *music = sub {
	return ''
		. '&lt;button title=&quot;Add additional World Cup content&quot;'
		. ' onClick=&quot;flatify(this);return false;&quot;&gt;'
		. '&lt;img src=&quot;http://static.everything2.com/futbol.png&quot;&gt;'
		. '&lt;/button&gt;'
		;
};

local *audio = sub {
	my $audioStr;
	my $recording=$DB-&gt;sqlSelectHashref(&quot;*&quot;, &quot;recording&quot;, &quot;recording_of=$wuID&quot;);
	if (exists ($$recording{link})) {
		$audioStr=&quot;&lt;a href='&quot;.$$recording{link}.&quot;'&gt;mp3&lt;/a&gt;&quot;;
	}
	else {
		my $GROUP = getNode('podpeople','usergroup');
		my $id = getId($USER);
		if (grep /^$id$/, @{ $$GROUP{group} }) {
		    $audioStr.='&lt;a href=' . urlGen({
			node =&gt; $WRITEUP-&gt;{title}.' mp3',
			type =&gt; 'recording',
			op =&gt; 'new',
			displaytype =&gt; 'edit',
			'recording_recording_of' =&gt; $wuID,
			'recording_read_by' =&gt; $$USER{user_id},
		    }) .'&gt;Add mp3&lt;/a&gt;';
		}
	}
	return $audioStr;

};

local *showBookmarks = sub {
	return '' if $$v{nosocialbookmarking} || $$VARS{nosocialbookmarking};
	return htmlcode('socialBookmarks',$wuID);
};


#TODO? checkbox to have anonymous? maybe just for certain people?
my $msgreport ;
local *sendMessage = sub {
	$infofunctions-&gt;{$fnName} = '';
	return if $isGuest;
	my $queryid = 'msg_re'.$$WRITEUP{node_id} ;
	$msgreport = qq'&lt;a id=&quot;sent$queryid&quot;&gt;&lt;/a&gt;' ;
	if( $$WRITEUP{author_user}!=$$USER{user_id} &amp;&amp; $$VARS{borged} ) {
		return '(you may not talk now)' ;
	} elsif( $query-&gt;param( $queryid ) ) {
		$msgreport = htmlcode('writeupmessage', $queryid, $WRITEUP) ;
	}
	my $nN = $query-&gt;checkbox(-name=&gt;'nn'.$queryid, value=&gt;$$WRITEUP{node_id}, label=&gt;'NN ',
			title=&gt;'check to record this message as a node note')
		if $isCE;
	return $nN
		.$query-&gt;checkbox( -name=&gt;'cc'.$queryid, value=&gt;'1', label=&gt;'CC ',
			title=&gt;'check to send a copy of this message to yourself' )
		. $query-&gt;textfield( -name =&gt; $queryid, size =&gt; 20 , maxlength =&gt; 1500 , 	#1530=255*6
			class =&gt; 'expandable ajax '.
			&quot;sent$queryid:writeupmessage?$queryid=/&amp;cc$queryid=/&amp;nn$queryid=/:$queryid,$$WRITEUP{node_id}&quot; ,
			title =&gt; &quot;send a comment to the $$WRITEUP{type}{title}'s author&quot; ) ;
};

#
# main
#

#build result
my $str = '';

my $s; #which Sub to call
my $r; #Result of sub call
my $align; #alignment
my $curRow = '';
my $anyGoodCells = 0;
#TODO allow multiple things in a table cell
foreach my $k (@showThings) {

	$fnName = $k;
	$align = $tDataOpen{l}.&quot;wu_$fnName\&quot;&gt;&quot;;
	if($fnName eq '\n') { #literal characters '\' and 'n', not newline
		if($anyGoodCells) {
			$str .= $tRowOpen;
			$str .= ($inHeader?'wu_header&quot;':'wu_footer&quot;').&quot;&gt;&quot;;
			$str .= $curRow . $tRowClose;
		}
		$curRow = '';
		$anyGoodCells = 0;
		next;

	} elsif($fnName =~ /^(.):(.+)$/) {
		#calling a function
		$fnName = $2;
		$align = ($tDataOpen{$1}.&quot;wu_$fnName\&quot;&gt;&quot;) || $align;
	}

	next if length($fnName)==0 or
		$fnName eq 'kill' &amp;&amp; !$isDraft &amp;&amp; !$isMine &amp;&amp; !$isCE or
		$isDraft &amp;&amp; $fnName !~ /^(?:type|author|dtcreate|kill|length|sendmsg|addto|nothing|draftstatus)$/;

	unless( (exists $infofunctions-&gt;{$fnName}) &amp;&amp; (defined $infofunctions-&gt;{$fnName}) ) {
		$curRow .= $align.'&lt;small&gt;(unknown value: &quot;'.encodeHTML($fnName).'&quot;; see '.linkNodeTitle('Writeup Settings').')&lt;/small&gt;'.$tDataClose unless $s;
		next;
	}

	$s = $infofunctions-&gt;{$fnName};
	if( (ref $s) eq 'CODE' ) {
		#compute result
#$query-&gt;param('debug'.$wuID.$fnName.($inHeader?'head':'foot').int(rand(99)), 'uncached');
		$r = &amp;$s();
		$r = '' if !defined $r;
		if( (defined $infofunctions-&gt;{$fnName}) &amp;&amp; (ref $infofunctions-&gt;{$fnName}) eq 'CODE' ) {
			if( !exists $infofunctions-&gt;{'!'.$fnName}) {	#2007-12-05 for kthejoker
				#the function is letting us handle caching
				$infofunctions-&gt;{$fnName} = $r;
			}
		}

	} else {
#$query-&gt;param('debug'.$wuID.$fnName.($inHeader?'head':'foot').int(rand(99)), 'cached');
		#use cached result
		$r = $s;

	}

	$curRow .= $align . $r . $tDataClose.&quot;\n&quot;;
	if ($r) { $anyGoodCells = 1; }

}
if ($anyGoodCells) {
	$str .= $tRowOpen . ($inHeader?'wu_header&quot;':'wu_footer&quot;').&quot;&gt;&quot;. $curRow . $tRowClose;
}

$str .= $msgreport ;

unless ($inHeader) {
	#not showing anything about this writeup anymore, so delete cache
	delete $HTMLVARS{$CACHE_NAME};
}

$str;</code>
</node>

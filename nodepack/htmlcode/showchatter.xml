<node>
  <type_nodetype>4</type_nodetype>
  <delegated>1</delegated>
  <node_id>973519</node_id>
  <title>showchatter</title>
  <code>my $json = {};
my $jsoncount = 1 if shift;
my $nochat = &quot;&quot;;

$nochat = 'If you '.linkNode(getNode('Create A New User','superdoc'),
	'register',{lastnode_id=&gt;0}).', you can talk here.'
		if $APP-&gt;isGuest($USER);

### Check to see if they're suspended for having an unverified email address

my $sushash = $DB-&gt;sqlSelectHashref(&quot;suspension_sustype&quot;, &quot;suspension&quot;,
	&quot;suspension_user=$$USER{node_id} and suspension_sustype='1948205'&quot;) unless $nochat;

$nochat = &quot;&lt;strong&gt;You need to &quot;.linkNode(getNode('verify your email account','superdoc')).
	&quot; before you can talk in public here.&lt;/strong&gt;&quot; if $sushash &amp;&amp; $$sushash{suspension_sustype};


if(!$nochat &amp;&amp; $$VARS{publicchatteroff}){
	if($query-&gt;param('RemoveEarPlugs') eq '1') {
		delete $$VARS{publicchatteroff};
	} else {
		$nochat = '&lt;em&gt;your earplugs are in ('.linkNode($NODE,'remove them',{'RemoveEarPlugs'=&gt;1,
			-class =&gt; &quot;ajax chatterbox:updateNodelet:Chatterbox&quot;}).')&lt;/em&gt;';
	}
}

if ($nochat){
	$nochat = qq'&lt;p id=&quot;chat_nochat&quot;&gt;$nochat&lt;/p&gt;';
	return $nochat unless $jsoncount;
	return { '1' =&gt; {value =&gt; $nochat, id =&gt; 'nochat'} };
}

my $useBorgSpeak = 0;
my $messagesToShow = 25;
my $messageInterval = 360; #in seconds, how long room messages remain

my $ignorelist = $DB-&gt;sqlSelectMany('ignore_node', 'messageignore', 'messageignore_id='.$$USER{user_id});
my @list = ();
while (my ($u) = $ignorelist-&gt;fetchrow) { push @list, $u; }
my $ignoreStr = join(&quot;, &quot;,@list);

my $wherestr = &quot;for_user=0 &quot; ;
$wherestr .= &quot;and tstamp &gt;= date_sub(now(), interval $messageInterval second)&quot;
	unless $Everything::CONF-&gt;{environment} ne &quot;production&quot; &amp;&amp; !$$USER{in_room};
$wherestr .= ' and room='.$$USER{in_room} unless ($$VARS{omniphonic});
$wherestr .= &quot; and author_user not in ($ignoreStr)&quot; if $ignoreStr;

my $csr = $DB-&gt;sqlSelectMany('*', 'message use index(foruser_tstamp) ',
	$wherestr, &quot;order by tstamp desc limit $messagesToShow&quot;);

if($csr-&gt;rows == 0) {
	my $borgspeak = '&lt;div id=&quot;chat_borgspeak&quot;&gt;'.htmlcode('borgspeak',$useBorgSpeak).'&lt;/div&gt;';
	return $borgspeak unless $jsoncount;
	return { '1' =&gt; {value =&gt; $borgspeak, id =&gt; 'borgspeak'} };
}

my $valid = getVars(getNode('egg commands','setting'));
my $UID = getId($USER) || 0;
my $isEDev = $APP-&gt;isDeveloper($USER, &quot;nogods&quot;);

my ($str, $aid, $flags, $userLink, $userLinkApostrophe, $text) = (undef,undef,undef,undef,undef,undef);

my $maxLen = htmlcode('chatterSplit');

my %fireballs = ( fireball =&gt; 'BURSTS INTO FLAMES!!!' ,
	conflagrate =&gt; 'CONFLAGRATES!!!' ,
	immolate =&gt; 'IMMOLATES!!!' ,
	singe =&gt; 'is slightly singed. *cough*' ,
	explode =&gt; 'EXPLODES INTO PYROTECHNICS!!!' ,
	limn =&gt; 'IS LIMNED IN FLAMES!!!' ) ;

my $sc = sub{
	qq'&lt;span style=&quot;font-variant:small-caps&quot;&gt;$_[0]&lt;/span&gt;' ;
} ;

my @msgs = reverse @{ $csr-&gt;fetchall_arrayref( {} ) };

foreach my $MSG (@msgs){
	my $usermessage = undef;
	$aid = $$MSG{author_user} || 0;

	if($$MSG{room} != $$USER{in_room}) {
		if($$MSG{room}) {
			my $R = getNodeById($$MSG{room});
			$str.='('.linkNode($R, $$R{abreviation}).')';
		} else {
			$str.='(out)';
		}
	}

	$text = $$MSG{msgtext};
utf8::decode($text);

	$text = escapeAngleBrackets($text);

	#Close dangling square brackets
 	my $numopenbrackets = ($text =~ tr:\[::);
 	my $numclosebrackets = ($text =~ tr:\]::);
 	while($numclosebrackets &lt; $numopenbrackets){
		$text .= &quot;]&quot;;
 	 	$numclosebrackets++;
 	}

	$text = parseLinks($text,0,1);

	my $userTitle = getNodeById($aid, 'light')-&gt;{'title'};
	$userTitle =~ s/ /_/g; # replace spaces with underscores in username
	$userLink = &quot;&lt;span class='chat_user chat_$userTitle'&gt;&quot;
		. linkNode($aid) . &quot;&lt;/span&gt;&quot;;
	$userLinkApostrophe = &quot;&lt;span class='chat_user chat_$userTitle'&gt;&quot;
		. linkNode($aid, getNode($aid)-&gt;{title} . &quot;'s&quot;) . &quot;&lt;/span&gt;&quot;;

	if (htmlcode('isSpecialDate','halloween')) {
		my $aUser = getNodeById($aid, 'light');
		my $costume = getVars($aUser)-&gt;{costume} if (getVars($aUser)-&gt;{costume});
		if ($costume gt '') {
			my $halloweenStr = $$aUser{title}.&quot;|&quot;.encodeHTML($costume);
			$userLink = linkNodeTitle($halloweenStr);
		}
	}

	if($$VARS{powersChatter}) {
		my $isChanop = $APP-&gt;isChanop($aid, &quot;nogods&quot;);

		$flags = '';
		if($APP-&gt;isAdmin($aid) &amp;&amp; !$APP-&gt;getParameter($aid,&quot;hide_chatterbox_staff_symbol&quot;) ) {
			$flags .= '@';
		} elsif($APP-&gt;isEditor($aid, &quot;nogods&quot;) &amp;&amp; !$APP-&gt;getParameter($aid,&quot;hide_chatterbox_staff_symbol&quot;)) {
			$flags .= '$';
		}

		$flags .= &quot;+&quot; if $isChanop;
		$flags .= '%' if $isEDev;
		if(length($flags)) {
			$flags = '&lt;small&gt;'.$flags.'&lt;/small&gt; ';
		}
	}

	if ( $text =~ /^\/me(\b)(.*)/i ) {
		$usermessage = '&lt;i&gt;' . $userLink . $1 . $2 . '&lt;/i&gt;';
		# What do you mean, \me's code is broken? -- eien_meru
	}
	elsif ( $text =~ /^\/me\'s\s(.*)/i ) { #Attempt to match this one before matching the AFD2007 commands.
		$usermessage = '&lt;i&gt;' . $userLinkApostrophe . ' ' . $1 . '&lt;/i&gt;';
	}
	elsif ( $text =~ /^\/sings?\b\s?(.*)/i ) { 
		my @notesarray = (&quot;&amp;#9835;&quot;, &quot;&amp;#9834;&quot;, &quot;&amp;#9835;&amp;#9834;&quot;, &quot;&amp;#9834;&amp;#9835;&quot;);
		$usermessage = &quot;&amp;lt;$userLink&amp;gt; &lt;i&gt; $notesarray[int(rand(4))] $1 $notesarray[int(rand(4))]&lt;/i&gt;&quot;;
	}
	##any other names by which you should whisper?
	elsif ($text =~ /(^\/whisper)(.*)/i){ 
 	    $usermessage = '&lt;small&gt;&amp;lt;' . $userLink .'&amp;gt; ' . $2 . '&lt;/small&gt;'
	}
	elsif ($text =~ /(^\/death)(.*)/i){ 
 	    $usermessage = '&amp;lt;' . $userLink .'&amp;gt; ' . &amp;$sc($2);
 	}

### dice rolling
 	elsif ( $text =~ /^\/rolls(.*)/i ) {
		if ($text =~ /^\/rolls 1d2 &amp;rarr; 1/i) { 
			$usermessage = &amp;$sc( $userLink . ' flips a coin &amp;rarr; heads' );
		}
		elsif ($text =~ /^\/rolls 1d2 &amp;rarr; 2/i) {
			$usermessage = &amp;$sc( $userLink . ' flips a coin &amp;rarr; tails');
		}
	 	else { 
			$usermessage = &amp;$sc( $userLink . ' rolls ' . $1 );
		}
  	}

### fireball messages
 	elsif ( $text =~ /^\/(fireball|conflagrate|immolate|singe|explode|limn)s?\s(.*)/i ) {
 		$usermessage = &amp;$sc( $userLink . ' fireballs ' . $2 ).'...&lt;br&gt;&lt;i&gt;' . linkNodeTitle($2) . &quot; $fireballs{$1}&lt;/i&gt;&quot;;
	}

### Sanctify command

 	elsif ( $text =~ /^\/sanctify?\s(.*)/i ) {
 		$usermessage = &amp;$sc( $userLink . ' raises the hand of benediction...').'&lt;br&gt;&lt;i&gt;' . linkNodeTitle ($1) . ' has been SANCTIFIED!&lt;/i&gt;';
	}

### normal egg message

	elsif ( $text =~ /^\/(\S*)\s+(.*)/ &amp;&amp; $$valid{lc($1)}) { #Case insensitive match
			my $target = $2;
			(my $eggStr = $$valid{$1}) =~ s/( ~|$)/ $target/;
			$usermessage = &amp;$sc( $userLink . ' ' . $eggStr ).'!';
		}

	$usermessage ||= '&amp;lt;' . $userLink . '&amp;gt; ' . $text;
	$usermessage = qq'&lt;div class=&quot;chat&quot; id=&quot;chat_$$MSG{message_id}&quot;&gt;$flags$usermessage&lt;/div&gt;';
	unless ($jsoncount){
		$str.=&quot;$usermessage\n&quot;;
	}else{
		$$json{$jsoncount} = {
			value =&gt; $usermessage,
			id =&gt; $$MSG{message_id}
		};
	$jsoncount++;
	}
}

return $str unless $jsoncount;
return $json;</code>
</node>

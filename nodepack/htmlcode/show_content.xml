<node>
  <type_nodetype>4</type_nodetype>
  <modperlsafe>1</modperlsafe>
  <node_id>1995923</node_id>
  <title>show content</title>
  <code># generic content/contentinfo display
# arguments:
# 0. single hashref or node id, arrayref of node ids or hashrefs, sql cursor for node(s) to show
# 1. string containing comma-separated list of instructions:
#	(optional) 'xml' to specify xml output and/or
#	(optional) html tag, used for wrapping each node (attributes optional, quotes=&quot;double&quot;)
#		- default is &lt;div&gt;
#		- may include class attribute (which is added to default class(es))
#		- class tokens starting with &amp; are interpreted as function names and executed on the node
#		- no default classes for xml, otherwise:
#		- default class is 'item' if content is included, otherwise 'contentinfo'
#			- div class 'contentinfo' also wraps headers/footers before and after content,
#			  with class 'contentheader' or 'contentfooter' as appropriate
#
#	and then/or:
#	list of fields to display, which can be:
#		* a function name, either a built-in mark-up function or an additional one passed in the next argument
#		* &quot;text&quot;
#		* a hash key to a value to be marked up as
#			- &lt;span class=&quot;[key]&gt;&quot;&gt;value&lt;/span&gt; (not xml) or
#			- &lt;[key]&gt;encodeHTML(value)&lt;/[key&gt; (xml)
#		* 'content' to show the doctext
#		* 'unfiltered' to show the doctext without screening the html
#		* a number n, to display the first n bytes of the doctext
#	Multiple content/unfiltered/numbers can be specified one after the other, separated by '-':
#	they will be used in turn for successive items. The last one is used for any remaining items.
# 	If content is truncated and not xml a link is provided to the node in a div class=&quot;morelink&quot;
#	If xml is specified content is encoded and wrapped as &lt;content type=&quot;html&quot;&gt;
# 2. (optional) additional markup functions
#	If one of these has the key 'cansee' it will be used to check whether to show an item:
#	return '1' for yes.
#
# doctext is parseCoded if a node type is present and (inherits from) superdoc
# tables in doctext are screened for logged-in users

my $showanyway = 96 ; # how many bytes not to bother chopping off shortened content
my ( $input , $instructions , %infofunctions ) = @_ ;

# pack/unpack input

my @input = ( $input ) ;
if ( ref $input eq 'ARRAY' ) {
	@input = @$input ;
} elsif ( ref( $input ) =~ /DBI/ ) {
	@input = @{ $input-&gt;fetchall_arrayref( {} ) } ;
}
return '' unless getRef( @input );

# define standard info functions

my $getAuthor = sub{
	$_[0]-&gt;{author} ||= getNodeById($_[0] -&gt; {author_user}, 'light') || {};
} ;

my $author = $infofunctions{author} ||= sub {
	linkNode( &amp;$getAuthor , '' , {-class =&gt; 'author'}) ;
} ;

$infofunctions{ byline } ||= sub {
	'&lt;cite&gt;by '.&amp;$author.'&lt;/cite&gt;' ;
} ;

my $title = $infofunctions{ title } ||= sub {
	linkNode($_[0] , '' , {-class =&gt; 'title'}) ;
} ;

$infofunctions{ parenttitle } ||= sub {
	my $parent = getNodeById($_[0]{parent_e2node},'light');
	return '&lt;span class=&quot;title noparent&quot;&gt;(No parent node) '.&amp;$title.'&lt;/span&gt;' unless $parent ;
	my $author = &amp;$getAuthor;
	return linkNode($parent, '', {
		-class =&gt; 'title'
		, '#' =&gt; $$author{title}
		, author_id =&gt; $$author{node_id}
	});
} ;

$infofunctions{ type } ||= sub {
	my $type = $_[0]{type_title} || getNodeById($_[0]{wrtype_writeuptype}) || $_[0]{type};
	$type = $type -&gt; {title} if(UNIVERSAL::isa($type,&quot;HASH&quot;));
	if ($type eq 'draft'){
		my $status = getNodeById($_[0]{publication_status});
		$type = ($status ? $$status{title} : '(bad status)').' draft';
	}
	return '&lt;span class=&quot;type&quot;&gt;('
		.linkNode($_[0]{node_id}||$_[0]{writeup_id}, $type || '!bad type!')
		.')&lt;/span&gt;';
} ;

my $date = $infofunctions{date} ||= sub {
	return '&lt;span class=&quot;date&quot;&gt;'
		.htmlcode('parsetimestamp', $_[0]{publishtime} || $_[0]{createtime},
			256 + $_[1]) # 256 suppresses the seconds
		.'&lt;/span&gt;' ;
};

$infofunctions{listdate} ||= sub{
	&amp;$date($_[0], 4 + 512); # 4 suppresses day name, 512 adds leading zero to hours
};

my $oddrow = '';
$infofunctions{oddrow} ||= sub{
	$oddrow = $oddrow ? '' : 'oddrow';
};

# decode instructions

my $xml = '1' if $instructions =~ s/^xml\b\s*// ;

my ($wrapTag, $wrapClass, $wrapAtts) = split(/\s+class=&quot;([^&quot;]+)&quot;/, $1)
	if $instructions =~ s/^\s*&lt;([^&gt;]+)&gt;\s*//;
$wrapAtts .= $1 if $wrapTag =~ s/(\s+.*)//;

$instructions =~ s/\s*,\s*/,/g ;
$instructions =~ s/(^|,),+/$1/g ; # remove spare commas

my @sections = split( /,?((?:(?:content|[\d]+|unfiltered)-?)+),?/ , $instructions ) ;
my $content = $sections[1] ;

$wrapTag ||= 'div';
$wrapClass .= ' ' if $wrapClass;
$wrapClass .= $content ? 'item' : 'contentinfo';

my @infowrap = ('&lt;div class=&quot;contentinfo contentheader&quot;&gt;', '', '&lt;div class=&quot;contentinfo contentfooter&quot;&gt;')
	if $content &amp;&amp; !$xml;

# define content function

if ( $content ) {
	my $lastnodeid = undef;
	if ( !$APP-&gt;isGuest($USER) ) {
		$lastnodeid = $$NODE{ parent_e2node } if $$NODE{ type }{ title } eq 'writeup' ;
		$lastnodeid = $$NODE{ node_id } if $$NODE{ type }{ title } eq 'e2node' ;
	}

	my $HTML = getVars( getNode( 'approved HTML tags' , 'setting' ) ) ;
	my @content = split /-/, $content;
	my $i = 0;

	$infofunctions{$content} = sub {
		my $N = shift ;
		my $length = undef; $length = $content[$i] if $content[$i] =~ /\d/ ;
		$$HTML{ noscreening } = ($content[$i] eq 'unfiltered');
		$i-- unless $content[++$i];

		my $text = $N-&gt;{ doctext } ;
		$text = parseCode( $text ) if exists( $$N{ type } ) and
			( $$N{ type_nodetype } eq 14 or $$N{ type }{ extends_nodetype } eq 14 ) ;
		$text = breakTags( $text ) ;

		my ( $dots , $morelink ) = ( '' , '' ) ;
		if ( $length &amp;&amp; length( $text ) &gt; $length + $showanyway ) {
			$text = substr( $text , 0 , $length );
			$text =~ s/\[[^\]]*$// ; # broken links
			$text =~ s/\s+\w*$// ; # broken words
			$dots = '&amp;hellip;' ; # don't add here in case we still have a broken tag at the end
			$morelink = &quot;\n&lt;div class='morelink'&gt;(&quot;
				. linkNode($$N{node_id} || $$N{writeup_id}, 'more')
				. &quot;)\n&lt;/div&gt;&quot;;
		}

		$text = screenTable( $text ) if $lastnodeid ; # i.e. if writeup page &amp; logged in
		$text = parseLinks( cleanupHTML( $text , $HTML ) , $lastnodeid ) ;
		return &quot;\n&lt;div class=\&quot;content\&quot;&gt;\n$text$dots\n&lt;/div&gt;$morelink&quot; unless $xml ;

		$text =~ s/&lt;a .*?(href=&quot;.*?&quot;).*?&gt;/&lt;a $1&gt;/sg ; # kill onmouseup etc
		return '&lt;content type=&quot;html&quot;&gt;'.encodeHTML( $text.$dots ).'&lt;/content&gt;' ;
    };
}

# do it

my $str = '';
foreach my $N ( @input ) {
	next if $infofunctions{cansee} and $infofunctions{cansee}($N) != 1;

	my $class = qq' class=&quot;$wrapClass&quot;' unless $xml;
	while ($class =~ m/\&amp;(\w+)/) {
		my $intendedName = $1 ;
		my $intendedFunc = $infofunctions{ $intendedName } ;
		if ( $intendedFunc ) {
			$class =~ s/\&amp;$intendedName/&amp;$intendedFunc( $N )/e ;
		} else {
			$class =~ s/\&amp;$intendedName/-Bad-info-function-'$intendedName'-/ ;
		}
	}

	$str .= qq'&lt;$wrapTag$class$wrapAtts&gt;';
	my $count = 0;

	foreach ( @sections ) {
		$str .= $infowrap[$count];
		my @chunks = split( /,+/ , $_ ) ;

		foreach ( @chunks ) {
			if ( exists( $infofunctions{ $_ } ) ) {
				$str .= $infofunctions{ $_ }( $N ) ;
			} elsif (/^&quot;([^&quot;]*)&quot;$/){
				$str .= $1;
			} elsif ( $xml ) {
				$str .= &quot;&lt;$_&gt;&quot;.encodeHTML( $$N{ $_ } ).&quot;&lt;/$_&gt;&quot; ;
   			} else {
				$str .= &quot;&lt;span class=\&quot;$_\&quot;&gt;&quot;.$$N{ $_ }.'&lt;/span&gt;' ;
		 	}
		 	$str .= &quot;\n&quot; ;
		}
		$str .= '&lt;/div&gt;' if $infowrap[$count++];
	}
	$str .= &quot;&lt;/$wrapTag&gt;&quot;;
}

return $str ;</code>
</node>

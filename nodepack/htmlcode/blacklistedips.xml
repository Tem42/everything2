<node>
  <type_nodetype>4</type_nodetype>
  <delegated>1</delegated>
  <node_id>2008106</node_id>
  <title>blacklistedIPs</title>
  <code>my $str = undef;
my $offset = int($query-&gt;param('offset')) || 0;
my $pageSize = 200;
my ($firstItem, $lastItem) = ($offset + 1, $offset + $pageSize);
my $records = $pageSize * 2;
my $displayCount = $pageSize;

###################################################
# addrFromInt
###################################################
# Takes an integer representing an IPv4 address
#  as an argument
#
# Returns a string with dotted IP notation
###################################################
my $addrFromInt = sub {
	my $intAddr = shift;
	my ($oc1, $oc2, $oc3, $oc4) =
		(
		$intAddr &amp; 255
		, ($intAddr &gt;&gt; 8) &amp; 255
		, ($intAddr &gt;&gt; 16) &amp; 255
		, ($intAddr &gt;&gt; 24) &amp; 255
		)
		;
	return &quot;$oc4.$oc3.$oc2.$oc1&quot;;
};

###################################################
# rangeBitsFromInts
###################################################
# Takes two integers representing ends of an IP
#  address range.
#
# Returns the number of bits it spans if they
#  represent a CIDR range.
# Returns undef otherwise.
###################################################
my $rangeBitsFromInts = sub {
	my ($minAddr, $maxAddr) = @_;
	my $diff = abs($maxAddr - $minAddr) + 1;
	my $log2diff = log($diff)/log(2);
	my $epsilon = 1e-11; 
	return undef if (($log2diff - int($log2diff)) &gt; $epsilon);
	return (32 - $log2diff);
};

###################################################
# populateAddressForRange
###################################################
# Takes a hashref containing either data about IP
#  blacklist entry or an IP blacklist range entry
# If it contains a range entry, Modifies the row
#  so ipblacklist_address contains a string
#  representation
#
# Returns nothing
###################################################
my $populateAddressForRange = sub {
	my $row = shift;

	if (defined $$row{min_ip}) {
		my ($minAddrInt, $maxAddrInt) = ($$row{min_ip}, $$row{max_ip});
		my ($minAddr, $maxAddr) =
			(&amp;$addrFromInt($minAddrInt), &amp;$addrFromInt($maxAddrInt));
		my $bits = &amp;$rangeBitsFromInts($minAddrInt, $maxAddrInt);
		if (defined $bits) {
			$$row{ipblacklist_ipaddress} = &quot;$minAddr/$bits&quot;;
		} else {
			$$row{ipblacklist_ipaddress} = &quot;$minAddr - $maxAddr&quot;;
		}
	}
};

###################################################
# removeButton
###################################################
# Takes a hashref containing either data about IP
#  blacklist entry or an IP blacklist range entry
#
# Returns a string containing a submit button to
#  remove the given entry
###################################################
my $removeButton = sub {
	my ($row) = @_;
	my $hiddenHash = { };
	$$hiddenHash{-name}  = 'remove_ip_block_ref';
	$$hiddenHash{-value} = $$row{ipblacklistref_id};
	my $result = 
		$query-&gt;hidden($hiddenHash) . ''
		. $query-&gt;submit({ -name =&gt; 'Remove' });

	return $result;
};

###################################################
###################################################
# End Functions
###################################################

my $getBlacklistSQL = &lt;&lt;SQLEND;
SELECT ipblacklistref.ipblacklistref_id
	, IFNULL(ipblacklist.ipblacklist_user, ipblacklistrange.banner_user_id)
		'ipblacklist_user'
	, ipblacklist.ipblacklist_ipaddress
	, IFNULL(ipblacklist.ipblacklist_comment, ipblacklistrange.comment)
		'ipblacklist_comment'
	, ipblacklistrange.min_ip
	, ipblacklistrange.max_ip
	FROM ipblacklistref
	LEFT JOIN ipblacklistrange
		ON ipblacklistrange.ipblacklistref_id = ipblacklistref.ipblacklistref_id
	LEFT JOIN ipblacklist
		ON ipblacklist.ipblacklistref_id = ipblacklistref.ipblacklistref_id
	WHERE (ipblacklist_id IS NOT NULL OR ipblacklistrange_id IS NOT NULL)
	ORDER BY ipblacklistref.ipblacklistref_id DESC
	LIMIT $offset,$records
SQLEND

my $cursor = undef;
my $saveRaise = $dbh-&gt;{RaiseError};
$dbh-&gt;{RaiseError} = 1;
eval { 
	$cursor = $dbh-&gt;prepare($getBlacklistSQL);
	$cursor-&gt;execute();
};
$dbh-&gt;{RaiseError} = $saveRaise;

if ($@) {
	$str .=
		&quot;&lt;h3&gt;Unable to load IP blacklist&lt;/h3&gt;&quot;;
	return $str;
}

my $fetchResults = $cursor-&gt;fetchall_arrayref({});
my $resultCount = scalar @$fetchResults;
# Shorten fetchResults to just the items we will display
$fetchResults = [ @$fetchResults[0..($displayCount - 1)] ];

my ($prevLink, $nextLink) = ('', '');

if ($offset &gt; 0) {
	my $prevOffset = $offset - $pageSize;
	my $offsetHash = { };
	
	$$offsetHash{showquery} = $query-&gt;param('showquery')
		if $query-&gt;param('showquery');

	if ($prevOffset &lt;= 0) {
		$prevOffset = 0;
	} else {
		$$offsetHash{offset} = $prevOffset;
	}

	$prevLink = linkNode(
		$NODE
		, &quot;Previous (&quot; . ($prevOffset + 1) . &quot; - &quot; . ($prevOffset + $pageSize) . &quot;)&quot;
		, $offsetHash
	);

}

if ($resultCount &gt; $pageSize) {
	my $maxRecord = $offset + $resultCount;
	my $offsetHash = { 'offset' =&gt; $offset + $pageSize };
	
	$$offsetHash{showquery} = $query-&gt;param('showquery')
		if $query-&gt;param('showquery');

	$nextLink = linkNode(
		$NODE
		, &quot;Next (&quot; . ($pageSize + $offset + 1) . &quot; - &quot; . $maxRecord . &quot;)&quot;
		, $offsetHash
	);
} else {
	$lastItem = $offset + $resultCount;
	$displayCount = $resultCount;
}

my $header = &lt;&lt;HEADEREND;
&lt;h3&gt;Currently blacklisted IPs (#$firstItem - $lastItem)&lt;/h3&gt;
&lt;p&gt;
$prevLink
$nextLink
&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;2&quot; cellpadding=&quot;3&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;IP Address&lt;/th&gt;
    &lt;th&gt;Blocked by user&lt;/th&gt;
    &lt;th&gt;Reason&lt;/th&gt;
    &lt;th&gt;Remove?&lt;/th&gt;
  &lt;/tr&gt;
HEADEREND

$str .= $header;

$str .= &quot;&lt;pre&gt;$getBlacklistSQL&lt;/pre&gt;&quot;
	if $query-&gt;param('showquery');

# Don't retain the value if we just deleted a block
$query-&gt;delete('remove_ip_block_ref');

for my $row (@$fetchResults) {
	&amp;$populateAddressForRange($row);
	$str .= &quot;&lt;tr&gt;&quot;
	.&quot;&lt;td&gt;$$row{ipblacklist_ipaddress}&lt;/td&gt;&quot;
	.&quot;&lt;td&gt;&quot;.linkNode($$row{ipblacklist_user}).&quot;&lt;/td&gt;&quot;
	.&quot;&lt;td&gt;$$row{ipblacklist_comment}&lt;/td&gt;&quot;
	.&quot;&lt;td&gt;&quot;
	. htmlcode('openform', 'removebanform')
	. &amp;$removeButton($row)
	. $query-&gt;end_form()
	.&quot;&lt;/td&gt;&quot;
	.&quot;&lt;/tr&gt;&quot;
}

$str .= &quot;&lt;/table&gt;&quot;;

return $str;
</code>
</node>

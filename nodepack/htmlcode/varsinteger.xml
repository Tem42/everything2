<node>
  <type_nodetype>4</type_nodetype>
  <node_id>1342337</node_id>
  <title>varsInteger</title>
  <code>#VARS integer
#safely allows a user to set an integer in their $VARS via a text field
#
#parameters:
#	$key - which element is being changed; $VARS-&gt;{$key}
#	$flags - bitwise flags:
#		1 = separate 0 and undef - by default, a value of 0 (or blank) will delete $VARS-&gt;{$key}; if this is set, the actual value of 0 will be stored
#		2 = do not show allowed range before text field
#		4 = do not show messages for invalid entries
#	$min - minimum allowed value
#	$max - maximum allowed value
#	$txtLen - maximum character length allowed to enter (sure, we could take some log base 10s of the magnitude of min and max, but just telling is sooooo much easier)
#created: 2002.08.04.n0
#updated: 2002.08.05.n1

#my ($key, $flags, $min, $max, $txtLen) = @_;
my ($key, $flags, $min, $max) = @_;

return if $APP-&gt;isGuest($USER);

#returns information about a severe error; means that somebody called this routine incorrectly
local *oops = sub {
	return '&lt;span border=&quot;solid black 1px;&quot; title=&quot;varsInteger(key, flags, min, max, len)&quot;&gt;!!! server problem: '.$_[0].' !!!&lt;/span&gt;';
};


#
# deal with parameters
#

return oops('no VARS key given') unless (defined $key) &amp;&amp; length($key);
return oops('invalid VARS key given') unless $key =~ /(\w+)/;
$key = $1;

$flags = ((defined $flags) &amp;&amp; length($flags) &amp;&amp; ($flags=~/([1-9]\d*)/)) ? $1 : 0;
my $SEPARATE0 = $flags &amp; 1;
my $HIDERANGE = $flags &amp; 2;
my $WRONGMSG = !($flags &amp; 4);

return oops('no minimum value given') unless (defined $min) &amp;&amp; length($min);
return oops('invalid minimum value given') unless $min=~/([+\-]?\d+)/;
$min=$1+0;

return oops('no maximum value given') unless (defined $max) &amp;&amp; length($max);
return oops('invalid maximum value given') unless $max=~/([+\-]?\d+)/;
$max=$1+0;

return oops('minimum value ('.$min.') is not less than maximum value ('.$max.')') unless $min&lt;$max;

#return oops('no textfield length given') unless (defined $txtLen) &amp;&amp; length($txtLen);
#return oops('invalid textfield length given') unless $txtLen=~/([1-9]\d*)/;
#$txtLen=$1+0;
my $txtLen = length($min);
++$txtLen if $min&gt;0;	#allow room for '+' in lower bound
if(length($max)&gt;$txtLen) {
	$txtLen=length($max);
} elsif(($max&gt;0) &amp;&amp; (length($max)==$txtLen) ) {
	$txtLen=length($max)+1;	#allow room for '+' in upper bound
}

#
# possibly change VARS
#

my $problem='';
my $qp = 'setvars_int_'.$key;
if(defined $query-&gt;param($qp)) {

	my $newVal = $query-&gt;param($qp);
	if(length($newVal)&gt;$txtLen) {
		$newVal = substr($newVal,0,$txtLen);
		$problem .= '; ' if length($problem);
		$problem .= 'the entered value was too long, so it is being truncated';
	}

	if( (length($newVal)==0) || ($newVal =~ /^\s+$/) ) {
		#spaces or blank clears
		delete $VARS-&gt;{$key};

	} elsif( $newVal =~ /^[+\-]?0$/) {
		#entered 0
		if($SEPARATE0) {
			$VARS-&gt;{$key} = 0;
		} else {
			delete $VARS-&gt;{$key};
		}

	} elsif($newVal =~ /^([+\-]?[1-9]\d*)$/) {
		#entered an integer
		$newVal=$1+0;
		if($newVal&lt;$min) {
			$newVal=$min;
			$problem .= '; ' if length($problem);
			$problem .= 'the entered value is too low, so the minimum allowed value will be used instead';
		} elsif($newVal&gt;$max) {
			$newVal=$max;
			$problem .= '; ' if length($problem);
			$problem .= 'the entered value is too high, so the maximum allowed value will be used instead';
		}
		$VARS-&gt;{$key}=$newVal;
	} else {
		$problem .= '; ' if length($problem);
		$problem .= 'you may only enter digits here, with no leading zeros';
	}
}
$query-&gt;delete($qp);	#don't need, since doing own textfield


#
# display text field
#

my $showVal = (defined $VARS-&gt;{$key}) &amp;&amp; length($VARS-&gt;{$key}) ? $VARS-&gt;{$key} : '';

return
	($HIDERANGE ? '' : '('.$min.' thru '.$max.') ')
	. $query-&gt;textfield($qp, $showVal, $txtLen+1, $txtLen) .
	(($WRONGMSG &amp;&amp; length($problem)) ? ' ('.$problem.')' : '')
;
</code>
</node>

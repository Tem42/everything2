<node>
  <type_nodetype>4</type_nodetype>
  <modperlsafe>1</modperlsafe>
  <node_id>1872771</node_id>
  <title>displayWriteupInfoZen</title>
  <code>#customized display of writeup information
#pass (optional) writeup ID, (optional) things to show
#updated: Wednesday, February 26, 2003 to prepare for making this work for header and/or footer (right now, this seems to do much unneeded caching, but it will serve a useful purpose later)

#
# setup
#

#parameters
my ($wuID, @thisIsNotUsedAnymore) = @_;
my $nID = getId($NODE);
$wuID ||= $nID || 0;
return 'Ack! displayWriteupInfo: Unable to get node_id' unless $wuID;
my $WRITEUP = getNodeById($wuID) || 0;
return 'Ack! displayWriteupInfo: No node with node_id '.$wuID unless $WRITEUP;


#constants
my $UID = getId($USER);
my $isGuest = $APP-&gt;isGuest($USER);
my $isRoot = $APP-&gt;isAdmin($USER);
my $isCE = $APP-&gt;isEditor($USER);
my $aid = $$WRITEUP{author_user} || 0;
my $wuAuthor = getNodeById($aid) || undef;
my $isMine = (!$isGuest) &amp;&amp; ($aid==$UID);
my $authorIsBot = (defined $wuAuthor) &amp;&amp; (($wuAuthor-&gt;{title} eq 'Webster 1913'));	#FIXME: get (cached) bot setting
my $inPrintMode = $query-&gt;param('displaytype') eq 'printable';	#FIXME - is that the best way to see if printable?	#if displaytype=printable - when printing, we don't want things like, for example, voting buttons

#client-side error
local *userWarn = sub {
	return '&lt;small title=&quot;displayWriteupInfo (htmlcode)&quot;&gt;!!! ' . $_[0] . ' !!!&lt;/small&gt;';
};


#parameters again
my $viewingAlone = $wuID==$nID;	#true if viewing WU by itself, false if possibly with others (in an e2node)


my $inHeader = undef;	#true=before WU text, false=after WU text (note: we use a slightly bad way of determining if we're in the header or footer)
#FIXME rename 'specialDisplays' to something better
my $fnName = undef;	#name of current function
#lookup table of user-entered function to actual function to run
#	by default, function return values are cached
#	a function may override the default caching by setting $specialDisplays-&gt;{$fnName} to the string that should be used for future calls instead
my $specialDisplays = undef; 
my $CACHE_NAME = 'cache_displayWriteupInfo_'.$wuID;
if( (exists $PAGELOAD-&gt;{$CACHE_NAME}) &amp;&amp; (defined $PAGELOAD-&gt;{$CACHE_NAME}) ) {
	$inHeader=0;
	$specialDisplays = $PAGELOAD-&gt;{$CACHE_NAME};

	#this next part is temporary - N-Wing - September 2004
	my $errMsg = 'Possible duplicate writeup detected! (This is not the fault of the writeup author.)';
	if($isCE) {
		$errMsg .= ' This appears to be a side effect of the Kurt/A deletion bug. It can be fixed manually by an admin, or maybe automatically later.';
	}
	return userWarn($errMsg);

} else {
	$inHeader=1;
	$specialDisplays = {
		'type'=&gt;\&amp;info_wutype,
		'kill'=&gt;\&amp;info_kill,
		'vote'=&gt;\&amp;info_vote,
		'cfull'=&gt;\&amp;info_c_full,
		'cshort'=&gt;\&amp;info_c_short,
		'dtcreate'=&gt;\&amp;info_dt_create,
		'author'=&gt;\&amp;info_author,
		'authoranon'=&gt;\&amp;info_author_anon,
		'print'=&gt;\&amp;info_print,
		'pseudoanon'=&gt;\&amp;info_author_pseudo,
		'typeauthorprint'=&gt;\&amp;info_typeauthor,
		'notnew'=&gt;\&amp;info_hidden,	#original name
		'hidden'=&gt;\&amp;info_hidden,	#name that makes more sense
		'length'=&gt;\&amp;info_length,
		'sendmsg'=&gt;\&amp;sendMessage,
	};
	$PAGELOAD-&gt;{$CACHE_NAME} = $specialDisplays;
}



#determine things to display
my @showThings = ();
if($inPrintMode) {
	#override user setting and show all information when printing
	if($inHeader) {
		@showThings = ('l:typeauthorprint','c:kill','c:vote','r:dtcreate','\n','l:cfull','c:hidden','r:length');
	} else {
		@showThings = ();
	}
} else {
	#use user vars, if set, or default
	if($inHeader) {
		#header
		if( (exists $$VARS{wuhead}) &amp;&amp; (defined $$VARS{wuhead}) &amp;&amp; length($$VARS{wuhead}) ) {
			@showThings = split(/\s*,\s*/, $$VARS{wuhead});	#split from HTML.pm - htmlcode
		} else {
			#no settings given, so use default header, which is mostly &quot;classic&quot;
			@showThings = ('l:typeauthorprint');
			push(@showThings, 'l:sendmsg') if $$VARS{NewbieBlab};
			push @showThings,('c:kill','c:vote');
			if($wuID==$nID) {
				push @showThings, ('r:dtcreate','\n','l:cfull');
			} else {
				push @showThings, ('c:cshort','r:dtcreate');
			}
		}
	} else {
		#footer
		if( (exists $$VARS{wufoot}) &amp;&amp; (defined $$VARS{wufoot}) &amp;&amp; length($$VARS{wufoot}) ) {
			@showThings = split(/\s*,\s*/, $$VARS{wufoot});	#split from HTML.pm - htmlcode
		} else {
			@showThings = ();
		}
	}
}
{
	#my $max = 16; #don't let user go nuts
	my $max = 50;	#don't let the user go too nuts (we cache now, so repeating something several times doesn't really matter)
	@showThings = @showThings[0..$max-1] if scalar(@showThings)&gt;$max;
}

my $t = undef;	#temporary values that subs can use


#display constants
my %tDataOpen = (
	'l'=&gt;'&lt;td&gt;',
	'c'=&gt;'&lt;td align=&quot;center&quot;&gt;',
	'r'=&gt;'&lt;td align=&quot;right&quot;&gt;',
);
my $tDataClose = '&lt;/td&gt;';
my $tRowOpen = '&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;&lt;tr&gt;';
my $tRowClose = &quot;&lt;/tr&gt;&lt;/table&gt;\n&quot;;



#
# subs
#

#links to the current WU, showing the given text
#does NOT create softlink, since they are useless between e2node and writeup
local *linkWU = sub {
	my ($txt,$rExtra) = @_;
	$txt = $WRITEUP-&gt;{title} || '???' unless (defined $txt) &amp;&amp; length($txt);
	my %linkParams = ();
	%linkParams = %{$rExtra} if defined $rExtra;
	$linkParams{node_id}=$wuID;
	return '&lt;a href='.urlGen(\%linkParams).'&gt;'.$txt.'&lt;/a&gt;';
};

#ripped from displayUserInfo
local *info_authorsince = sub {

	#not if bot, or printable, or $VARS
	return if $authorIsBot;
	return if $inPrintMode;
	return if $$VARS{info_authorsince_off};

	return unless $wuAuthor;

	return '&lt;small&gt;('.htmlcode('timesince',($wuAuthor-&gt;{lasttime}).',1').')&lt;/small&gt;';
};

local *info_wutype = sub {
	$t = $$WRITEUP{wrtype_writeuptype} || 0;
	return userWarn(linkWU('bad WU type: 0')) unless $t;
	getRef $t;
	return userWarn(linkWU('bad WU type: '.$$t{node_id})) unless $t;
	return userWarn(linkWU('0 length WU type title: '.$$t{node_id})) unless length($$t{title});
	return '('.linkWU($$t{title}).')';
};

local *info_kill = sub {
	$specialDisplays-&gt;{$fnName} = '';
	return htmlcode('voteit',$wuID.',1');
};

local *info_vote = sub {
	$t = htmlcode('voteit',$wuID.',2');
	return unless((defined $t) &amp;&amp; length($t));
	$specialDisplays-&gt;{$fnName} = '';
	return '&lt;span style=&quot;white-space: nowrap&quot; nowrap=&quot;nowrap&quot;&gt;'.$t.'&lt;/span&gt;';
};

local *info_c_full = sub {
	return htmlcode('writeupcools',$wuID);
};

local *info_c_short = sub {
	return info_c_full() if $inPrintMode;	#always show full info when printing
	return htmlcode('CoolUncoolIt',$wuID);
};

local *info_dt_create = sub {
	return '&lt;small&gt;'.htmlcode('parsetimestamp', $$WRITEUP{createtime}).'&lt;/small&gt;';
};

local *info_author = sub {
	if(defined $wuAuthor) {
		my $authorLink = linkNode($wuAuthor,0,{lastnode_id=&gt;0});
		$authorLink = '&lt;s&gt;'.$authorLink.'&lt;/s&gt;' if $isCE &amp;&amp; !$authorIsBot &amp;&amp; (exists $wuAuthor-&gt;{acctlock}) &amp;&amp; ($wuAuthor-&gt;{acctlock});
		return 'by &lt;strong&gt;' . $authorLink . '&lt;/strong&gt; ' . info_authorsince();
	} else {
		return '&lt;em&gt;unable to find author '.$aid.'&lt;/em&gt;';
	}
};

local *info_author_anon = sub {
	return (($isMine || $authorIsBot || hasVoted($WRITEUP, $USER)) ? &amp;info_author() : '(anonymous)') . ($isCE?' '.info_authorsince():'');
};

local *info_author_pseudo = sub {
	return &amp;info_author() if $isMine || $authorIsBot || hasVoted($WRITEUP, $USER);
	my $AT = getNodeById($aid);
	return '(very anonymous)' unless $AT;
	$AT = $$AT{title};
	return ' (&lt;a href='.urlGen( $AT ? ({node=&gt;$AT, type=&gt;'user'}) : ({node_id=&gt;$aid}) ).' title=&quot;'.$AT.'&quot;&gt;anonymous&lt;/a&gt;)'; #try hard to ensure link will work
};

local *info_print = sub {
	return if $inPrintMode;
	return '('.linkNode($WRITEUP, 'print', {displaytype=&gt;'printable',lastnode_id=&gt;0}).')';
};

local *info_typeauthor = sub {
	return &amp;info_wutype() . ' ' . &amp;info_author() . ' ' . &amp;info_print();
};

local *info_hidden = sub {
	return unless $isCE || $isMine;
	my $disp = '&lt;small&gt;(created ' . ($$WRITEUP{notnew} ? 'hidden' : 'publicly') . ')&lt;/small&gt;';
	$specialDisplays-&gt;{'notnew'} = $specialDisplays-&gt;{'hidden'} = $disp;
	return $disp;
};

local *info_length = sub {
	#most of these counts are rough,
	#and can be fooled rather easily;
	#however, it isn't worth taking
	#the CPU time to find exact values

	my $wdt = $$WRITEUP{doctext} || '';
	my $c = 0;	#count

	#paragraphs - could be off by one if &lt;p&gt; incorrectly used to end a paragraph instead of to start one
	while($wdt =~ /&lt;[Pp][&gt;\s]/g) {	#weak paragraph count
		++$c;
	}
	$c=1 if !$c;
	$t = $c.' &lt;abbr title=&quot;approximate paragraphs&quot;&gt;' . ($VARS-&gt;{noCharEntities} ? 'p' : '&amp;para;') . '&lt;/abbr&gt;, ';

	#if we want to burn CPU, we could count sections - p, blockquote, ul, ol, hr, anything else - as separators

	#now only deal with plain text
	$wdt =~ s/\&lt;.+?\&gt;//gs;

	#sentences
	$c = ($wdt =~ tr/.!?//);
	$t .= $c.' &lt;abbr title=&quot;approximate sentences&quot;&gt;s&lt;/abbr&gt;, ' if $c;

	#words
	$c=0;
	while($wdt =~ /\w+/g) {
		++$c;
	}
	$t .= $c.' &lt;abbr title=&quot;approximate words&quot;&gt;w&lt;/abbr&gt;, ' if $c;
#	$t .= (($wdt =~ s/\W+/ /gs)||0).' w, ';

	$t .= length($$WRITEUP{doctext}) . ' &lt;abbr title=&quot;characters&quot;&gt;c&lt;/abbr&gt;';

	return $t;
};



#TODO? checkbox to have anonymous? maybe just for certain people?
local *sendMessage = sub {
	$specialDisplays-&gt;{$fnName} = '';
	return if $isGuest;
	my $qp='msgwuauthor_'.$wuID;	#query parameter
	my $t='';	#text to display - what was sent, error, etc.
	if(($aid!=$UID) &amp;&amp; $$VARS{borged}) {
		$t = '(you may not talk now)';
	} elsif( (defined $query-&gt;param($qp)) &amp;&amp; (length($query-&gt;param($qp)))  ) {
		my $msg = $query-&gt;param($qp);
		my $wut = $$WRITEUP{title};
		$wut =~ s/ \(\w+\)$//o;

		my $ccMe = (defined $query-&gt;param('cc'.$qp)) &amp;&amp; ($query-&gt;param('cc'.$qp) eq '1') ? 1 : 0;

		my $failMessage = htmlcode('sendPrivateMessage',{
			'recipient_id'=&gt;$aid,
			'message'=&gt;$msg,
			'ccself'=&gt;$ccMe,
			'renode'=&gt;$wut,
		});
		$failMessage = undef unless (defined $failMessage) &amp;&amp; (length($failMessage));
		if(defined $failMessage) {
			$t = ' &lt;strong&gt;Error&lt;/strong&gt;: unable to send writeup message &quot;'.$msg.'&quot;: '.$failMessage;
		} else {
			$query-&gt;param($qp,'');	#clear text field
			$t = $msg;
			$t =~ s/\&lt;/&amp;lt;/g;
			$t =~ s/\&gt;/&amp;gt;/g;
			$t = ' &lt;small&gt;(sent writeup message &quot;'.parseLinks($t,$NODE).'&quot;)&lt;/small&gt;';
		}
	}
	return $query-&gt;checkbox('cc'.$qp,'','1','CC ').$query-&gt;textfield($qp,'',20,1500).$t;	#1530=255*6
};




#
# main
#

#build result
my $str = '';
my $s = undef; #which Sub to call
my $r = undef; #Result of sub call
my $align = undef; #alignment
my $curRow = '';
#TODO allow multiple things in a table cell
foreach my $k (@showThings) {

	$fnName = $k;
	$align = $tDataOpen{l};
	if($fnName eq '\n') { #literal characters '\' and 'n', not newline
		if(length($curRow)) {
			$str .= $tRowOpen . $curRow . $tRowClose;
			$curRow = '';
		}
		next;

	} elsif($fnName =~ /^(.):(.+)$/) {
		#calling a function
		$align = $tDataOpen{$1} || $align;
		$fnName = $2;
	}
	next if length($fnName)==0;

	unless( (exists $specialDisplays-&gt;{$fnName}) &amp;&amp; (defined $specialDisplays-&gt;{$fnName}) ) {
		$curRow .= $align.'&lt;small&gt;(unknown value: &quot;'.encodeHTML($fnName).'&quot;; see '.linkNodeTitle('Writeup Settings').')&lt;/small&gt;'.$tDataClose unless $s;
		next;
	}

	$s = $specialDisplays-&gt;{$fnName};
	if( (ref $s) eq 'CODE' ) {
		#compute result
#$query-&gt;param('debug'.$wuID.$fnName.($inHeader?'head':'foot').int(rand(99)), 'uncached');
		$r = &amp;$s();
		$r = '' if !defined $r;
		if( (defined $specialDisplays-&gt;{$fnName}) &amp;&amp; (ref $specialDisplays-&gt;{$fnName}) eq 'CODE' ) {
			#the function is letting us handle caching
			$specialDisplays-&gt;{$fnName} = $r;
		}

	} else {
#$query-&gt;param('debug'.$wuID.$fnName.($inHeader?'head':'foot').int(rand(99)), 'cached');
		#use cached result
		$r = $s;

	}

	$curRow .= $align . $r . $tDataClose;

}
$str .= $tRowOpen . $curRow . $tRowClose if length($curRow);


if($inHeader) {
	#in-page ref to each WU
	$str = '&lt;a name=&quot;author_'.$aid.'&quot;&gt;&lt;a name=&quot;node_id_'.$wuID.'&quot;&gt;' . $str . '&lt;/a&gt;&lt;/a&gt;';
} else {
	#not showing anything about this writeup anymore, so delete cache
	delete $PAGELOAD-&gt;{$CACHE_NAME};
}


$str;
</code>
</node>

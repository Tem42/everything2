<node>
  <node_id>1536264</node_id>
  <type_nodetype>13</type_nodetype>
  <doctext>&lt;!-- A tool made by Lord Brawl --&gt;

[%
return 'Sorry, this utility is for senior site admins only. Run along.' unless(isGod($USER));

return '&lt;p&gt;Welcome to Klaproth Van Lines.  This utility will reparent writeups for a single user in bulk.&lt;/p&gt;';
%]

[{openform}]

&lt;table border=&quot;1&quot;&gt;
[%
return '&lt;tr&gt;&lt;th&gt;[Klaproth] has no business with you ... just now.&lt;/th&gt;&lt;/tr&gt;' unless isGod($USER);

#debug
if($query-&gt;param('user_name') &amp;&amp; $query-&gt;param('idlist')) {
  return '&lt;tr&gt;&lt;th&gt;Altar\'d states!&lt;/th&gt;&lt;/tr&gt;';
}

my $myusername = $query-&gt;param('user_name');
my $myoldlist =  $query-&gt;param('oldlist');

if($myusername &amp;&amp; $myoldlist) {
  # Second stage - retrieve and validate form data

  # For which user is this request?
  my $uservictim = getNode($myusername, 'user');

  # Sorry, we don't know that user
  return '&lt;tr&gt;&lt;th&gt;There is no user: &quot;'.$myusername.'&quot;&lt;/th&gt;&lt;/tr&gt;' unless($uservictim);

  # Strip the linefeeds
  $myoldlist =~ s/\s+\n/\n/g;

  my @idlist = split('\n', $myoldlist);
  my $tempid;
  my $str;
  my $goodstr;
  my $errstr;

  # Build the table's top, to be used if no errors are found
  $goodstr.= '&lt;tr&gt;&lt;td colspan=2&gt;The following writeups by &lt;strong&gt;';
  $goodstr.= $$uservictim{title};
  $goodstr.= '&lt;/strong&gt; are ready to be reparented.';
  $goodstr.= 'Nothing has happened to them ... yet.&lt;/td&gt;';
  $goodstr.= '&lt;tr&gt;&lt;th&gt;Writeups to reparent&lt;/th&gt;&lt;th&gt;New homes&lt;/th&gt;&lt;/tr&gt;';
  $goodstr.= '&lt;tr&gt;&lt;td&gt;&lt;ol&gt;';

  # Iterate over the writeup ID list and make sure they're all kosher
  foreach my $wu (@idlist){
    next unless $wu;

    # Use the writeup ID to get the node ID
    $tempid = getNodeById($wu);

    # Error if this didn't work -- e.g. writeup has no parent
    $errstr.='&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;:Writeup ID '.$wu.' has no parent' unless $tempid;
    next unless $tempid;

    # ID must be type 'writeup' (117) ? want an error msg ?
    $errstr.='&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;:ID '.$wu.' is not a writeup' unless $$tempid{type_nodetype} == 117;
    next unless $$tempid{type_nodetype} == 117;

    # Check that the author is correct
    if ($$tempid{author_user} == $$uservictim{node_id}) {
      $goodstr.='&lt;li&gt;'.linkNode($tempid, $$tempid{title});
    } 
    else {
      $errstr.='&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;: '.linkNode($tempid, $$tempid{title});
      $errstr.=' is not by target author';
    }
  }
  $goodstr.='&lt;/ol&gt;&lt;/td&gt;';
  $goodstr.='&lt;td&gt;&lt;ol&gt;';

  my $mynewlist = $query-&gt;param('newlist');
  my @nodelist;
  my @nodeidlist;
  # Iterate over the new node list to ensure they're all e2nodes
  if($mynewlist)
  {
    $mynewlist =~ s/\s+\n/\n/g;
    @nodelist = split('\n', $mynewlist);

    # Iterate over the new parent list and grab the node IDs
    foreach my $wu (@nodelist) {
      next unless $wu;

      $tempid = getNode($wu, 'e2node');
      # Error if this didn't work -- e.g. not an e2node
      $errstr.='&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;: '.$wu.' is not an e2node.' unless $tempid;
      next unless $tempid;

      # ID must be type 'node' (116) ? want an error msg ?
      next unless $$tempid{type_nodetype} == 116;

      # Seems OK ...
      # ... Add to node id list (for later post)
      push(@nodeidlist, $$tempid{node_id});
      # ... add to the display list
      $goodstr.='&lt;li&gt;'.linkNode($tempid, $$tempid{title});
    }
  }
  $goodstr.='&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;';

  # Check that the counts match
  if($#idlist != $#nodelist) {
    $errstr.='&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;: Mismatched lists! ';
  
    if($#idlist &gt; $#nodelist) {
      $errstr.='More IDs than Nodes';
    } 
    else {
      $errstr.='More Nodes than IDs';
    }
  }

  # Assemble the table
  if($errstr) {
    # Errors were encountered
    $str = '&lt;tr&gt;&lt;td&gt;Errors were found&lt;br&gt;&lt;ul&gt;'.$errstr.'&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;';
  } 
  else {
    # Show the source and target lists
    $str = $goodstr;

    # Rebuild the table rows for final verification (debug)
    $str .= '&lt;tr&gt;&lt;td&gt;&lt;input type=hidden name=&quot;movelist&quot; value=&quot;';
    $str .= join(',', @idlist);
    $str .= '&quot;&gt;&lt;/td&gt;';
    $str .= '&lt;td&gt;&lt;input type=hidden name=&quot;homelist&quot; value=&quot;';
    $str .= join(',', @nodeidlist);
    $str .= '&quot;&gt;&lt;/td&gt;&lt;/tr&gt;';
    $str.='&lt;tr&gt;&lt;td colspan=2&gt;&lt;input type=&quot;checkbox&quot; value=1 name=&quot;doit&quot; CHECKED/&gt; Do it!&lt;/td&gt;&lt;/tr&gt;';
  }    
}
else
{
  my $str;

  if($query-&gt;param('doit') == 1) {
    # Final stage, do the actual move

#   $str.='&lt;tr&gt;&lt;td colspan=2&gt;Checkbox value was '.$query-&gt;param('doit').'&lt;/td&gt;&lt;/tr&gt;';

    my @moveidlist = split(',', $query-&gt;param('movelist'));
    my @homeidlist = split(',', $query-&gt;param('homelist'));

    $str.='&lt;tr&gt;&lt;td&gt;';
    my $i = 0;
    foreach my $wu (@moveidlist) {
      my $wuid = getNodeById($wu);
      my $oldparent = getNodeById($$wuid{parent_e2node});
      my $newparent = getNodeById($homeidlist[$i]);

      # Report it
      $str .= $wu.' '.$$wuid{title}.' in '.$$oldparent{title};
      $str .= ' has moved to '.linkNode($newparent, $$newparent{title});
      $str .= '&lt;br /&gt;';

      # Do it - based on 'Magical Writeup Reparenter'
      # ... out of the old e2node ...
      removeFromNodegroup($oldparent, $wuid, $USER);
      # ... store the new e2node as parent ...
      $$wuid{parent_e2node} = $$newparent{node_id};
      # ... Retitle the writeup &quot;new name (type)&quot; ...
      my $wutype = getNodeById($$wuid{wrtype_writeuptype});
      $$wuid{title} = $$newparent{title}.' ('.$$wutype{title}.')';   
      # ... Put it in its new e2node ...
      insertIntoNodegroup($newparent, $USER, $wuid); 
      # ... Make sure all parties know of the change
      updateNode($oldparent, -1);
      updateNode($newparent, -1);
      updateNode($wuid, -1);

      # Loop counter (don't know how to use foreach on 2 arrays)
      $i++;
    }
    $str.='&lt;/td&gt;&lt;/tr&gt;';

  }
  else {
    # No data yet - build and present the input form
    $str = '&lt;tr&gt;&lt;td colspan=2&gt;Username: ';
    $str .= '&lt;input type=&quot;text&quot; name=&quot;user_name&quot;&gt;&lt;/td&gt;&lt;/tr&gt;';
    $str .= '&lt;tr&gt;&lt;th&gt;Source writeup IDs&lt;br&gt;&lt;small&gt;';
    $str .= '(get \'em from the ';
    $str .= linkNode(getNode('Altar of Sacrifice', 'restricted_superdoc'), 'Altar');
    $str .= ')&lt;/small&gt;&lt;/th&gt;&lt;th&gt;Target node names&lt;/th&gt;&lt;/tr&gt;';
    $str .= '&lt;tr&gt;&lt;td&gt;';
    $str .= '&lt;textarea name=&quot;oldlist&quot; ROWS=20 COLS=30&gt;&lt;/textarea&gt;';
    $str .= '&lt;/td&gt;&lt;td&gt;';
    $str .= '&lt;textarea name=&quot;newlist&quot; ROWS=20 COLS=30&gt;&lt;/textarea&gt;';
    $str .= '&lt;/td&gt;&lt;/tr&gt;';
  }
}

%]
&lt;/table&gt;
[{closeform}]
</doctext>
  <title>Klaproth Van Lines</title>
</node>

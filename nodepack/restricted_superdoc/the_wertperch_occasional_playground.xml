<node>
  <type_nodetype>13</type_nodetype>
  <doctext>Countdown code - thanks to kthejoker
&lt;p&gt;
&lt;b&gt;
[%

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday) = localtime(time());
$year=$year+1900;
$mon++;

### Here are the target month and day:
my $targetday=1;
my $targetmonth=9;

my @montharray = (0,31,28,31,30,31,30,31,31,30,31,30,31);
if ($year % 4 == 0) {$montharray[2]=29;}

my $finalstr;
my $daycount;
my $totaldays=0;
for (my $count = $mon; $count&lt;=$targetmonth; $count++) {
	$daycount=$montharray[$mon];
### ADD THIS STUFF HERE
	if ($mon == $targetmonth) {
		$daycount=$targetday-$mday;
	}
### INTO YOUR CODE
	elsif ($count==$mon) {
 		$daycount=$daycount-$mday;
	}
	elsif ($count == $targetmonth) {
		$daycount=$targetday;
	}
	$totaldays=$totaldays+$daycount;
	$daycount=0;
}


### GROWLS because the next line isn't working, and I don't know why!

my $dayword = &quot;days&quot;;
$dayword = &quot;day&quot; if($totaldays == -1 || $totaldays == 1);

if($totaldays &lt; 0) {
    my $days_ago = -$totaldays;
    # Already happened
    return &quot;Sorry, you missed it by $days_ago $dayword&quot;;
}
elsif($totaldays == 0) {
    # Today, woo!
    return &quot;Today is the day&quot;; 
}
else {
    # Not quite yet...
    return &quot;$totaldays $dayword left to go&quot;;
} 

%]

&lt;/b&gt;&lt;p&gt;
&lt;hr width=150&gt;
&lt;br /&gt;
Bookmarklet to discover geographical location from IP address...
&lt;br /&gt;Works in Firefox (all one line, obviously...)&lt;p&gt;
&lt;tt&gt;javascript:q=document.getSelection();for(i=0;i&lt;frames.length;i++){q=frames[i].document.getSelection();if(q)break;}if(!q)void(q=prompt('Gimme an IP address, stoopid...',''));if(q)location.href='http://www.geobytes.com/IpLocator.htm?GetLocation&amp;ipaddress='+escape(q)
&lt;/tt&gt;
&lt;hr width=150&gt;


&lt;/p&gt;&lt;br /&gt;&lt;p&gt;

Now this is a noding speedometer for L2+ noders...

[%
use Everything::Experience;

return &quot;You're still quite young yet.  There is still much to be [Everything University|learned].&quot; unless(getLevel($USER) &gt; 1);

my $user_in = $query-&gt;param('speedyuser');
my $user_scratch = $user_in || $$USER{title};
my $str = htmlcode('openform').&quot;&lt;input type=\&quot;text\&quot; name=\&quot;speedyuser\&quot; value=\&quot;$user_scratch\&quot;&gt;&quot;.htmlcode('closeform').&quot;&lt;small&gt;&lt;p align=\&quot;right\&quot;&gt;(inspired by &quot;.linkNode(getNode('igloowhite', 'user')).&quot;'s homenode)&lt;/small&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&quot;;

  return $str.=&quot;Okay, the radar gun's ready.  Who should we clock?&quot; unless($user_in);

  my $u = getNode($user_in, 'user');
  return $str.=&quot;&lt;br&gt;&lt;br&gt;Your aim is way off. $user_in isn't a user. Try again.&quot; unless($u);

  my $initcnt = $DB-&gt;sqlSelect(&quot;count(*)&quot;, &quot;node&quot;, &quot;author_user=$$u{user_id} AND type_nodetype=&quot;.getId(getType('writeup')));

  return $str.=&quot;&lt;br&gt;&lt;br&gt;Um, user $$u{title} has no writeups!&quot; if ($initcnt == 0);

  $str.= &quot;$$u{title} has &quot;.$initcnt.&quot; nodes. &quot;;
  my $cnt;
  if($initcnt &gt; 19){$cnt = 20;}else{$str .=&quot;Since it's less than twenty, we'll go on that data.&lt;br&gt;&quot;; $cnt = $initcnt};


  my $lastcnt = $DB-&gt;sqlSelect(&quot;TO_DAYS(NOW())-TO_DAYS(createtime)&quot;, &quot;node&quot;, &quot;type_nodetype=&quot;.getId(getType('writeup')).&quot; AND  author_user=$$u{node_id} ORDER BY createtime DESC limit $cnt,1&quot;);

if ($lastcnt &lt; 1) {
  $str.=&quot;&lt;br&gt;&lt;br&gt;Wait a while, &quot;;
  return $str.&quot;do at least one [day|lap] around the track before timing yourself.&quot; if($$USER{node_id} == $$u{node_id});
  return $str.&quot;let [&quot;.$$u{title}.&quot;] do at least one [day|lap] around the track before timing them.&quot;;
}

  $str .= &quot;&lt;br&gt;&lt;b&gt;Noding Speed&lt;/b&gt;:&lt;br&gt;  To write $cnt nodes, it took the user $lastcnt days.   This is approximately &lt;b&gt;&quot;.sprintf(&quot;%.4f&quot;, $cnt/$lastcnt).&quot;&lt;/b&gt; nodes per day.&lt;br&gt;&lt;br&gt;&quot;;

  my $lvwu = getVars(getNode(&quot;level writeups&quot;, &quot;setting&quot;));
  my $curlvl = getLevel($u);

  # I moved this line up because it doesn't depend on
  # prediction calculation so it will be faster here.

  return $str.&quot;&lt;br&gt;&lt;br&gt;&lt;small&gt;($$u{title} is held back by experience and not writeups)&lt;/small&gt;&quot; if($$lvwu{$curlvl + 1} &lt;= $initcnt);

  # Honor roll code.
  # Get level-up factor and find number of required WU's.
  # I'm assuming getHRLF returns 1.0 for people not on
  # the Honor Roll.

  my $hrlf = getHRLF($u);
  my $reqd = ($$lvwu{$curlvl+1} * $hrlf) - $initcnt + 1;
  my $predict = $reqd /($cnt/$lastcnt);

  my $csr = $dbh-&gt;prepare(&quot;SELECT NOW() + INTERVAL $predict DAY as pd&quot;);
  $csr-&gt;execute();
  my $predictdate = $csr-&gt;fetchrow_hashref();

  # Display different results, depending on whether the
  # user is on the Honor Roll or not.
  # Also, changed the print-out to use $reqd, rather than
  # recalculating the expression as it was before.

  return $str .= &quot;&lt;br&gt;&lt;b&gt;Level Predictions&lt;/b&gt;&lt;br&gt; Since $$u{title} is currently level $curlvl and not on the [Honor Roll] (Level-fu is &quot;.($hrlf).&quot;) , the user will reach lv &quot;.($curlvl + 1).&quot; (&quot;.int($reqd).&quot; more writeups) in &quot;.int($predict).&quot; days. (on $$predictdate{pd})&quot; unless($hrlf &lt; 1.0 || $curlvl == 13);

  $str .= &quot;&lt;br&gt;&lt;b&gt;Level Predictions&lt;/b&gt;&lt;br&gt; Since $$u{title} is currently level $curlvl and has a LF of &quot; . sprintf('%.4f',$hrlf) . &quot;, the user will reach lv &quot;.($curlvl + 1).&quot; (&quot;.int($reqd).&quot; more writeups) in &quot;.int($predict).&quot; days. (on $$predictdate{pd})&quot; unless($curlvl == 13);

  return $str;
%]

&lt;/p&gt;&lt;br /&gt;&lt;p&gt;
&lt;hr width=150&gt;
&lt;/p&gt;&lt;br /&gt;&lt;p&gt;


Finally, this is holding stuff from [Gritchka Molesting Oysters], while I use it to help me learn about Perl...
&lt;/p&gt;&lt;br /&gt;&lt;p&gt;

&lt;style type=&quot;text/css&quot;&gt;
  TH {text-align: left}
  TD.user    {background-color: #FDD}
  TD.e2node  {background-color: #DDF}
  TD.writeup {background-color: #DFD}
  TD.hid {
     color:       red;
     font-weight: bold;
  }
  TD.nsh {
     color:       blue;
     font-weight: bold;
  }
&lt;/style&gt;

&lt;h4 id=&quot;latest&quot;&gt;Latest nodes and types&lt;/h4&gt;

This gets all the nodes of any kind created over any stretch of node_id's, but by default looks at the last 100.

[%

# Why on earth does this often come up with a subroutine redefined error?
##sub GetLatestNodeID {
    my $qh = $DB-&gt;getDatabaseHandle()-&gt;prepare(
        'SELECT * FROM node
         ORDER BY node_id DESC
         LIMIT 0,1'
        );
    $qh-&gt;execute();
    my $latest = $qh-&gt;fetchrow_hashref();
    $qh-&gt;finish();
##    return $$latest{node_id};
##}
my $latestid = $$latest{node_id};

my $str = htmlcode('openform','');
$str .= 'Starting node_id: '.$query-&gt;textfield('start');
$str .= 'or '.$query-&gt;checkbox('show_latest');
$str .= '&lt;br&gt;limit: '.$query-&gt;textfield('limit', '100').'&lt;br&gt;';
$str .= $query-&gt;radio_group('options', ['all', 'nodeshells', 'users'], 'all').'&lt;br&gt;';
$str .= htmlcode('closeform','').'&lt;br&gt;';

my $limit = $query-&gt;param('limit');
return $str unless $limit;

my $start = $query-&gt;param('start');
my $show_latest = ($query-&gt;param('show_latest') eq 'on');
return $str.'&lt;br&gt;Enter start XOR check latest, NOT both' if ($start &amp;&amp; $show_latest);
$start = $latestid - $limit + 1 if $show_latest;
return $str unless $start;

# to do: yeah, yeah, check they're numeric

my $all_nodes = ($query-&gt;param('options') eq 'all');
my $nodeshells_only = ($query-&gt;param('options') eq 'nodeshells');
my $users_only = ($query-&gt;param('options') eq 'users');

my $e2node;
my $nodetype;
my $nodetypeh;
my $nodetypetitle;
my $creator;
my $creatorh;
#my $author;
#my $authorh;
my $td;
my $is_nodeshell;
my $links;
my $links_small = 1;
my $newbieness;
my $newbie_small = 5000;

$str .= '&lt;table&gt;&lt;tr&gt;';
# Now for the table headers. All options want node_id and title.
# - 'all' also wants author, type, h(hidden), and nsh(nodeshell)
# - 'nodeshells' also wants author, links, and newbieness
# - 'users' also wants real name and e-mail address

$str .= '&lt;th&gt;node_id&lt;/th&gt; &lt;th&gt;title&lt;/th&gt;';
if ($all_nodes)
    {$str .= '&lt;th&gt;author&lt;/th&gt; &lt;th&gt;type&lt;/th&gt; &lt;th&gt;hid?&lt;/th&gt; &lt;th&gt;nsh?&lt;/th&gt;';}
elsif ($nodeshells_only)
    {$str .= '&lt;th&gt;author&lt;/th&gt; &lt;th&gt;links&lt;/th&gt; &lt;th&gt;newbieness&lt;/th&gt;';}
elsif ($users_only)
    {$str .= '&lt;th&gt;name&lt;/th&gt; &lt;th&gt;address&lt;/th&gt;';}

for (my $nodeid = $start; $nodeid &lt; $start + $limit; $nodeid++) {
    $e2node = getNodeById($nodeid);
    next unless $e2node;

    $nodetype = $$e2node{type_nodetype};
    $nodetypeh = getNode($nodetype);
    $nodetypetitle = $$nodetypeh{title};

    next if ($nodetypetitle eq 'category'); # these always follow user

    next if ($users_only &amp;&amp; ($nodetypetitle ne 'user'));

    $$e2node{group} ||= ();  # copied from Your Nodeshells
    $is_nodeshell = (($nodetypetitle eq 'e2node') &amp;&amp; (!$$e2node{group}));
    next if ($nodeshells_only &amp;&amp; !$is_nodeshell);

    $str .= '&lt;tr&gt;&lt;td&gt;'.$nodeid.'&lt;/td&gt;';

    $td = '&lt;td&gt;';
    if ($all_nodes) {
        # colour the lines differently by type, for some common types
        if ($nodetypetitle eq 'user')
            {$td = '&lt;td class=&quot;user&quot;&gt;'}
        elsif ($nodetypetitle eq 'e2node')
            {$td = '&lt;td class=&quot;e2node&quot;&gt;'}
        elsif ($nodetypetitle eq 'writeup')
            {$td = '&lt;td class=&quot;writeup&quot;&gt;'}
    }
    $str .= $td.linkNode($e2node).'&lt;/td&gt;';

    if ($all_nodes || $nodeshells_only) {
        $creator = $$e2node{author_user};
        $creatorh = getNode($creator);
        if ($creatorh) {
            $str .= '&lt;td&gt;'.linkNode($creatorh).'&lt;/td&gt;';
            # to do: also show createdby_user if author_user is root
        }
    }

    if ($all_nodes) {
        $str .= $td.$nodetypetitle.'&lt;/td&gt;';

        if ($$e2node{notnew})
            {$str .= '&lt;td class=&quot;hid&quot;&gt;h&lt;/td&gt;';}
        else
            {$str .= '&lt;td&gt;&amp;nbsp;'.'&lt;/td&gt;';}

        if ($is_nodeshell)
            {$str .= '&lt;td class=&quot;nsh&quot;&gt;nsh&lt;/td&gt;';}
        else
            {$str .= '&lt;td&gt;&amp;nbsp;'.'&lt;/td&gt;';}
    }

    if ($nodeshells_only) {
    # For nodeshells, show number of links, and how new the creator was
    # - later will bold the very new, exclude editors, etc.
    # the fewer links, the less likely it is to be a good nodeshell
        $links = $DB-&gt;sqlSelect(&quot;count(*)&quot;, &quot;links&quot;, &quot;from_node=$$e2node{node_id}&quot;);
        ##$str .= '&lt;td&gt;'.&amp;boldifsmall($links, $links_small).'&lt;/td&gt;';
        $links = '&lt;b&gt;'.$links.'&lt;/b&gt;' if ($links &lt; $links_small);
        $str .= '&lt;td&gt;'.$links.'&lt;/td&gt;';
        $newbieness = $nodeid - $$creatorh{node_id};
        ##$str .= '&lt;td&gt;'.&amp;boldifsmall($newbieness, $newbie_small).'&lt;/td&gt;';
        $newbieness = '&lt;b&gt;'.$newbieness.'&lt;/b&gt;' if ($newbieness &lt; $newbie_small);
        $str .= '&lt;td&gt;'.$newbieness.'&lt;/td&gt;';
    }

    if ($users_only) {
        $str .= '&lt;td&gt;'.$$e2node{realname}.'&lt;/td&gt;';
        $str .= '&lt;td&gt;'.$$e2node{email}.'&lt;/td&gt;';
    }

    $str .= '&lt;/tr&gt;';
}
$str .= '&lt;/table&gt;';

# What I would like to do now is put the update start value in its box

return $str;

## dammit, delete the bloody thing until I know why it causes errors
##sub boldifsmall {
##    my ($number, $limit) = @_;
##    my $text = $number;
##    $text = '&lt;b&gt;'.$number.'&lt;/b&gt;' if $number &lt;= $limit;
##    return $text;
##}

%]



&lt;hr&gt;
&lt;h4 id=&quot;nodeshells&quot;&gt;Nodes by user&lt;/h4&gt;

Like user search, but dispensing with all the sorting and filters, since I only want the most recent, including nodeshells. I want this for newbies and irregular users, mainly to track down their contribution of nodeshells versus nodes.

[%
my $str = htmlcode('openform', '');
$str .= 'User: '.$query-&gt;textfield('username');
$str .= ' limit: '.$query-&gt;textfield('limit', '100').'&lt;br&gt;';
$str .= $query-&gt;radio_group('show_what', ['writeups','nodeshells','e2nodes'], 'writeups').'&lt;br&gt;';
$str .= htmlcode('closeform', '');

my $username  = $query-&gt;param('username');
my $limit = $query-&gt;param('limit');
return $str unless ($username and $limit);


my $user = getNode($username, 'user');
return $str.&quot;No such user $username&quot; unless $user;

my $show_type;
if ($query-&gt;param('show_what') eq 'writeups')
    {$show_type = 'writeup';}
else
    {$show_type = 'e2node';}
my $nodeshells_only = ($query-&gt;param('show_what') eq 'nodeshells');
# To add: an option of all (requires SELECT * FROM node,writeup).
# Another problem: limit of e.g. 100 nodeshells selects 100 e2nodes
#     and only displays the lesser number that are nodeshells

my $qh = $DB-&gt;getDatabaseHandle()-&gt;prepare (
    'SELECT * FROM node
     WHERE author_user = '.getId($user)
     .' AND type_nodetype = '.getId(getType($show_type))
     .' ORDER BY createtime DESC'
     .' LIMIT 0,'.$limit
    );
$qh-&gt;execute();
my @nodes;
while (my $node = $qh-&gt;fetchrow_hashref()) {
    push(@nodes, $node);
}
$qh-&gt;finish();

my $ct = 0;
my $e2node;
my $is_nodeshell;
foreach my $node (@nodes) {
    if ($nodeshells_only) {
        $e2node = getNodeById($$node{node_id});
        # looks damned redundant to me, but needs it to work
        next if defined $$e2node{group};
    }
    $str .= '&lt;br&gt;'.$$node{node_id}.' '.linkNodeTitle($$node{title});
    $ct++;
}
$str .= '&lt;br&gt;No nodes to list for '.linkNodeTitle($username).'.' unless $ct;

return $str;

%]



&lt;hr&gt;
&lt;h4 id=&quot;update&quot;&gt;Update&lt;/h4&gt;
Now for some relatively harmless field on which to practise updating. Let's adapt the [Renunciation Chainsaw|Change author] code to work on nodeshells. (Though in fact the [Quick Rename] code is much easier to understand.)
[%
my $str = htmlcode('openform', '');
$str .= 'Nodeshell: '.$query-&gt;textfield('nodeshell').'&lt;br&gt;';
$str .= 'Old creator: '.$query-&gt;textfield('oldcreator');
$str .= 'New creator: '.$query-&gt;textfield('newcreator').'&lt;br&gt;';
$str .= htmlcode('closeform', '');

my $nodeshell  = $query-&gt;param('nodeshell');
my $oldcreator = $query-&gt;param('oldcreator');
my $newcreator = $query-&gt;param('newcreator');
return $str unless ($nodeshell and $oldcreator and $newcreator);
# $oldcreator not strictly necessary, but is sanity check

my $nodeshellh = getNode($nodeshell, 'e2node');
return $str.'No such e2node '.linkNodeTitle($nodeshell) unless $nodeshellh;
my $oldcreatorh = getNode($oldcreator, 'user');
return $str.'No such user '.linkNodeTitle($oldcreator) unless $oldcreatorh;
my $newcreatorh = getNode($newcreator, 'user');
return $str.'No such user '.linkNodeTitle($newcreator) unless $newcreatorh;

unless ($$nodeshellh{createdby_user} == $$oldcreatorh{user_id})
    {return $str.linkNodeTitle($nodeshell).' was not created by '.linkNodeTitle($oldcreator);}

$nodeshellh-&gt;{createdby_user} = $$newcreatorh{user_id};
$nodeshellh-&gt;{author_user}    = $$newcreatorh{user_id};
updateNode($nodeshellh, -1);

$str .= 'Okay, reassigned '.linkNodeTitle($nodeshell).' from '.$oldcreator.' to '.$newcreator;
return $str;
%]
</doctext>
  <node_id>1723170</node_id>
  <title>the wertperch occasional playground</title>
</node>

<node>
  <type_nodetype>13</type_nodetype>
  <doctext>[%
######################################################################
# encodeLinks
# Encode new-format links in the form [foo&lt;bar&gt;] and [foo&lt;bar&gt;|baz]
# into an HTML-orthogonal form [foo[bar]] and [foo[bar]|baz]
#
my $encodeLinks = sub {
# sub encodeLinks {
  my ($html) = @_;
  $html =~ s/ (\[  [^\]\|]*) &lt; ([^\]\|]*) &gt; (  ( \| [^\]]* \] )
                                             | \] )
            / $1 .'['. $2 .']'. $3
            /gxe;
  $html;
};

my $decodeLinks = sub {
# sub decodeLinks {
  my ($html) = @_;
  $html =~ s/ (\[  [^\]\|]*) \[ ([^\]\|]*) \] (  ( \| [^\]]* \] )
                                               | \] )
            / $1 .'&lt;'. $2 .'&gt;'. $3
            /gxe;
  $html;
};

######################################################################
# cleanupHTML
# This function cleans up ragged HTML (such as may be encountered in a
# writeup), performing three main functions:
#   * Tag screening, a la htmlScreen
#   * Tag balancing, ensuring that all tags are closed
#   * Table sanitisation, ensuring table elements are correctly nested.
# 
# Limitations:
#   * Input is assumed to be HTML 4.0, not XHTML.
#   * Tags with optional closing elements are not explicitly closed.
#   * HTML does not recognise the XML empty element format, so we do not
#     look for it explicitly.
#
# Benchmarking on a Pentium M indicates that this process is
# approximately 3% faster than the existing htmlScreen. 
#
# Algorithm features:
#   * Scans tags with m//g construct
#   * Stacks and unstacks nested tags on finding opening and closing
#     tags.
#   * Validates tags using a (persistent) memoisation cache mapping
#     source tags to 'approved' tags with invalid tags or attributes
#     stripped. Since most tags appearing in writeups will be repeated
#     many times (eg. the '&lt;p&gt;' tags) the majority of tags should be
#     found in this cache.
#   * Enforces correct table element nesting using a map of 
#       tag -&gt; valid parent tag
#     For any element which has such a tag, the immediate superior
#     (ie. top of the stack) must match.
# 
my $cleanupHTML = sub {
# sub cleanupHTML {
  my ($text, $approved, $preapproved_ref) = @_;
  my @stack;
  my ($result, $tag, $ctag);
  # Compile frequently-used regular exprs
  my $open_tag = qr'^&lt;(\w+)(.*?)&gt;(.*)'ms;
  my $close_tag = qr'^&lt;/(\w+)(.*?)&gt;(.*)'ms;
  # Separate regexps to handle the (unlikely) case we encounter an
  # incomplete tag. The positional matches are the same as above.
  my $incomplete_open_tag = qr'^&lt;(\w+)(.*)(.*)'ms;
  my $incomplete_close_tag = qr'^&lt;/(\w+)(.*)(.*)'ms;
  my $key;                      # Cache key
  my $approved_tag;
  my $outer_text;
  # Map of nested tags to mandatory direct parents.
  my %nest = ('tr' =&gt; 'table',
              'td' =&gt; 'tr',
              'td' =&gt; 'tr');
  my $nest_in;
  # Optional-close tag names. Mapping with a hash seems to be something like 
  # twice as quick as using a single regexp.
  my %no_close = ('p' =&gt; 1, 'br' =&gt; 1, 'hr' =&gt; 1,
                  'img' =&gt; 1, 'input' =&gt; 1, 'link' =&gt; 1);

  # Delete any incomplete tags. These may be the result of truncating
  # source HTML, eg. for Cream of the Cool.
  $text =~ s/&lt;[^&gt;]*$//;

  # Scan tags by recognising text starting with '&lt;'. Experiments with
  # Firefox show that malformed opening tags (missing the closing '&gt;')
  # still count as opened tags, so we follow this behaviour.
  for ($text =~ m{(^[^&lt;]+|&lt;[^&lt;]+)}mig) {
    if (/$open_tag/ || /$incomplete_open_tag/) {
      # Opening tag.
      $key = $1.$2;
      $tag = lc $1;
      $outer_text = $3;
      $approved_tag = $preapproved_ref-&gt;{$key};
      # Handle miss in the pre-approved tag map
      unless (defined($approved_tag)) {
        $approved_tag = tagApprove('', $1, $2, $approved) || '';
        $preapproved_ref-&gt;{$key} = $approved_tag;
      }
      # Check correct nesting, and disapprove if not!
      if ($nest_in = $nest{$tag}
          &amp;&amp; $nest_in ne $stack[$#stack]) {
        $approved_tag = undef;
      }
      if ($approved_tag) {
        push @stack, $tag;
      }
      $result .= $approved_tag.$outer_text;
    } elsif (/$close_tag/ || /$incomplete_close_tag/) {
      # Closing tag
      my $closing;
      my @popped;
      $tag = lc $1;
      $key = '/'.$1.$2;
      $outer_text = $3;
      $approved_tag = $preapproved_ref-&gt;{$key};
      unless (defined($approved_tag)) {
        $approved_tag = tagApprove('/', $1, $2, $approved) || '';
        $preapproved_ref-&gt;{$key} = $approved_tag;
      }
      if ($approved_tag) {
        # Before closing this element, close any unclosed elements
        # which have been opened since then. We find the matching
        # closing element by digging through the stack to find the
        # matching opening tag.
        # On encountering a close tag for an unopened tag, we dig
        # through the entire stack, and restore it on reaching the
        # bottom without finding the tag. This sounds fairly
        # expensive, but we make the following assumptions:
        #   1. Unopened close tags will be infrequent in the source
        #      HTML, and
        #   2. The stack will be short as structures are typically not
        #      deeply nested, hence searching and restoring it will be
        #      inexpensive.
        for (;;) {
          $ctag = pop @stack;
          push @popped, $ctag;
          if ($ctag eq $tag) {
            # Found the tag.
            last;
          } elsif (defined($ctag)) {
            # Insert an extra closing tag.
            $closing .= &quot;&lt;/$ctag&gt;&quot; unless $no_close{$ctag};
          } else {
            # Closed something which was never opened. Just ignore it.
            s/^[^&gt;]*&gt;?//;             # remove the tag
            @stack = reverse @popped; # restore the stack.
            $closing = '';            # no closing tags needed
            last;
          }
        }
      }
      $result .= $closing.$approved_tag.$outer_text;
    } else {
      # Plain text at the beginning of the text.
      $result .= $_;
    }
  }
  # Close any remaining unclosed tags
  while (defined($ctag = pop @stack)) {
    $result .= &quot;&lt;/$ctag&gt;&quot; unless $no_close{$ctag};
  }
  # Clear the prepapproved cache if it's too large.
  if (int(keys(%$preapproved_ref)) &gt; 200) {
    %$preapproved_ref = ();
  }
  return $result;
};




######################################################################
# Test superdoc
my $result;

$result = '&lt;h1&gt;Gimme some crummy HTML&lt;/h1&gt;'.htmlcode('openform')
          . $query-&gt;textarea(-name =&gt; 'html', -cols =&gt; 60, -rows =&gt; 10)
          . htmlcode('closeform');
if ($query-&gt;param('html')) {
  my $h = $query-&gt;param('html');
  # A subset of the allowed writeup HTML tags to test.
  my $approved = {
    p =&gt; 'align', br =&gt; '',
    h1 =&gt; '', h2 =&gt; '', h3 =&gt; '',
    b =&gt; '', i =&gt; '',
    ul =&gt; '', li =&gt; '', ol =&gt; '', em =&gt; '',
    blockquote =&gt; '',
  };
  my $preapproved = {};
  $h = $encodeLinks-&gt;($h);
  my $b = $cleanupHTML-&gt;($h, $approved, $preapproved);
  $b = $decodeLinks-&gt;($b);
  $result .= '&lt;h1&gt;Cleaned HTML source&lt;/h1&gt;&lt;pre&gt;'.encodeHTML($b, 1).'&lt;/pre&gt;'
             . '&lt;h1&gt;Cleaned HTML&lt;/h1&gt;'.$b;
  $result .= '&lt;h1&gt;Info&lt;/h1&gt;&lt;p&gt;'.((split(/&lt;/, $h))-1).' tags, '
             . length($h).' characters.&lt;/p&gt;';
}

my $src = '&lt;pre&gt;'.encodeHTML($NODE-&gt;{doctext}, 1).'&lt;/pre&gt;';
$src =~ s{\[}{&amp;#091;}g;
$result .= '&lt;h1&gt;Perl source&lt;/h1&gt;'.$src;
$result;
%]
</doctext>
  <node_id>1988606</node_id>
  <title>test cleanupHTML</title>
</node>

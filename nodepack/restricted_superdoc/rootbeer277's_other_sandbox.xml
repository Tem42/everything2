<node>
  <type_nodetype>13</type_nodetype>
  <doctext>&lt;p&gt;[%
my $id = 1503725;
my $altDisp = 'hidden user';

#return '&lt;a href=' . urlGen({node_id=&gt;$id}) . '&gt;' . ((defined $altDisp) ? $altDisp : getNodeById($id)-&gt;{title}) . '&lt;/a&gt;';
return linkNode($id, ((defined $altDisp) ? $altDisp : getNodeById($id)-&gt;{title}));
%]&lt;/p&gt;

&lt;p&gt;[% 
my $str = $query-&gt;start_form(&quot;POST&quot;, $query-&gt;script_name);
$str .= $query-&gt;end_form; 
$str =~ s/&lt;/&amp;lt;/g; 
return $str; 
%]

&lt;p&gt;[%
htmlcode('settype','1987014,status,cur_status')
%]
&lt;p&gt;
 &lt;span style=&quot;color:black;&quot;&gt;&amp;#9733;&lt;/span&gt;
 &lt;span style=&quot;color:red;&quot;&gt;&amp;#9733;&lt;/span&gt;
 &lt;span style=&quot;color:orange;&quot;&gt;&amp;#9733;&lt;/span&gt;
 &lt;span style=&quot;color:yellow;&quot;&gt;&amp;#9733;&lt;/span&gt;
 &lt;span style=&quot;color:green;&quot;&gt;&amp;#9733;&lt;/span&gt;
 &lt;span style=&quot;color:blue;&quot;&gt;&amp;#9733;&lt;/span&gt;
 &lt;span style=&quot;color:indigo;&quot;&gt;&amp;#9733;&lt;/span&gt;
 &lt;span style=&quot;color:violet;&quot;&gt;&amp;#9733;&lt;/span&gt;
&lt;/p&gt;

[%
my $text = &quot;&lt;b&gt;test&lt;/b&gt;&quot;;
my $text2 = &quot;\x3Cb\x3Etest&lt;/b&gt;&quot;;

#$text2 =~ s/&lt;/\x3C/g;
#$text2 =~ s/&gt;/\x3E/g;

#$text2 =~ s/&lt;/&amp;lt;/g;
#$text2 =~ s/&gt;/&amp;gt;/g;
return ($text . &quot; &quot; . $text2);
%]

[%
# [^&gt;]
my $sampletext = '&lt;html&gt;
	&lt;head&gt;&lt;title&gt;comment test raw text&lt;/title&gt;&lt;/head&gt;
	&lt;body&gt;
		&lt;p&gt;
			This is a test of the HTML comment system.  
			&lt;i&gt;This is my second [sentence].&lt;/i&gt;  
			&amp;lt;!-- &lt;b&gt;This is my third [sentence].&lt;/b&gt;  --&gt;
			&amp;lt;!--This is my [fourth] sentence.--&gt;
		&lt;/p&gt;
	&lt;/body&gt;
&lt;/html&gt;';
#$sampletext =~ s/&lt;!--.*?--&gt;//g;
return breakTags(parseLinks(screenTable(htmlScreen($sampletext))));
%]
[%
# [^&gt;]
my $sampletext = '&lt;html&gt;
	&lt;head&gt;&lt;title&gt;comment test with pre-stripping comments&lt;/title&gt;&lt;/head&gt;
	&lt;body&gt;
		&lt;p&gt;
			This is a test of the HTML comment system.  
			&lt;i&gt;This is my second [sentence].&lt;/i&gt;  
			&lt;!-- &lt;b&gt;This is my third [sentence].&lt;/b&gt;  --&gt;
			&lt;!--This is my [fourth] sentence.--&gt;
		&lt;/p&gt;
	&lt;/body&gt;
&lt;/html&gt;';
$sampletext =~ s/&lt;!--.*?--&gt;//g;
return breakTags(parseLinks(screenTable(htmlScreen($sampletext))));
%]
[%
# [^&gt;]
my $sampletext = '&lt;html&gt;
	&lt;head&gt;&lt;title&gt;comment test without pre-stripping comments&lt;/title&gt;&lt;/head&gt;
	&lt;body&gt;
		&lt;p&gt;
			This is a test of the HTML comment system.  
			&lt;i&gt;This is my second [sentence].&lt;/i&gt;  
			&lt;!-- &lt;b&gt;This is my third [sentence].&lt;/b&gt;  --&gt;
			&lt;!--This is my [fourth] sentence.--&gt;
		&lt;/p&gt;
	&lt;/body&gt;
&lt;/html&gt;';
#$sampletext =~ s/&lt;!--.*?--&gt;//g;
return breakTags(parseLinks(screenTable(htmlScreen($sampletext))));
%]

&lt;hr&gt;&lt;hr&gt;&lt;hr&gt;

&lt;p&gt;[%
my $usernode = getNodeById(1503725);
my $fillednode = getNodeById(980113);
my $nodeshell = getNodeById(1684349);
my @nodearray;
push (@nodearray, $usernode, $fillednode, $nodeshell);
my $str;
foreach my $ND (@nodearray) {
     my $curType = $$ND{type}{title};
     my $em1 = &quot;&lt;i&gt;&quot;;
     my $em2 = &quot;&lt;/i&gt;&quot;;
     $em1 = $em2 = &quot;&quot; if ($$ND{'group'} || $curType ne 'e2node');
#     $em1 = $em2 = &quot;&quot; if ($APP-&gt;searchNodeName($ND)) || $curType ne 'e2node');
     $str .= &quot;&lt;br&gt;&quot; . $em1 . linkNode($ND) . $em2 . &quot; yay&quot;; }
return $str;
%]&lt;/p&gt;

&lt;p&gt;[%
my ($type) = 1893266;
my $str;

$str.='&lt;strong&gt;Set the type:&lt;/strong&gt;&lt;span title=&quot;Sets the general category for your writeup, which helps identify the type of content in writeup display listings.&quot;&gt;';

my (@WRTYPE) = getNodeWhere({type_nodetype =&gt; getId(getType('writeuptype'))});

my %items;

my $isEd = exists $HTMLVARS{'group_content editors'}{getId($USER)} || exists $HTMLVARS{'group_gods'}{getId($USER)};

foreach (@WRTYPE) {
	next if (!$isEd &amp;&amp; (lc($$_{title}) eq 'definition'));
	next if (!$isEd &amp;&amp; (lc($$_{title}) eq 'lede'));
	$items{getId($_)} = $$_{title};
}
#$items{$type} = '('.$type.')' if !defined($items{$type});
my @idlist = sort { $a &lt;=&gt; $b } keys(%items);

$str.=$query-&gt;popup_menu('writeup_wrtype_writeuptype', 
  \@idlist, $type, \%items) . '&lt;/span&gt;';

$str;
%]&lt;/p&gt;

[% htmlcode('setwriteuptype',1893266) %]
[% htmlcode('setwriteuptype',0) %]


&lt;p&gt;[%
my $node_id = 1982553;
my $str;
my $node = getNodeById($node_id);
my $parent = getNodeById($node-&gt;{'parent_debatecomment'});
$str .= &quot; &amp;#91;$$parent{'title'}&amp;gt;$$node{'node_id'}|LinkToMe&amp;#93\n&quot;;

return $str;
%]&lt;/p&gt;

&lt;p&gt;[% #getNode(getNodeById(1984038)-&gt;{'parent_e2node'})-&gt;{'title'} %]&lt;/p&gt;

[% 
#my $e2node = getNodeById(1916377);
#my $group = $e2node-&gt;{'group'};
#y $str;
#foreach (@$group)
#    {
#    $str .= &quot;&lt;p&gt; &quot;. getNodeById($_)-&gt;{'title'} . &quot; by &quot; . getNode(getNodeById($_)-&gt;{'author_user'})-&gt;'title'}
#    }
#return $str;
%]

[% 
#my $deparent = getNodeById(1984552);
#$deparent-&gt;{'parent_e2node'} = &quot;1916377&quot;;
#$deparent-&gt;{'parent_e2node'} = &quot;&quot;;
#updateNode($deparent, -1); 
#return (&quot;&lt;p&gt;Parented or Deparented node&lt;/p&gt;&quot;);
%]

[%
#my $removefrom = getNodeById(364471);
#my $toremove = getNodeById(1984552);
#removeFromNodegroup($removefrom, $toremove, -1);
#return (&quot;&lt;p&gt;Removed from node&lt;/p&gt;&quot;);
%]

[% 
#my $addto = getNodeById(99532);
#my $toadd = getNodeById(1984615);
#insertIntoNodegroup($addto, -1, $toadd);
#return(&quot;&lt;p&gt;Added to node&lt;/p&gt;&quot;);
%]

&lt;p&gt;nodetype: [% return getNode($$NODE{type_nodetype})-&gt;{title}; %]&lt;/p&gt;

&lt;p&gt; [% return (getNodeWhere({title=&gt;'coolnodes'},&quot;nodegroup&quot;)); %] &lt;/p&gt;
&lt;p&gt; [% return (getNode('coolnodes',&quot;nodegroup&quot;)-&gt;{node_id}); %] &lt;/p&gt;

&lt;pre&gt;[%
#This was for generating a sample error log
#my $filename = &quot;/tmp/everything.errlog&quot;;
#my $line;
#my $output;
#
#open(ERRLOG, $filename);
#for $line (&lt;ERRLOG&gt;) { $output .= $line; }
#close ERRLOG;
#$output =~ s/&amp;/&amp;amp;/g;
#$output =~ s/&lt;/&amp;lt;/g;
#$output =~ s/&gt;/&amp;gt;/g;
#$output =~ s/\[/&amp;#91;/g;
#$output =~ s/\]/&amp;#93;/g;
#return $output;
%]&lt;/pre&gt;

&lt;p&gt;[% 
my $usernode = getNode('rootbeer275', 'user');
if ($usernode) { return $usernode-&gt;{node_id}; }
else { (return &quot;Could not find user.&quot;); }
%]&lt;/p&gt;

[% # return(&quot;&lt;p&gt;Testing ceil function with ceil(10/3): &quot; . ceil(10/3) . &quot;&lt;/p&gt;&quot;); %]

[% 

my $thisnode = getNodeById(332933);
my @thisnodegroup = @{ $$thisnode{group} };
my $nodegrouponeline = join(', ', @{ $$thisnode{group} });
return $nodegrouponeline;

%]

[% return(&quot;\n&lt;p&gt;If you &quot; . linkNode(&quot;101&quot;, &quot;sign up&quot;) . &quot;, you can see more user information.&lt;/p&gt;&quot;) if ($$USER{title} eq &quot;rootbeer277&quot;); %]

&lt;p&gt;[% $ENV{SCRIPT_NAME}; %]

&lt;p&gt;Create room level is [% $HTMLVARS{roomCreateLevel} %]
&lt;p&gt;GhettoAardvark chanops test: [% my $isChanop = exists($HTMLVARS{'group_chanops'}{1318017}); %]
&lt;p&gt;Arthur Conan Doyle chanops test: [% my $isChanop = exists($HTMLVARS{'group_chanops'}{1791357}); %]

[{openform}]
&lt;p&gt;Randomly generate a floating point number between 0 and 180 (pi/2).  Take the sine.  Multiply by the span of xdy (x times y minus x).  Round up.  Add x. (wait something's not right, rethink this)&lt;/p&gt;
&lt;input type=&quot;text&quot; name=&quot;roll&quot;&gt;
&lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;
&lt;p&gt;roll: 
[% 
my $rollstr = $query-&gt;param(&quot;roll&quot;) || 0;
my $totalizer = 0;
#if ($rollstr == 0)
#	{ return(); }
## remove spaces
$rollstr =~ s/\s//g; 
## ex: 3d6+1
if ($rollstr =~ m/((\d+)d(\d+)(([\+-])(\d+))?)/)
	{
if ($2 &gt; 1000) { $2 = 1000; }
	for (my $i=0; $i&lt;$2; $i++)
		{ $totalizer += int(rand($3)+1); }
	if ($5 eq '+') { $totalizer += $6; }
	if ($5 eq '-') { $totalizer -= $6; }
	return ($1 .&quot; &amp;rarr; &quot;. $totalizer);
	}
## ex: 3d6	
#elsif ($rollstr =~ m/(\d+)d(\d+)/)
#	{ return ($1 * int(rand($2)+1)); }
#	{
#	for (my $i=0; $i&lt;$1; $i++)
#		{ $totalizer += int(rand($2)+1); }
#	return $totalizer;
#	}
else { return (&quot;Invalid roll&quot;); }
%]
&lt;/p&gt;
&lt;/form&gt;

&lt;hr&gt;&lt;hr&gt;

&lt;style&gt;
.secret { background: #C0FFEE; }
/* .secret ( background: #DEC0DE; } */
.living td { border: 1px solid red; padding: 8px; }
.dead td { border: 1px solid black; padding: 8px; }
&lt;/style&gt;

&lt;p&gt;Test as Aerobe (a cop) would see it (except where cyan)&lt;/p&gt;

&lt;h3&gt;Cycle #5&lt;/h3&gt;
&lt;p&gt;Currently: Day&lt;/p&gt;
&lt;p&gt;Hours until Night: 4&lt;/p&gt;

&lt;ul&gt;&lt;b&gt;Last Cycle Results:&lt;/b&gt;
&lt;li&gt;rootbeer277, who was probably townie aligned, died durnig the last cycle!&lt;/li&gt;
&lt;li&gt;GhettoAardvark, who was probably mafia aligned, died during the last cycle!&lt;/li&gt;
&lt;/ul&gt;

&lt;form&gt;
&lt;p&gt;Message your alliance: &lt;small&gt;(Townies /msg every player)&lt;/small&gt;&lt;br&gt;
&lt;input type=text size=30 maxlength=200&gt;&lt;input type=submit name=send value=send&gt;
&lt;/form&gt;

&lt;form&gt;
&lt;h3&gt;Living Players&lt;/h3&gt;
&lt;table class=living&gt;
	&lt;tr&gt;
		&lt;th&gt;Player&lt;/th&gt;
		&lt;th&gt;Lynch Votes&lt;/th&gt;
		&lt;th&gt;Vote&lt;br&gt;&lt;input type=radio&gt;Abstain&lt;/th&gt;
		&lt;th&gt;Alliance&lt;/th&gt;
		&lt;th&gt;Special&lt;/th&gt;
	&lt;tr&gt;
		&lt;td&gt;&lt;strong&gt;Aerobe&lt;/strong&gt;&lt;br&gt;cop&lt;/td&gt;
		&lt;td&gt;Lynch Votes: 2&lt;br&gt;(Simulacron3)&lt;br&gt;(Augustine)&lt;/td&gt;
		&lt;td&gt;&amp;nbsp;&lt;/td&gt;
		&lt;td&gt;townie&lt;/td&gt;
		&lt;td&gt;&amp;nbsp;&lt;/td&gt;
	&lt;tr&gt;
		&lt;td&gt;Augustine&lt;br&gt;&lt;span class=secret&gt;townie&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;Lynch Votes: 0&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Lynch Player&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;townie&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;&lt;input type=submit name=investigate value=investigate&gt;&lt;/span&gt;&lt;/td&gt;

	&lt;tr&gt;
		&lt;td&gt;mkb&lt;br&gt;&lt;span class=secret&gt;godfather&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;Lynch Votes: 0&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Lynch Player&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;mafia&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;&lt;input type=submit name=investigate value=investigate&gt;&lt;/span&gt;&lt;/td&gt;
	&lt;tr&gt;
		&lt;td&gt;sangsoo&lt;br&gt;&lt;span class=secret&gt;mafia&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;Lynch Votes: 0&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Lynch Player&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;mafia&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;&lt;input type=submit name=investigate value=investigate&gt;&lt;/span&gt;&lt;/td&gt;
	&lt;tr&gt;
		&lt;td&gt;Senso&lt;br&gt;&lt;span class=secret&gt;Head Mason&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;Lynch Votes: 1&lt;br&gt;(Senso)&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Lynch Player&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;Mason&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;&lt;input type=submit name=investigate value=investigate&gt;&lt;/span&gt;&lt;/td&gt;
	&lt;tr&gt;
		&lt;td&gt;Simulacron3&lt;br&gt;&lt;span class=secret&gt;townie&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;Lynch Votes: 1&lt;br&gt;(Aerobe)&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Lynch Player&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;townie&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;&lt;input type=submit name=investigate value=investigate&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/table&gt;
&lt;/form&gt;

&lt;h3&gt;Dead Players&lt;/h3&gt;
&lt;table class=dead&gt;
	&lt;tr&gt;
		&lt;th&gt;Player&lt;/th&gt;
		&lt;th&gt;Probable&lt;br&gt;Alignment&lt;/th&gt;
	&lt;tr&gt;
		&lt;td&gt;rootbeer277&lt;/td&gt;
		&lt;td&gt;townie&lt;/td&gt;
	&lt;tr&gt;
		&lt;td&gt;GhettoAardvark&lt;/td&gt;
		&lt;td&gt;mafia&lt;/td&gt;
&lt;/table&gt;

&lt;p&gt;Test as mkb (a mafia) would see it (except where cyan)&lt;/p&gt;

&lt;h3&gt;Cycle #6&lt;/h3&gt;
&lt;p&gt;Currently: Night&lt;/p&gt;
&lt;p&gt;Hours until Day: 3&lt;/p&gt;

&lt;ul&gt;&lt;b&gt;Last Cycle Results:&lt;/b&gt;
&lt;li&gt;Aerobe, who was probably townie aligned, died durnig the last cycle!&lt;/li&gt;
&lt;/ul&gt;

&lt;form&gt;
&lt;p&gt;Message your alliance: &lt;small&gt;/msg{mkb sangsoo}&lt;/small&gt;&lt;br&gt;
&lt;input type=text size=30 maxlength=200&gt;&lt;input type=submit name=send value=send&gt;
&lt;/form&gt;

&lt;form&gt;
&lt;h3&gt;Living Players&lt;/h3&gt;
&lt;table class=living&gt;
	&lt;tr&gt;
		&lt;th&gt;Player&lt;/th&gt;
		&lt;th&gt;Lynch Votes&lt;/th&gt;
		&lt;th&gt;Vote&lt;br&gt;(Day Only)&lt;/th&gt;
		&lt;th&gt;Murder Votes&lt;/th&gt;
		&lt;th&gt;Muder?&lt;br&gt;&lt;input type=radio&gt;Abstain&lt;/th&gt;
		&lt;th&gt;Alliance&lt;/th&gt;
		&lt;th&gt;Special&lt;/th&gt;
	&lt;tr&gt;
		&lt;td&gt;Aerobe&lt;br&gt;&lt;span class=secret&gt;cop&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;Murder Votes: 0&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Murder Player&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;townie&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&amp;nbsp;&lt;/td&gt;
	&lt;tr&gt;
		&lt;td&gt;Augustine&lt;br&gt;&lt;span class=secret&gt;townie&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;Murder Votes: 0&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Murder Player&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;townie&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&amp;nbsp;&lt;/td&gt;

	&lt;tr&gt;
		&lt;td&gt;&lt;strong&gt;mkb&lt;/strong&gt;&lt;br&gt;godfather&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;Murder Votes: 0&lt;/td&gt;
		&lt;td&gt;&amp;nbsp;&lt;/td&gt;
		&lt;td&gt;mafia&lt;/td&gt;
		&lt;td&gt;&amp;nbsp;&lt;/td&gt;
	&lt;tr&gt;
		&lt;td&gt;sangsoo&lt;br&gt;mafia&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;Murder Votes: 0&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Murder Player&lt;/td&gt;
		&lt;td&gt;mafia&lt;/td&gt;
		&lt;td&gt;&amp;nbsp;&lt;/td&gt;

	&lt;tr&gt;
		&lt;td&gt;Senso&lt;br&gt;&lt;span class=secret&gt;Head Mason&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;Murder Votes: 0&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Murder Player&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;Mason&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&amp;nbsp;&lt;/td&gt;
	&lt;tr&gt;
		&lt;td&gt;Simulacron3&lt;br&gt;&lt;span class=secret&gt;townie&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;N/A&lt;/td&gt;
		&lt;td&gt;Murder Votes: 0&lt;/td&gt;
		&lt;td&gt;&lt;input type=radio&gt;Murder Player&lt;/td&gt;
		&lt;td&gt;&lt;span class=secret&gt;townie&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/table&gt;

&lt;/form&gt;

&lt;h3&gt;Dead Players&lt;/h3&gt;
&lt;table class=dead&gt;
	&lt;tr&gt;
		&lt;th&gt;Player&lt;/th&gt;
		&lt;th&gt;Probable&lt;br&gt;Alignment&lt;/th&gt;
	&lt;tr&gt;
		&lt;td&gt;rootbeer277&lt;/td&gt;
		&lt;td&gt;townie&lt;/td&gt;
	&lt;tr&gt;
		&lt;td&gt;GhettoAardvark&lt;/td&gt;
		&lt;td&gt;mafia&lt;/td&gt;
&lt;/table&gt;
		

&lt;hr&gt;&lt;hr&gt;
&lt;p&gt;PRE tag remover test for CotC&lt;/p&gt;

[%
my $testtext = &quot;&lt;ul&gt;&quot;;
my $oldtext = '&lt;h3&gt;header&lt;/h3&gt;&lt;!-- this comment should be removed --&gt;&lt;p&gt;This is a test of the pre tag fixer.&lt;/p&gt;
&lt;pre&gt;This sentence and the chart are in PRE tags:
 Number | Letter
 -------+-------
      1 | A
     10 | J
    100 | Error!&lt;/pre&gt;
&lt;p&gt;The following is also in PRE tags:&lt;/p&gt;
&lt;PRE&gt;l_______    _____________________________________________________________________________________    ____________________________________________________l
&lt;p&gt;End of line, Dillenger.&lt;/p&gt;';

my $text = $oldtext;

while ($text =~ /&lt;pre&gt;(.*?)&lt;\/pre&gt;/si)
	{
	my $temp = $1;
	$temp =~ s/\n/&lt;br&gt;/g;
	$text =~ s/&lt;pre&gt;(.*?)&lt;\/pre&gt;/&lt;tt&gt;$temp&lt;\/tt&gt;/si;
	$text =~ s/  / &amp;nbsp;/g;
	}

# finally, if there's a pre left over but no /pre, replace that.
if ($text =~ /&lt;pre&gt;(.*?)$/si)
	{
	my $temp = $1;
	$temp =~ s/\n/&lt;br&gt;/g;
	$text =~ s/&lt;pre&gt;(.*?)$/&lt;tt&gt;$temp&lt;\/tt&gt;/si;
	$text =~ s/  / &amp;nbsp;/g;
	}

return $text;

## End new test

%]

&lt;hr&gt;&lt;hr&gt;
&lt;p&gt;Returns current nodetype&lt;/p&gt;

[%
return $$NODE{type}{title};

#return $$VSETTINGS{voteFooter};

%]

&lt;hr&gt;&lt;hr&gt;
&lt;p&gt;Get links for unsearchable titles&lt;/p&gt;

[%
##use this to get links to problem titles
my $badnodetitle = 'neckbeard';
return linkNode(getNode($badnodetitle, &quot;e2node&quot;)-&gt;{node_id}, 'Bad node title');
%]

&lt;hr&gt;&lt;hr&gt;
&lt;p&gt;/drag command testing&lt;/p&gt;

[%

if ($$USER{lockedin} &gt; time)
{
return (&quot;current time : &quot; . time . &quot; lockedin: $$USER{lockedin} remaining: &quot; . ceil(($$USER{lockedin} - time)/60));
}

unless ($$USER{title} == 'rootbeer277' ||
	$$USER{title} == 'other_admin')
	{return &quot;&lt;p&gt;Sorry but this superdoc is not ready for display&lt;/p&gt;&quot;;}

	my $testexplainoutput = &quot;&lt;ul&gt;&quot;;
my $dbh = $DB-&gt;getDatabaseHandle();
my $csr = $dbh-&gt;prepare(
	&quot;EXPLAIN SELECT reputation
	FROM node
	WHERE author_user = 1503725
	LIMIT 1&quot;);
$csr-&gt;execute();
while (my $s = $csr-&gt;fetchrow_hashref)
	{
	foreach my $keys (sort(keys(%{$s}))) 
		{ $testexplainoutput .= &quot;\n\t&lt;li&gt;&quot; . $keys . &quot;: &quot; . $s-&gt;{$keys} . &quot;&lt;/li&gt;&quot;; }
	}

my $str = &quot;&lt;p&gt;Hello rootbeer or rootbeer-approved entity.&lt;/p&gt;&quot;;

$str .= &quot;&lt;ul&gt;&lt;li&gt;&quot; . $$USER{author_user}; 
$str .= &quot;&lt;li&gt;&quot; . $$USER{document_id}; 
$str .= &quot;&lt;li&gt;&quot; . $$USER{node_id}; 
$str .= &quot;&lt;LI&gt;&quot; . $$USER {setting_id};
$str .= &quot;&lt;LI&gt;&quot; . $$USER{user_id} . &quot;&lt;/ul&gt;&quot;;

$str .= &quot;\n&lt;p&gt;&quot; . $$NODE{title};

$str .= linkNode(1729381, getNode(1729381)-&gt;{title} . &quot;'s&quot;);

$testexplainoutput .= &quot;&lt;/ul&gt;&quot;;
#return $str . linkNode(getId(getNode(&quot;C++: why input is &gt;&gt; and output is &lt;&lt;&quot;, &quot;e2node&quot;)));
return $testexplainoutput . $str . &quot; &quot; . getId(getNode(&quot;C++: why input is &gt;&gt; and output is &lt;&lt;&quot;, &quot;e2node&quot;)) . &quot; &quot; . time . &quot; &quot; . $USER-&gt;{votesleft};
%]</doctext>
  <node_id>1947085</node_id>
  <title>rootbeer277's other sandbox</title>
</node>

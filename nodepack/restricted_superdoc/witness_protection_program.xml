<node>
  <type_nodetype>13</type_nodetype>
  <doctext>[%

return &quot;Not ready for primetime.&quot;;

my $uid = getId($USER);
my $isRoot = exists $HTMLVARS{group_gods}{$uid};
return unless $isRoot;

my $userTitle;
my $userX;
my ($formstr,$finalstr);
my ($newUserName, $oldUserName);

$formstr.=htmlcode('openform','');
$formstr.=&quot;User Name To Replace: &quot;. $query-&gt;textfield(&quot;oldname&quot;,&quot;&quot;). &quot;&lt;br /&gt;&quot;;
$formstr.=&quot;New User Name: &quot;.$query-&gt;textfield(&quot;newname&quot;,&quot;&quot;). &quot;&lt;br /&gt;&quot;;
$formstr.=htmlcode('closeform','');


if ((defined($query-&gt;param(&quot;newname&quot;)))&amp;&amp;(defined($query-&gt;param(&quot;oldname&quot;)))) {
	$oldUserName=$query-&gt;param(&quot;oldname&quot;);
	$oldUserName =~ s/\t//g;

	$userX=getNode($oldUserName,'user');
	return &quot;No such user!&quot;.$formstr unless $userX;

	$newUserName=$query-&gt;param(&quot;newname&quot;);
	$newUserName =~ s/\t//g;

	my @allUserTypes = ('user', 'usergroup', 'superdoc', 'restricted_superdoc', 'nodetype', 'document', 'superdocnolinks');

	if (lc($oldUserName) ne lc($newUserName)) {
		my $olduser;
		foreach(@allUserTypes) {
			$olduser = getNode($newUserName, $_) unless $olduser;
		}
		if($olduser) {
			return 'Sorry, '.linkNode($olduser) .&quot; already exists.  Pick a variation, or try another name...&lt;p&gt;\n&quot; . $formstr;  
		}

		my $match=lc($newUserName);
		$match=~s/[_ ]/_/g;
		$match=~s/\\/\\\\/g;

		my $oldmatch=lc($oldUserName);
		$oldmatch=~s/[_ ]/_/g;
		$oldmatch=~s/\\/\\\\/g;
if ($oldmatch ne $match) {
		my $closeuser = 0;
		foreach(@allUserTypes) {
			$_ = 'type_nodetype='.getId(getType($_));
		}
		my $csr =$DB-&gt;sqlSelectMany('title','node','title like '.$dbh-&gt;quote($match).' AND (' . join(' OR ',@allUserTypes) . ')');

		my $match2 = lc($newUserName);
		$match2 =~ s/[_ ]/[_ ]/g;
		$match2 =~ s/\\/\\\\/g;
		while(my ($u) = $csr-&gt;fetchrow) {
			next unless $u =~ /^$match2$/i;
			$closeuser = 1;
		}
		if($closeuser){
			return &quot;Sorry, the new name clashes with a username which already exists.  Pick a variation, or try another name...&lt;p&gt;\n&quot; . $formstr;  
		}
}
	}


#TODO useralias table check, once that table is made

unless ($newUserName =~ /\w/) {
	return 'Uh...  how about some more letters?' . $formstr;
}

if($newUserName =~ /[\[\]\&lt;\&gt;\&amp;]/) {
	return &quot;That username has a special character in it.  Try something else.&lt;p&gt;&quot; . $formstr;

}

if(($newUserName =~ /^\s/) or ($newUserName =~ /\s$/)) {
	return &quot;Sorry, the new name may not have spaces at either end.&quot; . $formstr;
}

if ($newUserName =~ /\_/ &amp;&amp; $newUserName =~ / /) {
	return 'Usernames cannot contain both spaces and underscores.' . $formstr;
}

if($newUserName =~ /\s\s/) {
	return &quot;Please don't use multiple spaces in a row.&lt;p&gt;&quot; . $formstr;
}

$$userX{title} = $newUserName;
updateNode($userX,-1);
$finalstr=$oldUserName.&quot; has been renamed to &quot;.$newUserName.&quot;.&quot;;
}




return $finalstr.&quot; &quot;.$formstr;

%]</doctext>
  <node_id>1690024</node_id>
  <title>Witness Protection Program</title>
</node>

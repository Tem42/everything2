<node>
  <type_nodetype>13</type_nodetype>
  <doctext>&lt;div style=&quot;width:600px&quot;&gt;
&lt;p&gt;This page manages the IP addresses which are barred from &lt;strong&gt;creating new accounts&lt;/strong&gt;.  Except for very extreme circumstances, we don't block pageloads as [Guest User].&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This tool should ONLY be used to block access at the IP level for users whose primary accounts have been locked if they continue to abuse our hospitality.&lt;/strong&gt; ~~[dann[user]]&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;!-- ' --&gt;
[%
local $SIG{__WARN__} = sub {};

###############################################
# intFromAddr($ipString)
###############################################
# Takes an IP addr like 1.23.45.67
#  and returns the integer equivalent
# Returns undef for invalid IPs
###############################################
my $intFromAddr = sub {
  my $addr = shift;
  return undef unless $addr =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
  return undef if $1 &gt; 255 or $2 &gt; 255 or $3 &gt; 255 or $4 &gt; 255;
  return (
    (int $1) * 256*256*256 
    + (int $2) * 256 * 256
    + (int $3) * 256
    + (int $4)
  );
};

###############################################
# rangeMinMax($ipString)
###############################################
# Takes a CIDR IP spec like 1.23.45.67/16
#  and returns:
#  ($valid, $minAddr, $maxAddr)
# On error:
#   All values are undef if the spec
#   is invalid.
# On success:
#   $valid is 1
#   $minAddr and $maxAddr are integer values
#    for the min and max IPs in the requested
#    range
###############################################
my $rangeMinMax = sub {
	my $cidrIP = shift;
	return () unless $cidrIP =~ m/^(\d{1,3}\.\d{1,3}.\d{1,3}\.\d{1,3})\s*\/(\d{1,2})$/;
	my $addr = $1;
	my $intAddr = &amp;$intFromAddr($addr);
	return () unless $intAddr;
	my $bits = $2;
	# A maks longer than 32 bits is meaningless and
	#  a mask with fewer than 8 bits is dangerous
	return () unless $bits &lt; 33 &amp;&amp; $bits &gt; 7;

	my $maxAddr = &amp;$intFromAddr('255.255.255.255');
	my $mask = ($maxAddr &lt;&lt; (32 - $bits)) &amp; $maxAddr;

	my $validAddr = 1;
	my $addrMin   = $intAddr &amp; $mask;
	my $addrMax   = $addrMin + ($maxAddr &gt;&gt; $bits);

	return ($validAddr, $addrMin, $addrMax);
};
###############################################
###############################################
# End functions
###############################################


### Remove an IP from the blacklist if requested
if (my $idToRemove = $query-&gt;param(&quot;remove_ip_block_ref&quot;)) {
	
	$idToRemove = int $idToRemove;

	my $selectAddrFromBlacklistSQL = &lt;&lt;SQLEND;
SELECT
	IFNULL(ipblacklist.ipblacklist_ipaddress,
		CONCAT(ipblacklistrange.min_ip, ' - ', ipblacklistrange.max_ip)
	) ipblacklist_ipaddress
	FROM ipblacklistref
	LEFT JOIN ipblacklist
		ON ipblacklistref.ipblacklistref_id =
			ipblacklist.ipblacklistref_id
	LEFT JOIN ipblacklistrange
		ON ipblacklistref.ipblacklistref_id =
			ipblacklistrange.ipblacklistref_id
	WHERE ipblacklistref.ipblacklistref_id = $idToRemove
SQLEND
	my @blacklistAddressArray =
		@ { $dbh-&gt;selectall_arrayref($selectAddrFromBlacklistSQL) };
	my $blAddress = $blacklistAddressArray[0]-&gt;[0];
	
	my $removeFromBlacklistSQL = &lt;&lt;SQLEND;
DELETE ipblacklist, ipblacklistref, ipblacklistrange
	FROM ipblacklistref
	LEFT JOIN ipblacklist
		ON ipblacklistref.ipblacklistref_id =
			ipblacklist.ipblacklistref_id
	LEFT JOIN ipblacklistrange
		ON ipblacklistref.ipblacklistref_id =
			ipblacklistrange.ipblacklistref_id
	WHERE ipblacklistref.ipblacklistref_id = $idToRemove
SQLEND

	my $saveRaise = $dbh-&gt;{RaiseError};
	$dbh-&gt;{RaiseError} = 1;
	eval { $dbh-&gt;do($removeFromBlacklistSQL) };
	$dbh-&gt;{RaiseError} = $saveRaise;

	if($@){
		return &quot;There was an error removing this block from the database: &quot;
			. $dbh-&gt;errstr()
			;
	}else{
		$DB-&gt;sqlInsert(&quot;seclog&quot;, {
			'seclog_node'=&gt;$$NODE{node_id}, 
			'seclog_user' =&gt; $$USER{node_id}, 
			'seclog_details'=&gt; &quot;$$USER{title} removed $blAddress} from the IP blacklist.&quot;
		});

		return &quot;The IP \&quot;$blAddress\&quot; was successfully removed from the blacklist.&quot;;
	}

}


### Add an IP to the blacklist if requested
if($query-&gt;param(&quot;add_ip_block&quot;)){
	my $ipToAdd = $query-&gt;param(&quot;bad_ip&quot;);
	return &quot;You must list an IP to block.&quot; unless $ipToAdd;
	my ($isRangeAddr, $rangeMin, $rangeMax) = &amp;$rangeMinMax($ipToAdd);
	$ipToAdd = $DB-&gt;quote($ipToAdd);
	
	my $blockReason = $query-&gt;param(&quot;block_reason&quot;);
	$blockReason = $DB-&gt;quote($blockReason);
	return &quot;You must give a reason to block this IP.&quot; unless $blockReason;

my $addBlacklistRefSQL = &lt;&lt;SQLEND;
INSERT INTO ipblacklistref
	()
	VALUES
	()
SQLEND

	my $addBlacklistSQL = &lt;&lt;SQLEND;
INSERT INTO ipblacklist
	(ipblacklist_user, ipblacklist_ipaddress, ipblacklist_comment
	 , ipblacklistref_id)
	VALUES ($$USER{user_id}, $ipToAdd, $blockReason, LAST_INSERT_ID())
SQLEND

	$addBlacklistSQL = &lt;&lt;SQLEND if $isRangeAddr;
INSERT INTO ipblacklistrange
	(banner_user_id, min_ip, max_ip, comment
	 , ipblacklistref_id)
	VALUES ($$USER{user_id}, $rangeMin, $rangeMax, $blockReason
		, LAST_INSERT_ID())
SQLEND

	my $saveRaise = $dbh-&gt;{RaiseError};
	$dbh-&gt;{RaiseError} = 1;
	eval {
		$dbh-&gt;do($addBlacklistRefSQL);
		$dbh-&gt;do($addBlacklistSQL);
	};
	$dbh-&gt;{RaiseError} = $saveRaise;
	
	if ($@){
		return &quot;There was an error adding this block to the database: &quot;
			. &quot;&lt;pre&gt;&quot; . encodeHTML($addBlacklistSQL) . &quot;&lt;/pre&gt;&quot;
			. $dbh-&gt;errstr()
			;
	}else{
		$ipToAdd = encodeHTML($ipToAdd);
		$DB-&gt;sqlInsert(&quot;seclog&quot;, {
			'seclog_node'=&gt;$$NODE{node_id}, 
			'seclog_user' =&gt; $$USER{node_id}, 
			'seclog_details'=&gt; &quot;$$USER{title} added $ipToAdd to the IP blacklist: \&quot;$blockReason.\&quot;&quot;
		});

		return &quot;The IP \&quot;$ipToAdd\&quot; was successfully added to the blacklist.&quot;;
	}

}

%]
&lt;/h3&gt;



&lt;h3&gt;Blacklist an IP&lt;/h3&gt;

[%
local $SIG{__WARN__} = sub {};

my $bad_ip = $query-&gt;param(&quot;bad_ip&quot;);

my @alreadyBanned =
	$DB-&gt;sqlSelect(
		'ipblacklist_comment'
		, 'ipblacklist'
		, 'ipblacklist_ipaddress = ' . $DB-&gt;quote($bad_ip)
	) if defined $bad_ip;

my $str = &quot;&quot;;

if (scalar @alreadyBanned != 0 &amp;&amp; !$query-&gt;param('add_ip_block')) {
	$str .= 
		&quot;&lt;p&gt;&lt;strong&gt;&quot;
		. encodeHTML($bad_ip) . &quot; was already banned for the reason: &quot;
		. encodeHTML($alreadyBanned[0])
		. &quot;&lt;/strong&gt;&lt;/p&gt;&quot;
		;
}

$str .= 
$query-&gt;start_form
.$query-&gt;hidden('node_id', getId($NODE))
.'&lt;div&gt;&lt;strong&gt;IP Address&lt;/strong&gt;&lt;br /&gt;'
.$query-&gt;textfield('bad_ip', $bad_ip, 20)
.'&lt;/div&gt;&lt;br /&gt;'
.'&lt;div&gt;&lt;strong&gt;Reason&lt;/strong&gt;&lt;br /&gt;'
.$query-&gt;textfield('block_reason', '', 50)
.'&lt;/div&gt;&lt;br /&gt;'
.$query-&gt;submit('add_ip_block', 'Please blacklist this IP.')
.$query-&gt;end_form;
return $str;
%]

[{blacklistedIPs}]
</doctext>
  <node_id>1948146</node_id>
  <title>IP Blacklist</title>
</node>

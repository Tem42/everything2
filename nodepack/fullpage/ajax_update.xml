<node>
  <node_id>1873513</node_id>
  <doctext>[%

use JSON;
my $mode = $query-&gt;param(&quot;mode&quot;) || &quot;var&quot;;
$PAGELOAD-&gt;{noparsecodelinks} = 'nolinks' ;

my $from_json_catch = sub {

	my ($args, $htmlcode) = @_;
	my $result = {};

	eval {
		$result = from_json($args);
	};

	if ($@) {
		htmlErrorUsers(
			'AJAX Update caught an error running \'from_json($args)\''
			. ' for htmlcode ' . $htmlcode
			, $@
			, &quot;Args had value $args and type &quot; . ref $args
			);
		$result = {};
	}

	return $result;
};

if ($mode eq 'message') {
	my $op = getNode('message','opcode');
	$query-&gt;param('message',$query-&gt;param(&quot;msgtext&quot;));
	my @deleteParams = split(',',$query-&gt;param(&quot;deletelist&quot;));
	foreach (@deleteParams) {
		$query-&gt;param($_,1);
	}
	eval($$op{code});
	return $query-&gt;param('sentmessage');
}

if ($mode eq 'vote') {
	my $op = getNode('vote','opcode');
	eval($$op{code});
	return 0;
}

if ($mode eq 'getNodeInfo') {
	my $type = $query-&gt;param(&quot;type&quot;);
	my $title = $query-&gt;param(&quot;title&quot;);
	my $field = $query-&gt;param(&quot;field&quot;);
	return unless ($type &amp;&amp; $title &amp;&amp; $field);

	my $tempNode = getNode($title,$type);
	return unless $tempNode;

	return $tempNode-&gt;{$field};
}

if ($mode eq 'annotate') {

	my $action = $query-&gt;param(&quot;action&quot;);
	return unless $action;

	if ($action eq 'delete') {
		my $aNode = $query-&gt;param(&quot;annotation_id&quot;);
		my $aLoc = $query-&gt;param(&quot;location&quot;);
		return unless ($aNode &amp;&amp; $aLoc);
		$DB-&gt;sqlDelete(&quot;annotation&quot;,{ann_node =&gt; $aNode, ann_location =&gt; $aLoc});
		return &quot;annotation deleted&quot;;
	}

	if ($action eq 'retrieve') {
		my $aNode = $query-&gt;param(&quot;annotation_id&quot;);
		return unless $aNode;
		my $commentList = $DB-&gt;sqlSelectMany(&quot;ann_text, ann_location&quot;,&quot;annotation&quot;,&quot;ann_node = $aNode&quot;);
		my $cSet;
		while (my $c = $commentList-&gt;fetchrow_hashref) {
			$cSet.=$$c{ann_location}.&quot;,&quot;.$$c{ann_text}.&quot;,&quot;;
		}
		return $cSet;

	}

	if ($action eq 'add') {
		my $aNode = $query-&gt;param(&quot;annotation_id&quot;);
		my $aText = $query-&gt;param(&quot;comment&quot;);
		my $aLoc = $query-&gt;param(&quot;location&quot;);
		return unless ($aNode &amp;&amp; $aText &amp;&amp; $aLoc);
		$DB-&gt;sqlInsert(&quot;annotation&quot;,{ann_node =&gt; $aNode, ann_text =&gt; $aText, ann_location =&gt; $aLoc});
		return &quot;annotation added&quot;;
	}
}

if ($mode eq 'update') {
	return '&quot;update&quot; mode retired for security reasons:&lt;br&gt;
		see e2.ajax.update code for current implementation';
}

if ($mode eq 'getlastmessage') {
	return $DB-&gt;sqlSelect('max(message_id)', 'message use index(foruser_tstamp) ', &quot;for_user=0 and room=0&quot;, &quot;&quot;);
}


if ($mode eq 'markNotificationSeen') {
	htmlcode('ajaxNotificationSeen',$query-&gt;param(&quot;notified_id&quot;));
}

if ($mode eq 'checkNotifications') {
return to_json(htmlcode('notificationsJSON'));
}


if ($mode eq 'checkCools') {
return to_json(htmlcode('coolsJSON'));
}

if ($mode eq 'checkMessages') {
return to_json(htmlcode('showchatterJSON'));
}

if ($mode eq 'checkFeedItems') {
return to_json(htmlcode('userFeedJSON'));
}

if ($mode eq 'deleteFeedItem') {
  return unless $query-&gt;param('feeditem_nodeid');
  nukeNode(getNodeById($query-&gt;param('feeditem_nodeid')), $USER)
}



$NODE = getNodeById(124);

%]
</doctext>
  <type_nodetype>451267</type_nodetype>
  <title>Ajax Update</title>
</node>

<node>
  <doctext>[%
#generates messages for a given user
#optional query parameters:
#	fromuser = username of person to filter msgs from
#	messageidstart = digits

return '' if $APP-&gt;isGuest($USER);
my $str;
use XML::Generator;
use Everything::XML;
my $nl = &quot;\n&quot;;
my $UID = getId($USER) || 0;
my $XG = new XML::Generator;

#get messages from a certain user
my $limits = 'for_user='.$UID;
my $filterUser = $query-&gt;param('fromuser');
if($filterUser) {
	$filterUser = getNode($filterUser, 'user');
	$filterUser = $filterUser ? $$filterUser{node_id} : 0;
}
$limits .= ' AND author_user='.$filterUser if $filterUser;

#get messages above a certain ID
if( (defined $query-&gt;param('messageidstart')) &amp;&amp; length($query-&gt;param('messageidstart')) ) {
	my $idMin = $query-&gt;param('messageidstart');
	if($idMin =~ /^(\d+)$/) {
		$idMin=$1;
		$limits .= ' AND message_id &gt; '.$idMin;
	}
}

my $csr = $DB-&gt;sqlSelectMany('*', 'message', $limits, 'order by tstamp, message_id');

my $lines;
my @msgs;
while(my $MSG = $csr-&gt;fetchrow_hashref) {
	$lines++;
	push @msgs, $MSG;
}

$str.=$XG-&gt;INFO({site =&gt; $Everything::CONF-&gt;site_url, sitename =&gt; $Everything::CONF-&gt;system-&gt;{site_name},  servertime =&gt; scalar(localtime(time))}, 'Rendered by the Private Message XML Ticker').$nl;
$str .= $XG-&gt;info({
	'for_user'=&gt;$UID,
	'for_username'=&gt;Everything::XML::makeXmlSafe($$USER{title}),
	'messagecount'=&gt;scalar(@msgs),
}).$nl;
my $UG;	#current usergroup message is from

foreach my $MSG (@msgs) {
	my $FUSER = getNodeById($$MSG{author_user});
	my $forGroupID = $$MSG{for_usergroup} || 0;
	my $msgInfo = {
#		author =&gt; Everything::XML::makeXmlSafe($$FUSER{title}),
		time =&gt; $$MSG{tstamp},
		message_id =&gt; $$MSG{message_id}
	};

	$$msgInfo{'author'} = (defined $FUSER) ? Everything::XML::makeXmlSafe($$FUSER{title}) : '!!! user with node_id of '.$$MSG{author_user}.' was deleted !!!';	#SourceForge 574781 Removal from usergroups SE!s old ticker

	if($forGroupID) {
		$$msgInfo{for_usergroup_id} = $forGroupID;
		$UG = getNodeById($forGroupID) || undef;
		$$msgInfo{for_usergroup} = (defined $UG) ? $UG-&gt;{title} : '!!! usergroup with node_id of '.$forGroupID.' was deleted !!!';
	}

	$str.=$nl.&quot;\t&quot;.$XG-&gt;message($msgInfo, $nl.Everything::XML::makeXmlSafe($$MSG{msgtext}));
}


$nl.$XG-&gt;PRIVATE_MESSAGES($str.$nl);

%]</doctext>
  <type_nodetype>451267</type_nodetype>
  <title>private message XML ticker</title>
  <node_id>600299</node_id>
</node>

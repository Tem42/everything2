<node>
  <nltext></nltext>
  <parent_container>175986</parent_container>
  <icon>http://static.everything2.com/otherusers.gif</icon>
  <nlgoto>0</nlgoto>
  <node_id>91</node_id>
  <type_nodetype>9</type_nodetype>
  <iconHeight>27</iconHeight>
  <iconWidth>170</iconWidth>
  <nlcode>[{changeroom:Other Users}]
[%

my $str;
my $wherestr = &quot;&quot;;

$$USER{in_room} = int($USER-&gt;{in_room});
$USER-&gt;{in_room} = 0 unless getNodeById($USER-&gt;{in_room});
if ($$USER{in_room}) {
   $wherestr = &quot;room_id=$$USER{in_room} OR room_id=0&quot;;
}

my $untrueGods = getVars(getNode(&quot;Untrue Gods&quot;,&quot;setting&quot;));


my $UID = $$USER{node_id};
my $isRoot = exists $HTMLVARS{'group_gods'}{$UID};
my $isCE = $isRoot || exists $HTMLVARS{'group_content editors'}{$UID};
my $isChanop = exists $HTMLVARS{'group_chanops'}{$UID};

unless ($isCE || $$VARS{infravision}) {
  $wherestr.=' AND ' if $wherestr;
  $wherestr.='visible=0';
}

my $showActions = $$VARS{showuseractions} ? 1 : 0;

my @doVerbs;
my @doNouns;
if ($showActions)
{
  @doVerbs = ('eating', 'watching', 'stalking', 'filing',
              'noding', 'amazed by', 'tired of', 'crying for',
              'thinking of', 'fighting', 'bouncing towards',
              'fleeing from', 'diving into', 'wishing for',
              'skating towards', 'playing with',
              'upvoting', 'learning of', 'teaching',
              'getting friendly with', 'frowned upon by',
              'sleeping on', 'getting hungry for', 'touching',
              'beating up', 'spying on', 'rubbing', 'caressing', 
              ''        # leave this blank one in, so the verb is
                        # sometimes omitted
  );
  @doNouns = ('a carrot', 'some money', 'EDB', 'nails', 'some feet',
              'a balloon', 'wheels', 'soy', 'a monkey', 'a smurf',
              'an onion', 'smoke', 'the birds', 'you!', 'a flashlight',
              'hash', 'your speaker', 'an idiot', 'an expert', 'an AI',
              'the human genome', 'upvotes', 'downvotes',
              'their pants', 'smelly cheese', 'a pink elephant',
              'teeth', 'a hippopotamus', 'noders', 'a scarf',
              'your ear', 'killer bees', 'an angst sandwich',
              'Butterfinger McFlurry'
  );
}

my $showRoots = 1;
my $showContentEds = 1;

my $newbielook = $isRoot || $isCE;

my $powStructLink = '&lt;a href='.urlGen({'node'=&gt;'E2 staff', 'nodetype'=&gt;'superdoc'})
                    . ' style=&quot;text-decoration: none;&quot; ';
my $linkRoots = $powStructLink . 'title=&quot;e2gods&quot;&gt;@&lt;/a&gt;';
my $linkCEs = $powStructLink . 'title=&quot;Content Editors&quot;&gt;$&lt;/a&gt;';

my $linkChanops = $powStructLink.'title=&quot;chanops&quot;&gt;+&lt;/a&gt;';

my $linkBorged = '&lt;a href='.urlGen({'node'=&gt;'E2 FAQ: Chatterbox',
                                   'nodetype'=&gt;'superdoc'})
                 .' style=&quot;text-decoration: none;&quot; title=&quot;borged!&quot;&gt;&amp;#216;&lt;/a&gt;';

# no ordering from databse - sorting done entirely in perl, below
my $csr = $DB-&gt;sqlSelectMany('*', 'room', $wherestr);

# N-Wing steals JB's room topic thing, and uses it for users
my $userInfo = getVars(getNode('User Info', 'setting')) || 0;

my $num = 0;
my $sameUser;   # if the user to show is the user that is loading the page
my $userID;     # only get member_user from hash once
my $n;          # nick
my $is1337 = ($userID == 220 || $userID == 322);        # nate and hemos

# Fetch users to ignore.
my $ignorelist = $DB-&gt;sqlSelectMany('ignore_node', 'messageignore',
                                    'messageignore_id='.$UID);
my (%ignore, $u);
$ignore{$u} = 1 while $u = $ignorelist-&gt;fetchrow();
$ignorelist-&gt;finish;

my @noderlist;
while(my $U = $csr-&gt;fetchrow_hashref())
{
  $num++;
  $userID = $$U{member_user};

  my $jointime = htmlcode('convertdatetoepoch',
                          getNodeById($userID) -&gt; {createtime});


  my $userVars = getVars(getNodeById($userID));

  my ($lastnode,$lastnodetime, $lastnodehidden);
  my $lastnodeid =  $userVars -&gt; {lastnoded};
  if ($lastnodeid) {
    $lastnode = getNodeById($lastnodeid);
    $lastnodetime = $lastnode -&gt; {publishtime};
    $lastnodehidden = $lastnode -&gt; {notnew};

    # Nuked writeups can mess this up, so have to check there really
    # is a lastnodetime.
    $lastnodetime = htmlcode('convertdatetoepoch',$lastnodetime)
      if $lastnodetime;
  }

  #Haven't been here for a month or haven't noded?
  if( time() - $jointime  &lt; 2592000 || !$lastnodetime ){
    $lastnodetime = 0;
  }

  my $thisChanop = htmlcode('isinUsergroup', $userID, 'chanops' , 'recurse');

  # Separating mere coders from the gods...

  my $notReallyRoot = exists $$untrueGods{$userID};

  $sameUser = $UID==$userID;
  next if $ignore{$userID} &amp;&amp; !$isRoot;
  $n = $$U{nick};
  my $nameLink = linkNode($userID, $n);

  if (htmlcode('isSpecialDate','halloween')) {
    my $bAndBrackets = 1;
    my $costume = $$userVars{costume};
    if (defined $costume and $costume ne '') {
      $costume = encodeHTML($$userVars{costume}, $bAndBrackets);
      $nameLink = linkNode($userID, $costume);
    }
  }
  $nameLink = '&lt;strong&gt;'.$nameLink.'&lt;/strong&gt;' if $sameUser || $is1337;

  my $flags='';
  if ($showRoots &amp;&amp; exists $HTMLVARS{'group_gods'}{$userID}
      &amp;&amp; !$notReallyRoot) {
    $flags .= $linkRoots;
  }

  if ($newbielook &amp;&amp; !$is1337) {
    my $getTime = $DB-&gt;sqlSelect(&quot;datediff(now(),createtime)+1 as &quot;
                                 .&quot;difftime&quot;,&quot;node&quot;,&quot;node_id=&quot;
                                 .$userID.&quot; having difftime&lt;31&quot;);

    if ($getTime) {
      if ($getTime&lt;=3) {
        $flags.='&lt;strong class=&quot;newdays&quot; title=&quot;very new user&quot;&gt;'.$getTime.'&lt;/strong&gt;';
      }
      else {
        $flags.='&lt;span class=&quot;newdays&quot; title=&quot;new user&quot;&gt;'.$getTime.'&lt;/span&gt;'
      }
    }
  }

  if ($showContentEds &amp;&amp; exists $HTMLVARS{'group_content editors'}{$userID}) {
    $flags .= $linkCEs;
  }

  $flags .= $linkChanops if $thisChanop;

  if ($isCE || $isChanop) {
    $flags .= $linkBorged if $$U{borgd}; # yes, no 'e' in 'borgd'
  }
  if ($$U{visible}) {
    $flags.='&lt;font color=&quot;#ff0000&quot;&gt;i&lt;/font&gt;';
  }

  if ($$U{room_id} != 0 and $$USER{in_room} == 0)
  {
    my $rm = getNodeById($$U{room_id});
    $flags .= linkNode($rm, '~');
  }

  $flags = ' &amp;nbsp;[' . $flags . ']' if $flags;

  my $nameLinkAppend;

  if ($showActions &amp;&amp; !$sameUser &amp;&amp; (0.02 &gt; rand())) {
    $nameLinkAppend = ' &lt;small&gt;is ' . $doVerbs[int(rand(@doVerbs))] 
                      . ' ' . $doNouns[int(rand(@doNouns))] 
                      . '&lt;/small&gt;';
  }

  # jessicaj's idea, link to a user's latest writeup
  if ($showActions &amp;&amp; (0.02 &gt; rand()) ) {
    if ((time() - $lastnodetime) &lt; 604800 # One week since noding?
        &amp;&amp; !$lastnodehidden) {
      my $lastnodeparent = getNodeById($$lastnode{parent_e2node});
      $nameLinkAppend = '&lt;small&gt; has recently noded '
                        . linkNode($lastnode,$$lastnodeparent{title})
                        . ' &lt;/small&gt;';
    }

  }

  $nameLink .= $nameLinkAppend;

  $n =~ tr/ /_/;
  if ($userInfo &amp;&amp; exists $$userInfo{$n}) {
    $nameLink .= '&lt;small&gt;'.$$userInfo{$n}.'&lt;/small&gt;';
  }

  my $thisnoder .= $nameLink . $flags;

  #Votes only get refreshed when user logs in
  my $activedays = $userVars -&gt; {votesrefreshed};

  # Gotta resort the noderlist by recent writeups and XP
  push @noderlist, {
        'noder' =&gt; $thisnoder
        , 'lastNodeTime' =&gt; $lastnodetime
        , 'activeDays' =&gt; $activedays
        , 'roomId' =&gt; $$U{room_id}
     };
}
$csr-&gt;finish;

return '&lt;em&gt;There are no noders in this room.&lt;/em&gt;' unless $num;
# sort by latest time of noding, tie-break by active days if
# necessary, [alex]'s idea
@noderlist = sort {
   ($$b{roomId} == $$USER{in_room}) &lt;=&gt; ($$a{roomId} == $$USER{in_room})
   || $$b{roomId} &lt;=&gt; $$a{roomId}
   || $$b{lastNodeTime} &lt;=&gt; $$a{lastNodeTime}
   || $$b{activeDays} &lt;=&gt; $$a{activeDays}
} @noderlist;

my $printRoomHeader = sub {
   my $roomId = shift;
   my $roomTitle = 'Outside';
   if ($roomId != 0) {
      my $room = getNodeById($roomId);
      $roomTitle = $room &amp;&amp; $$room{type}{title} eq 'room' ?
                        $$room{title} : 'Unknown Room';
   }
   return &quot;&lt;div&gt;$roomTitle:&lt;/div&gt;\n&lt;ul&gt;\n&quot;;
};

my $lastroom = $noderlist[0]-&gt;{roomId};
$str .= &quot;&lt;ul&gt;\n&quot;;
foreach my $noder(@noderlist)
{
   if ($$noder{roomId} != $lastroom) {
      $str .= &quot;&lt;/ul&gt;\n&quot;;
      $str .= &amp;$printRoomHeader($$noder{roomId});
   }

   $lastroom = $$noder{roomId};
   $str .= &quot;&lt;li&gt;$$noder{noder}&lt;/li&gt;\n&quot;;
}
$str .= &quot;&lt;/ul&gt;\n&quot;;

my $intro = '&lt;h4&gt;Your fellow users ('.$num.'):&lt;/h4&gt;';
$intro .= '&lt;div&gt;in '.linkNode($$USER{in_room}). ':&lt;/div&gt;' if $$USER{in_room};

return $intro . $str;
%]
</nlcode>
  <title>Other Users</title>
</node>

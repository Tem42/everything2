<node>
  <type_nodetype>150</type_nodetype>
  <maintain_nodetype>1156105</maintain_nodetype>
  <node_id>1156290</node_id>
  <title>debatecomment maintenance create</title>
  <maintaintype>create</maintaintype>
  <code>my ( $COMMENT ) = @_;
getRef( $COMMENT );

# A comment must be inserted in its parent's group, and its 
# parent_debatecomment and root_debatecomment fields 
# must be initialized correctly.   

my $PARENT = $query-&gt;param( &quot;debatecomment_parent_debatecomment&quot; );
getRef( $PARENT );

unless($PARENT) {
#	$$COMMENT{ 'root_debatecomment' } = getId( $COMMENT );
	nukeNode( $COMMENT, $USER );
	return;
}

# START if($PARENT)

#TODO somehow: let child be more restrictive than parent
my $restrict = $$PARENT{restricted} || 0;
if($restrict==0) {
	$restrict=923653;	#CE hack
} elsif($restrict==1) {
	$restrict=114;	#admin hack
}
my $restrictNode = getNodeById($restrict);
unless($restrictNode) {
	#ack! no group permission somehow!
	nukeNode($COMMENT, -1);
	return;
}
unless(Everything::isApproved($USER, $restrictNode) ||
       $APP-&gt;inUsergroup($USER,$restrictNode) ) {
	#not allowed to view parent, so can't post child
	nukeNode($COMMENT, -1);
	return;
}
$$COMMENT{restricted}=$restrict;

# my $title = $$PARENT{ 'title' };
# $title = 're: ' . $title unless ( $title =~ /^re:/ );
# $$COMMENT{ 'title' } = $title;
$$COMMENT{ 'parent_debatecomment' } = $PARENT-&gt;{node_id};

my $root_debatecomment = $query-&gt;param( 'debatecomment_root_debatecomment' );
$$COMMENT{ 'root_debatecomment' } = $root_debatecomment;

my $parentOwner=$$PARENT{ 'author_user' };
my $parentVars = getVars(getNodeById($parentOwner));
my $replyer = getNodeById($$COMMENT{ 'author_user' }) -&gt; {'title'};
my $msg = &quot;Attention, &lt;a href=\&quot;/user/$replyer\&quot;&gt;$replyer&lt;/a&gt; just replied to &quot;;

   $msg .= '&lt;a href=&quot;'. urlGenNoParams($root_debatecomment,1) .
            '#debatecomment_'.$$COMMENT{ 'node_id' }.'&quot;&gt;'.$$PARENT{ 'title' }.'&lt;/a&gt;.';

unless ($$parentVars{&quot;no_discussionreplynotify&quot;} 
        or $$COMMENT{ 'author_user' } == $$PARENT{ 'author_user'}) {
     htmlcode('sendPrivateMessage',{
	'author_id' =&gt; getId(getNode(&quot;Virgil&quot;,&quot;user&quot;)),
	'recipient_id' =&gt; $parentOwner,
	'message' =&gt; $msg
});
}

## BEGIN notification code

my $ug_id = $$COMMENT{ 'restricted' };

#notify *all* usergroup members that we have a new reply
my @uids = split ',', htmlcode('usergroupToUserIds',$ug_id);

my $replyNotification = getNode(&quot;newcomment&quot;,
                                &quot;notification&quot;) -&gt; {node_id};
use JSON;
foreach my $uid(@uids){

  #Don't notify the creator.
  next if($uid == $$USER{node_id});

  my $v = getVars( getNodeById($uid));

  #This curiously named value of &quot;settings&quot; in the user's vars refers
  #*only* to the notifications settings.
  next unless $$v{settings};

  my %notifications = from_json($$v{settings}-&gt;{notifications});

  if($notifications{$replyNotification} ){
my $notification_id = $replyNotification;
my $user_id = $uid;
    my $argSet = {uid =&gt; $$USER{node_id},
                  parent =&gt; $$PARENT{ 'node_id' },
                  reply =&gt; $$COMMENT{ 'node_id' },
                  root =&gt; $$COMMENT{ 'root_debatecomment' } };
    my $argStr = to_json($argSet);

my $addNotifier = htmlcode('addNotification', $notification_id, $user_id, $argStr);

  }
}

## END notification code


updateNode( $COMMENT, $USER );

my @group = @{ $$PARENT{ 'group' } } if $$PARENT{ 'group' };

insertIntoNodegroup( $PARENT, -1, [getId( $COMMENT )] );
#  END  if($PARENT)

#updateNode( $COMMENT, $USER );

#my @group = @{ $$PARENT{ 'group' } } if $$PARENT{ 'group' };

#insertIntoNodegroup( $PARENT, -1, [getId( $COMMENT )] );

# We need to kill an old node if the user hit the back arrow
# and created two nodes

#$DB-&gt;sqlUpdate( 'debatecomment', {-updated =&gt; 'now()'}, &quot;debatecomment_id=&quot; . getId( $PARENT ) );
</code>
</node>

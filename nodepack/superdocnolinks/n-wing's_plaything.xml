<node>
  <type_nodetype>1065266</type_nodetype>
  <doctext>&lt;div style=&quot;border: solid black 1px; padding: 5px;&quot;&gt;


&lt;div style=&quot;border: solid gray 2px; padding: 3px; magin: 2px;&quot;&gt;
&lt;p&gt;example regular expression expained: (from &lt;a href=[% urlGen({'node'=&gt;'addwriteup','type'=&gt;'htmlcode'}); %]&gt;addwriteup (htmlcode)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;
if( $$VARS{HideNewWriteups} || ($curTitle=~/^(?:dream|editor|root) Log: /i) ) {
	$checkIt=1;
} elsif($curTitle =~

/^(?:&lt;small&gt;&lt;small&gt;January|February|March|April|May|June|July|August|September|October|November|December&lt;/small&gt;&lt;/small&gt;) [1-9]\d?, \d+/i

) {
	$checkIt=1;
} else {
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;
There are two regular expressions used here, one for dream/editor/root logs, and one for day logs (shown on its own line, because it is so long).&lt;br /&gt;
The pipe &lt;code&gt;|&lt;/code&gt; is used for alternates. For example, &lt;code&gt;/foo|bar|fubar/&lt;/code&gt; will match &quot;foo&quot;, &quot;bar&quot;, or &quot;fubar&quot;.&lt;br /&gt;
Parenthesis &lt;code&gt;()&lt;/code&gt; are used to group, which are needed here because the pipe will go from the beginning to end of the regular expression. &lt;code&gt;/(foo|bar)fubar/&lt;/code&gt; matches &quot;fubar&quot; immediately preceded by either &quot;foo&quot; or &quot;bar&quot;. Without the parenthesis, &lt;code&gt;/foo|barfubar&lt;/code&gt; would match either &quot;foo&quot; or &quot;barfubar&quot;.&lt;br /&gt;
However, non-capturing parenthesis are used instead of normal parenthesis. (Huh?) Parenthesis &lt;em&gt;also&lt;/em&gt; capture whatever was matched inside of them, which can be accessed later using the Perl variables &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, et cetera. For the &lt;code&gt;/(foo|bar)fubar/&lt;/code&gt; example, if it was run against the string &quot;rabbarfubar&quot;, the entire regular expression would match on the &quot;barfubar&quot; part, and &lt;code&gt;$1&lt;/code&gt; would be &quot;bar&quot;.&lt;br /&gt;
If extended regular expressions are enabled, &lt;code&gt;(?&lt;/code&gt; ... &lt;code&gt;)&lt;/code&gt; allows one to do all sorts of crazy stuff. In this case, &lt;code&gt;(?:&lt;/code&gt; ... &lt;code&gt;)&lt;/code&gt; simply groups things as normal, but does not capture the result (store the part that matched), which means Perl has to do a tiny bit less work.&lt;br /&gt;
Due to the way regular expressions work, it is usually better to search for multiple string constants using pipes in a single regular expression than have a separate RE for each string constant.&lt;br /&gt;
&lt;code&gt;\d&lt;/code&gt; matches a single digit, 0 to 9. This does the same thing as &lt;code&gt;[0-9]&lt;/code&gt;.&lt;br /&gt;
A star, or asterisk, &lt;code&gt;*&lt;/code&gt; matches 0 or more times (and is not used above). A plus, &lt;code&gt;+&lt;/code&gt; matches 1 or more times. A question mark, &lt;code&gt;? &lt;/code&gt; matches 0 or 1 times.&lt;br /&gt;
When looking for the daylog, above, the section &lt;code&gt;[1-9]\d?&lt;/code&gt; in intended to match the day of the month: the first digit is 1 up to 9, and the optional second digit may be any digit. This actually matches a few more cases than we really want, like 42, but in this case it doesn't really matter, because a writeup about December 42, 2004 is probably cannon fodder, anyway. Likewise, the year can be 1 or more digits, and a leading 0 isn't something to be worried about.&lt;br /&gt;
Finally, the &lt;code&gt;i&lt;/code&gt; at the end of the regular expression, &lt;code&gt;/&lt;/code&gt; ... &lt;code&gt;/i&lt;/code&gt; means ignore case. This way, it still matches if some bozo hasn't grasped the purpose of the shift key.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;merge test:&lt;br /&gt;
[%
return unless $$USER{node_id}==9740;
return 'mAT=1' unless $query-&gt;param('mAT') eq '1';
my $theHTML = getVars(getNode('approved HTML tags',getType('setting')));
my $theMathML = getVars(getNode('approved MathML tags',getType('setting')));
$HTMLVARS{'approvedTagsListRef'} = [$theHTML, $theMathML];
htmlcode('mergeApprovedTags','');
my $theCombined = $HTMLVARS{'approvedTags'};
my $s='';
foreach(sort(keys(%$theCombined))) {
$s.=$_.' - '.$theCombined-&gt;{$_}.'&lt;br /&gt;
';
}
$s;
%]
&lt;br /&gt;:end merge test&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Your browser: [%
my $ua = $query-&gt;user_agent();
return '(not given)' unless (defined $ua) &amp;&amp; length($ua);
$ua = encodeHTML($ua, 1);
return '&lt;code&gt;'.$ua.'&lt;/code&gt;';
%]&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Strike test:&lt;br /&gt;
&lt;s&gt;&amp;lt;s&amp;gt;&amp;lt;/s&amp;gt;&lt;/s&gt;&lt;br /&gt;
&lt;strike&gt;&amp;lt;strike&amp;gt;&amp;lt;/strike&amp;gt;&lt;/strike&gt;&lt;br /&gt;
&lt;span style=&quot;text-decoration:line-through&quot;&gt;&amp;lt;span style=&quot;text-decoration:line-through&quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
[{openform}]
[%
my $str = '';
my $rot13 = $query-&gt;param('rot13');
if((defined $rot13) &amp;&amp; length($rot13)) {
	$str .= encodeHTML($rot13,1).&quot;&lt;br /&gt;\n&quot;;
	$rot13 =~ tr/A-Za-z/N-ZA-Mn-za-m/;
	$str .= encodeHTML($rot13,1).&quot;&lt;br /&gt;\n&quot;;
	$query-&gt;delete('rot13');
}
$str .= 'enter text to ROT-13: '.$query-&gt;textfield('rot13');
%]
[{closeform}]
&lt;/p&gt;

[%
return unless $$USER{node_id}==9740;
return unless $query-&gt;param('fix') eq 'spell';
my $sp=getNode('bad spellings en-US','setting') or return 'ack!';
my $spv=getVars($sp);
my @ks = keys(%$spv);
foreach(@ks) {
delete $spv-&gt;{$_} if index($_,' ')!=-1;
}
setVars($sp,$spv);
return '&lt;p&gt;did it&lt;/p&gt;';
%]

[%
#test sendPrivateMessageTest
return '' unless $$USER{node_id}==9740;
return 'you need to testmsg=1 or 2' unless $query-&gt;param('testmsg');
my $whichTest = $query-&gt;param('testmsg');
return 'testmsg=1 or 2' unless ($whichTest eq '1') || ($whichTest eq '2');
my $msg = '';

# $msg = 'test at '.localtime().' \n if you got this message, something went really wrong \n Sorry.';

#my $MSGMAXLEN = 255;
##$msg = ('}'.('*' x ($MSGMAXLEN-2)).'{') x 5;	#check auto-break
#my $ABC = 'abcdefghijklmnopqrstuvwxyz';
#my $ABCs = $ABC x 100;
#my $z=0;
#for(my $i=100;$i&lt;=length($ABCs);$i += 50) {
#	$msg .= $z?'}':'[';
#	$msg .= substr($ABCs,0,$i);
#	$msg .= $z?'{':']';
#	$msg .= ' ';
#	$z=!$z;
#}

#$msg = '(Hopefully, this goes to edev and editors...) New toy: a custom nodelet, that lets you have (almost) any text you want in it. Edit it at [Custom Nodelet Editor]. (You currently have to click the link to add it, but once it is out of beta, it will be added like a normal nodelet.) The length limit is pretty short (depending on your level), but it is easier to raise the limit than lower it. Also, I\'m taking suggestions for a better name than \'Custom Nodelet\'. Note: this is beta, so only you (plural) can use this. Your mission is to try to break it (and tell me if you do).';

$msg = 'Test message generated on '.scalar(localtime).'. You should NOT have gotten this. /msg N-Wing if you did. Sorry.';
my $ONO=0;
$ONO=1 if $query-&gt;param('ono') &amp;&amp; ($query-&gt;param('ono') eq '1');

my $DODEBUG = 2;

#build parameters
if($whichTest eq '1') {
	$HTMLVARS{msgparams} = {
	#	'author'=&gt;'EDB',
		'recipient'=&gt;['Content Editors','e2gods'],
		'message'=&gt;$msg,
		'ono'=&gt;$ONO,
	};
} else {	#2
	$HTMLVARS{msgparams} = {
		'recipient_id'=&gt;$$USER{node_id},
		'message'=&gt;$msg,
	};
	$DODEBUG=0;
}

#do it
#param 0:
#	1: don't delete params
#	2: debug mode (leave this on for testing!)
#	4: inline what said
&quot;&lt;p&gt;did it:&lt;br /&gt;\n&quot;.
htmlcode('sendPrivateMessageTest', (4 + $DODEBUG)).'&lt;/p&gt;';
%]

&lt;p&gt;
[%
#test msgField
return unless $$USER{node_id}==9740;
#return 'you need to doit=2' unless $query-&gt;param('doit') &amp;&amp; ($query-&gt;param('doit') eq '2');

my $str = htmlcode('openform').
htmlcode('msgField','blah,,,9740').
htmlcode('closeform');

$str;
%]
&lt;/p&gt;

&lt;p&gt;If you aren't [N-Wing|me]: &lt;big&gt;&lt;strong&gt;Be warned!&lt;/strong&gt;&lt;/big&gt; &lt;small&gt;(This is a place &lt;a href=[% urlGen({'node'=&gt;'N-Wing','type'=&gt;'user'}); %]&gt;I&lt;/a&gt; can test code and other crazy things without messing things up for everybody.)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;
[%
return; #unless $$USER{node_id}==9740;

my $str = '';

if(0) {
my $n = getNode('Messages', 'nodelet');
my $c = getNode('classic nodelets', 'nodeletgroup');
$str .= '&lt;p&gt;result: ' .
insertIntoNodegroup($n, $USER, $c)
. '&lt;/p&gt;';
;
#updateNode($c);
}

#if(0) {
#my $t = getNode('npb theme', 'theme');
#my $c = getNode('npb main container', 'container');
#insertIntoNodegroup($t, $USER, $c);
#}

###
### edev - how you edit Guest User
###
if(0) {
my $gu = getNode('Guest User','user');
my $v = getVars($gu);
#TODO add if not there, instead of just clearing
#$$v{displaypref_e2node}='displayfull';
$$v{nodelets}='262,457857,263,165437,174581';
#$$v{nodelets}='262,457857,263,165437,174581';
setVars($gu, $v);
}

$str;
%]
&lt;/p&gt;

&lt;p&gt;
[%
return 'All your base are belong to us!' if !isGod($USER);
#if anybody MUST edit this, comment out the following line, instead of deleting it; but it would be a good idea to leave the above check in
return 'You are a root user, but you\'re not N-Wing. And don\'t even think about editing this so you can see it! For now, try [N-Wing\'s super utility belt] instead.' if $$USER{title} ne 'N-Wing';

my $str = '';

if(0) {
my $revertNow =
#1;
#rand()&lt;0.1; #if things get really messed up, the default theme will eventually be restored
!$query-&gt;param('npbtheme');
$str .= &quot;&lt;big&gt;&lt;strong&gt;reverting to default theme&lt;/strong&gt;&lt;/big&gt;&lt;/p&gt;\n&lt;p&gt;&quot; if $revertNow;


my $tJukka = 415063;
my $tNPB = 945663;
my $tClassic = 415072;

$str .= 'prev: ' . $$VARS{themegeneralParent_container} . &quot;&lt;br /&gt;\n&quot;;
if($revertNow) {
delete $$VARS{themegeneralParent_container};
} else {
$$VARS{themegeneralParent_container} = $tNPB;
}
$str .= 'cur: ' . $$VARS{themegeneralParent_container};
}

#lets a writeup have any type
if(0) {
$str .= &quot;&lt;p&gt;Let a writeup have any type. For some reason, this doesn\'t stick if you edit the writeup again.\n&lt;table border=\&quot;1\&quot; cellpadding=\&quot;3\&quot; cellspacing=\&quot;1\&quot;&gt;&lt;tr&gt;&lt;td&gt;\n&quot;;
$str .= htmlcode('openform');
$str .= 'writeup id: ' . $query-&gt;textfield('wuid') . '&lt;br /&gt;';
$str .= 'type id: ' . $query-&gt;textfield('typeid') .
'&lt;small&gt;(251=idea, 177599=definiton, 364471=E2 Bugs, 838015=edev)&lt;/small&gt;&lt;br /&gt;';
my $WUID = $query-&gt;param('wuid');
my $TID = $query-&gt;param('typeid');
$WUID = getNodeById($WUID);
$str .= &quot;&lt;br /&gt;\n&quot;;
if($WUID) {
  if($$WUID{type_nodetype}!=117) { #FIXME 117
    $str .= $$WUID{node_id} . ' is not a writeup';
  } else {
    if($TID) {
      $$WUID{wrtype_writeuptype} = $TID;
      $str .= 'new type id=' . $TID . '=';
      my $thingy = getNodeById($TID);
      $str .= $$thingy{title};
      updateNode($WUID, -1);
    } else {
      my $tmp = $$WUID{wrtype_writeuptype};
      $str .= 'current type id=' . $tmp . '=';
      my $thingy = getNodeById($tmp);
      $str .= $$thingy{title};
    }
  }
}
$str .= '&lt;br /&gt;';
$str .= htmlcode('closeform');
$str .= '&lt;/td&gt;&lt;/td&gt;&lt;/table&gt;';
}

$str;
%]
&lt;/p&gt;


[%
return;
return '(add shownewxpproposal to URL to see XP proposal)' unless $query-&gt;param('shownewxpproposal');
my $str =&lt;&lt;ENDOFXPSYS
&lt;p&gt;&lt;big&gt;&lt;strong&gt;&lt;a name=&quot;newxpsystem&quot;&gt;New Experience System&lt;/a&gt;&lt;/strong&gt;&lt;/big&gt;&lt;br /&gt;
One thing I'm doing is breaking down the current XP system into smaller groups.&lt;br /&gt;
The summary XP formula is approximately:&lt;br /&gt;&lt;br /&gt;

&lt;var&gt;num_writups&lt;/var&gt; + 10*&lt;var&gt;stat_cools&lt;/var&gt; + 10*(&lt;var&gt;stat_bless&lt;/var&gt; - &lt;var&gt;stat_curse&lt;/var&gt;) + &lt;var&gt;xp_superblesscurse&lt;/var&gt; + &lt;var&gt;xp_quest&lt;/var&gt; + &lt;var&gt;stat_votes_cast&lt;/var&gt;/5 + &lt;var&gt;xp_castallvotes&lt;/var&gt; + (&lt;var&gt;stat_voteup&lt;/var&gt; - &lt;var&gt;stat_votedown&lt;/var&gt;)/3 + -5*&lt;var&gt;stat_painkill&lt;/var&gt; + -10*&lt;var&gt;stat_punchthyself&lt;/var&gt; ?*&lt;var&amp;gt;stat_numkills&lt;/var&gt; + &lt;var&gt;xp_oldsystem&lt;/var&gt;

&lt;br /&gt;&lt;br /&gt;
Tell me if there are any other areas XP could be broken into:
&lt;table border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;1&quot;&gt;
&lt;tr&gt;&lt;th&gt;reason&lt;/th&gt;&lt;th&gt;XP amount&lt;/th&gt;&lt;th title=&quot;(for developers) these will be the hash keys in the $VARS hash for users&quot;&gt;storage &lt;a href=&quot;#explainvars&quot;&gt;*&lt;/a&gt;&lt;/th&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;from getting a [C!] &lt;small&gt;([deep thought] suggests that [C!]s are worth more if a higher level user gives it)&lt;/small&gt;&lt;/td&gt;&lt;td&gt;+10 each&lt;/td&gt;&lt;td&gt;&lt;var&gt;stat_cools&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;from getting blessed/cursed (from homenode ([bless] and [curse] opcodes))&lt;/td&gt;&lt;td&gt;+/- 10 each&lt;/td&gt;&lt;td&gt;&lt;var&gt;stat_bless&lt;/var&gt;, &lt;var&gt;stat_curse&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;from getting superblessed/cursed&lt;/td&gt;&lt;td&gt;+/- &lt;var&gt;n&lt;/var&gt; each&lt;/td&gt;&lt;td&gt;&lt;var&gt;xp_superblesscurse&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;quest blessing (this is the same as a superbless, and so [superbless] would probably have to be changed) &lt;/td&gt;&lt;td&gt;+&lt;var&gt;n&lt;/var&gt; per quest&lt;/td&gt;&lt;td&gt;&lt;var&gt;xp_quest&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;for voting&lt;/td&gt;&lt;td&gt;&lt;var&gt;stat_votes_cast&lt;/var&gt;/5 total&lt;/td&gt;&lt;td&gt;&lt;var&gt;stat_votescast&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;for using all votes&lt;/td&gt;&lt;td&gt;+&lt;var&gt;votes_per_day&lt;/var&gt;/2 daily&lt;/td&gt;&lt;td&gt;&lt;var&gt;xp_castallvotes&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;from getting a writeup voted up&lt;/td&gt;&lt;td&gt;+&lt;var&gt;stat_voteup&lt;/var&gt;/3 total&lt;/td&gt;&lt;td&gt;&lt;var&gt;stat_voteup&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;from getting a writeup voted down&lt;/td&gt;&lt;td&gt;-&lt;;var&gt;stat_votedown&lt;/var&gt;/3 total&lt;/td&gt;&lt;td&gt;&lt;var&gt;stat_votedown&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;for creating a writeup&lt;/td&gt;&lt;td&gt;+1 each&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;for getting a writeup painfully killed&lt;/td&gt;&lt;td&gt;&lt;em&gt;only&lt;/em&gt; -5 (not -6) each &lt;small&gt;(the extra -1 from loss of # of writeups is stored in elsewhere)&lt;/small&gt;&lt;/td&gt;&lt;td&gt;&lt;var&gt;stat_painkill&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;loss for [punch thyself|punching thyself]&lt;/td&gt;&lt;td&gt;-10 each&lt;/td&gt;&lt;td&gt;&lt;var&gt;stat_punchthyself&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;!--
&lt;tr&gt;&lt;td&gt;(proposed) for killing a writeup&lt;/td&gt;&lt;td&gt;? (a small amount, if any) each&lt;/td&gt;&lt;td&gt;&lt;var&gt;stat_numkilled&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;
--&gt;

&lt;tr&gt;&lt;td&gt;(proposed) for buying powers &lt;small&gt;(to do this, should make a bunch of cheesy powers, like more things in personal nodelet, special display things, etc.)&lt;/small&gt;&lt;/td&gt;&lt;td&gt;(variable)&lt;/td&gt;&lt;td&gt;&lt;var&gt;xp_spentpowers&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;(proposed) given from others - a user could give a certain amount of their XP to others&lt;/td&gt;&lt;td&gt;(variable)&lt;/td&gt;&lt;td&gt;&lt;var&gt;xp_earnedothers&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;(proposed) lost to others - lost from giving XP to others (like the M-Noder gave to Jeeves in [M-Noder Washroom])&lt;/td&gt;&lt;td&gt;(variable)&lt;/td&gt;&lt;td&gt;&lt;var&gt;xp_spentothers&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;!--
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;var&gt;&lt;/var&gt;&lt;/td&gt;&lt;/tr&gt;
--&gt;

&lt;tr&gt;&lt;td&gt;miscellaneous from old system (this would only be used when converting from the old XP system into the new XP system; this would be constant after the system change)&lt;/td&gt;&lt;td&gt;(constant per user)&lt;/td&gt;&lt;td&gt;&lt;var&gt;xp_oldsystem&lt;/var&amp;gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/table&gt;
&lt;a name=&quot;explainvars&quot;&gt;&lt;a href=&quot;#newxpsystem&quot;&gt;*&lt;/a&gt; (for developers) these will be the hash keys in the &lt;code&gt;$VARS&lt;/code&gt; hash for users &lt;small&gt;&lt;a href=&quot;#newxpsystem&quot;&gt;(back)&lt;/a&gt;&lt;/small&gt;&lt;/a&gt;
&lt;/p&gt;

ENDOFXPSYS
;
$str;
%]

[%
return if $$USER{node_id}==$HTMLVARS{guest_user};
my $numFirst = 0;
my $numLast = 75;

my $newLast = (defined $query-&gt;param('numlast')) ? $query-&gt;param('numlast') : 0;
if($newLast =~ /(\d+)/) {
	$newLast = $1;
} else {
	$newLast = 0;
}
if($newLast) { $numLast = $newLast; }

my $str = htmlcode('openform','');
$str .= '&lt;p&gt;
&lt;input type=&quot;hidden&quot; name=&quot;op&quot; value=&quot;message&quot;&gt;
Your first '.$numFirst.' and last '.$numLast.' private messages:
&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;
';
$str .= htmlcode('showmessages','+'.$numFirst.',dt').'&lt;br&gt;
' if $numFirst;
$str .= htmlcode('showmessages','-'.$numLast.',dt').'&lt;br&gt;
' if $numLast;
#my $prevMsg = $query-&gt;param('message') || '';
#$str .= &quot;&lt;br /&gt;\n&lt;small&gt;&quot;;
#if(length($prevMsg)) { $str .= '(prev msg '.length($prevMsg).' chars) '; }
#$prevMsg =~ s/\[/\&amp;#91;/gs;
#$prevMsg =~ s/\]/\&amp;#93;/gs;
#$query-&gt;param('message',$prevMsg);
$query-&gt;delete('message');
my $HARDLEN = 5000;
$str .= 'Warning: text field is '.($HARDLEN-255).' chars more than will be accepted in a raw (public) message. (You should be fine for a private message, though.)' . &quot;&lt;/small&gt;&lt;br /&gt;\n&quot; . $query-&gt;textfield('message','',100,$HARDLEN);
$str .= &quot;&lt;br /&gt;\n&quot; . $query-&gt;submit('message_send', 'blabber on');
$str .= htmlcode('chatterinfo','sent');
$str .= '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';
$str .= $query-&gt;endform;

$str.'&lt;/p&gt;';
%]

&lt;!--
&lt;p&gt;
test private message area for N-Wing only: must start message with /msg :&lt;br /&gt;
[ { openform } ]
&lt;input type=&quot;hidden&quot; name=&quot;op&quot; value=&quot;msgdemo&quot;&gt;
[ %
$query-&gt;textfield('message','',50,270) . ' ' .
$query-&gt;submit('test me') .
$query-&gt;endform;
% ]
&lt;/p&gt;
--&gt;

[%
return; # unless $$USER{node_id}==9740;

my $U = getNode('gods', 'usergroup');
my @rec = @{ $DB-&gt;selectNodegroupFlat($U) };
#for(my $i=0;$i&lt;scalar(@rec);++$i) { $rec[$i] = $$rec[$i]{node_id}; }

#scalar(@rec);

my $thingy = $rec[0];
$$thingy{node_id};

%]

[%
return;
return unless (exists $HTMLVARS{'group_gods'}{$$USER{node_id}} or exists $HTMLVARS{'group_content editors'}{$$USER{node_id}});

my $fullstr = '';

$fullstr .= htmlcode('openform');
$fullstr .= 'writeup id to display reversed: ' . $query-&gt;textfield('rid');
$fullstr .= htmlcode('closeform');

my $nid = $query-&gt;param('rid') || 169167;
$nid = 169167 if $nid !~ /^\d*$/;
my $WU = getNodeById($nid);
return $fullstr.'&lt;br /&gt;'.$nid.': not a writeup' if $$WU{type_nodetype}!=117;

my $text = htmlScreen($$WU{doctext}, getVars(getNode('approved html tags', 'setting')));
$text = parseLinks($text, $WU);

my @parts = split(/(&lt;.*?&gt;)/, $text);
my $s;
my $l=scalar(@parts);

$fullstr .= '&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;'.$text.'&lt;/td&gt;&lt;/tr&gt;';

#text between each tag is backwards
my $str = '';
for(my $i=0;$i&lt;$l;++$i) {
  $s='';
  my @ents = split(/(&amp;.*?;)/, $parts[$i]);
  for(my $j=0;$j&lt;scalar(@ents);++$j) {
    $s = reverse($ents[$j]) . $s; #reverse normal text
    $s = $ents[++$j] . $s; #keep entities normal
  }
  $str .= $s;
  $str .= $parts[++$i]; #keep tags normal
}

$fullstr .= '&lt;tr&gt;&lt;td&gt;'.$str.'&lt;/td&gt;&lt;/tr&gt;';

#lame 1337izer
$str = '';
for(my $i=0;$i&lt;$l;++$i) {
$s = $parts[$i];
$s =~ tr/OlEASBoIeasbi/0134580134581/;
$str .= $s . $parts[++$i];
}

$fullstr .= '&lt;tr&gt;&lt;td&gt;'.$str.'&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';

$fullstr;

%]

&lt;p&gt;
[%
#lame permissions check, 9740 = N-Wing's Node_id
return unless (($$USER{node_id}==9740) &amp;&amp; (0));

# my $n = getNode('voteit','htmlcode');
my $n = getNode(1004072);
return 'unable to get it!' unless $n;

#$str = '';
#foreach my $k (keys(%$n)) {
#$str .= $k . '&lt;br /&gt;';
#}
#$str;

# my $str = $$n{code};
#$str =~ s/&amp;/&amp;amp;/g;
#$str =~ s/&lt;/&amp;lt;/g;
#$str =~ s/&gt;/&amp;gt;/g;
#my $count = ($str =~ s/\r\n/\n/g);

#$$n{code}=$str;
my $count = $$n{code} =~ tr/\r//d;
updateNode($n);

#'&lt;pre&gt;'.$str.'&lt;/pre&gt;';

return $count . ' changes';
%]
&lt;/p&gt;



[%
return '&lt;!--' unless exists $HTMLVARS{'group_gods'}{$$USER{node_id}};
#yes, this is completely non-secret, but it doesn't matter
return;
%]
&lt;p&gt;&lt;hr /&gt;
&lt;strong&gt;[N-Wing] spews off thoughts that aren't worth their own writeup&lt;/strong&gt;:&lt;br /&gt;
Note: [N-Wing|my] opinions probably don't reflect those of EveryDevel.com, Blockstackers, etc., so don't get excited about this stuff: &lt;tt&gt;:)&lt;/tt&gt;&lt;br /&gt;
How to do this for a generic Everything server:&lt;br /&gt;
method 1 (easier) - make the database generate all text-nodes into static HTML pages. Links would have to be followed into &lt;tt&gt;node_id&lt;/tt&gt;s, since nodes couldn't really be stored on the file system as their titles. Link titles that don't exist could be shown in a different color, or some other display method; and they would link to the live site. This method wouldn't allow voting or any other dynamic things, but it would be good for viewing information, and would be pretty easy to program. Updates would be difficult; it may be easier to just start from scratch each time.&lt;br /&gt;
method 2 (harder) - generate a node information file for each node that has more information. (If this goes over well, later versions could generate a version for each user.) A client would be run on the user's computer - it could be a program that acts like a web browser (this idea has come up before), and/or a proxy which intercepts web browser calls and servers up a generated page. The user would probably have to specially configure the browser to use the proxy, which would be a pain, though. Updates would be easy to deal with - the special program/proxy could read a file that lists the updates, and show a different file instead.&lt;br /&gt;
&lt;/p&gt;
[%
return '--!&gt;' unless exists $HTMLVARS{'group_gods'}{$$USER{node_id}};
return;
%]

[%
my $str='';

##this does not work
#local *FOO;
#*FOO = 'hi!';
#$str.=htmlcode('testPassing','');
#*FOO = 'there';
#$str.=htmlcode('testPassing','');

##this works, but is annoying
#local $Everything::HTML::BLAH;
#$Everything::HTML::BLAH = 'test';
#$str .= htmlcode('testPassing','');
#$Everything::HTML::BLAH = 'more thingies';
#$str .= htmlcode('testPassing','');

##this, and variations (like single quotes) does not work
#my $blah;
#$blah = {'key1'=&gt;'value1','another key'=&gt;'another value','hi finally'=&gt;'bye finally',};
#$str .= htmlcode('testPassing',\$blah);

##testing, doesn't work
#my $blah;
#$blah = {'key1'=&gt;'value1','another key'=&gt;'another value','hi finally'=&gt;'bye finally',};
#$str .= htmlcode('testpassing','),\$blah');

#htmlcode hacking notes
#doing ')' finishes the split()'s function, so that may be a place to start
#oops, not is doesn't, I'm a moron

##testing
#my $MAGICO = '\');@_=('; #magic Open
#my $MAGICC = ');#'; #magic Close
#my $blah;
#$blah = {'key1'=&gt;'value1','another key'=&gt;'another value','hi finally'=&gt;'bye finally',};
#my $Everything::HTML::passMe = $blah;
#$str .= htmlcode('testpassing',$MAGICO . '$passMe' . $MAGICC);

$str;
%]

[%
# %HTMLVARS is hash
# $HTMLVARS{group_*} is hash ref
# %{$HTMLVARS{group_*}} is hash
# $HTMLVARS{group_*}{id} is scalar (1)
# $HTMLVARS{group_*}-&gt;{id} is scalar (1)
'';
%]



&lt;p&gt;
[%
my $UID = $$USER{node_id};
my $validUser = ( $UID==9740 );
return '' unless $validUser;

my %allowed = (
	'NodeBase'=&gt;'Everything/NodeBase.pm',
	'Experience'=&gt;'Everything/Experience.pm',
	'XML'=&gt;'Everything/XML.pm',
#	'node'=&gt;'Everything/Node/node.pm',	#doesn't work now
	'HTML'=&gt;'Everything/HTML.pm',
	'Everything'=&gt;'Everything.pm',

	'MAIL'=&gt;'Everything/MAIL.pm',
	'Search'=&gt;'Everything/Search.pm',

);

unless(defined $query-&gt;param('showpm')) {
return 'append to URL: &amp;amp;showpm=&lt;var&gt;Module&lt;/var&gt; where modules are: &lt;tt&gt;'.join('&lt;/tt&gt;, &lt;tt&gt;', keys(%allowed)).'&lt;/tt&gt;';
}

my $module = $query-&gt;param('showpm');
return 'Not a valid module name. Allowed: &lt;tt&gt;'.join('&lt;/tt&gt;, &lt;tt&gt;',keys(%allowed)).'&lt;/tt&gt;.' unless exists $allowed{$module};
$module=$allowed{$module};

my $fileName;
my @allLines;
foreach(@INC) {
	$fileName = $_ . '/' . $module;
	open(MODULE, $fileName) or next;
	@allLines = &lt;MODULE&gt;;
	close(MODULE);
	last;
}

#my $fileName =
#'/usr/lib/perl5/5.005/'
#'/usr/local/everything/www/'
#. $module;


#open PMFILE, $fileName or return 'can\'t open ' . $fileName;
#my @allLines = &lt;PMFILE&gt;;
#close PMFILE;

return ('couldn\'t find ' . $module) unless scalar(@allLines);

'&lt;p&gt;&lt;code&gt;'.$fileName.'&lt;/code&gt;&lt;br /&gt;'.&quot;\n&quot;.listCode(join('',@allLines) ,1).'&lt;/p&gt;';
%]
&lt;/p&gt;



&lt;/div&gt;</doctext>
  <node_id>950586</node_id>
  <title>N-Wing's plaything</title>
</node>

<node>
  <type_nodetype>1252389</type_nodetype>
  <doctext>[%
my $msglimit = int($query-&gt;param(&quot;msglimit&quot;)); # to prevent against nasty SQL injection attacks. mkb thanks call
if ($msglimit !~ /^[0-9]*$/)
{
  $msglimit = 0;
}

my $for_node = $query-&gt;param(&quot;for_node&quot;);
my $backtime = $query-&gt;param(&quot;backtime&quot;);
my $nosort = $query-&gt;param(&quot;nosort&quot;);
my $lnp = $query-&gt;param(&quot;links_noparse&quot;);

$for_node = $$USER{user_id} if ($for_node eq &quot;me&quot;);

$nosort ||= 0;
$for_node ||= 0;
$msglimit ||= 0; #not actually necessary due to call's fix above, but better safe than sorry -- tmw
$backtime ||= 0;
my $recip = getNodeById($for_node);

if ($for_node == 0)
{
  $$recip{type_nodetype} = getId(getType('room'));
  $$recip{node_id} = 0;
  $$recip{title} = &quot;outside&quot;;
  $$recip{criteria} = &quot;1\;&quot;;
}

my $limits = &quot;&quot;;
my $secs;
my $room;
my $messages = {};

if ($$recip{type_nodetype} == getId(getType('room')))
{
  if (eval($$recip{criteria}) 
      and (!$APP-&gt;isGuest($USER)
      or getVars(getNode(&quot;public rooms&quot;, &quot;setting&quot;))-&gt;{$$recip{node_id}})
      )
  {
    $room = getVars(getNode(&quot;room topics&quot;, &quot;setting&quot;));
    my $topic = $$room{$$recip{node_id}};
    unless ($lnp == 1)
    {
      if ($query-&gt;param('do_the_right_thing'))
      {
        $topic = escapeAngleBrackets($topic);
      }
      $topic = parseLinks($topic);
    }

    $messages -&gt; {room} = {room_id =&gt; $$recip{node_id},
                           content =&gt; $$recip{title}
                          };

    $messages -&gt; {topic} = {content =&gt; $topic};

    if ($backtime != 5 &amp;&amp; $backtime != 10)
    {
      $backtime = 5;
    }

    $secs = $backtime * 60;

    if ($$USER{in_room} == $$recip{node_id} || $$USER{user_id} == getId(getNode(&quot;Guest User&quot;, &quot;user&quot;)))
    {
      # Use interval here to avoid a table scan -- [call]
      $limits = &quot;message_id &gt; $msglimit AND room='$$recip{node_id}' AND for_user='0'&quot;
              . &quot; AND tstamp &gt;= date_sub(now(), interval $secs second)&quot;;
    }
    else 
    {
      $limits = &quot;&quot;;
    }
  }
}
elsif ($$recip{type_nodetype} == getId(getType('user')))
{
  $secs = $backtime * 60;

  if ($$USER{user_id} == $$recip{node_id})
  {
    $limits = &quot;message_id &gt; $msglimit AND for_user='$$USER{user_id}' AND room='0'&quot;;
    # Avoid a table scan here, too. -- [call]
    $limits.= &quot; AND tstamp &gt;= date_sub(now(), interval $secs second)&quot; if($secs &gt; 0);
  }
  else
  {
    $limits = &quot;&quot;;
  } 
}

$limits .=&quot; ORDER BY message_id&quot; unless($nosort == 1 || $limits eq &quot;&quot;);
$limits = &quot; message_id is NULL LIMIT 0&quot; if($limits eq &quot;&quot;);
my $csr = $DB-&gt;sqlSelectMany(&quot;*&quot;, &quot;message use index(foruser_tstamp)&quot;, $limits);

my $gu = getNode(&quot;Guest User&quot;, &quot;user&quot;);
my $username;
my $costume;
my $msglist = [];

unless ($$recip{node_id} == $$gu{node_id})
{
  while (my $row = $csr-&gt;fetchrow_hashref())
  { 
    my $msg = {};
    $msg -&gt; {msg_id} = $$row{message_id};
    $msg -&gt; {msg_time} = $$row{tstamp};
    $msg -&gt; {archive} = 1 if($$row{archive} == 1);

    my $frm=getNodeById($$row{author_user});
    my $grp=getNodeById($$row{for_usergroup});
    $username = $$frm{title};

    if (htmlcode('isSpecialDate','halloween') &amp;&amp; $room)
    {
      $costume = '';
      $costume = getVars($frm)-&gt;{costume} if (getVars($frm)-&gt;{costume});
      $costume =~ s/\t//g;

      if ($costume gt '')
      {
        $username = $costume;
      }
    }

    #properly encode usernames 
    utf8::encode($username);

    if($frm)
    {
      #This weird way of putting the form data is because we're using
      #&lt;from&gt; tags without any attributes, and XML::Simple will only
      #allow this for grouping tags.
      my $frmdata = [];
      my $md5 = htmlcode('getGravatarMD5', $frm);
      push @$frmdata, {node_id =&gt; $$frm{node_id}, 
                       content =&gt; $username,
                       md5 =&gt; $md5
                      };
      $msg -&gt; {from} = $frmdata;
    }

    if($grp)
    {
      $msg -&gt; {grp} = {type    =&gt; $$grp{type}{title},
                       e2link  =&gt; {node_id =&gt; $$grp{node_id},
                                   content =&gt; $$grp{title}
                                  },
                      };
    }

    my $txt = encodeHTML($$row{msgtext});
    unless ($lnp == 1)
    {
      $txt = parseLinks($txt);
    }

    $msg -&gt; {txt} = {content =&gt; $txt};
    push @$msglist,  $msg;
  }
}

$messages -&gt; {msglist} = { msg =&gt; $msglist };

use XML::Simple;
# For reason behind options, see
# http://perldesignpatterns.com/?XmlSimple, as well as the XML::Simple
# documentation.

my $xmls = XML::Simple-&gt;new(
    RootName =&gt; undef,
    KeepRoot =&gt; 1,
    ForceArray =&gt; 1,
    ForceContent =&gt; 1,
    XMLDecl =&gt; 1,
    GroupTags =&gt; {from =&gt; 'e2link'}, #Hack to get &lt;from&gt; tags without attributes
);
my $xml = $xmls -&gt; XMLout({&quot;messages&quot; =&gt; $messages});
return $xml;
%]

</doctext>
  <node_id>1259846</node_id>
  <title>Universal Message XML Ticker</title>
</node>

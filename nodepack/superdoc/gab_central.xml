<node>
  <type_nodetype>14</type_nodetype>
  <doctext>&lt;!-- Gab central javascript --&gt;
&lt;script language=&quot;JavaScript&quot; src=&quot;/js/2069769.js&quot; &gt;
&lt;/script&gt;

[%

use Time::HiRes;
my @start = Time::HiRes::gettimeofday;
my $timeStr;
my $timeCount = 1;

my $UID = $$USER{node_id}||0;
my $isRoot = $APP-&gt;isAdmin($USER);

return 'If you had an account, we\'d let you gab.' if $APP-&gt;isGuest($USER);

#
# Initialize squawkbox stuff
#

  $VARS-&gt;{squawk_rooms} ||= &quot;0&quot;;
  $VARS-&gt;{squawk_talk} ||= &quot;0&quot;;
  $VARS-&gt;{squawk_talk} = $query-&gt;param(&quot;talkin&quot;) if($query-&gt;param(&quot;talkin&quot;) or $query-&gt;param(&quot;talkin&quot;) == &quot;0&quot;);

  my $oldroom = $USER-&gt;{in_room};
  $USER-&gt;{in_room} = $VARS-&gt;{squawk_talk};
  my $str;

  #here's where the magic happens
  my $MSGOP = getNode(&quot;message&quot;, &quot;opcode&quot;);
  eval($MSGOP-&gt;{code}) if($query-&gt;param(&quot;squawk&quot;));
#  $query-&gt;param(&quot;message&quot;, &quot;&quot;);
  $str.=&quot;$@&quot; if $@ and $isRoot;



#
# Everything goes in one big table, begin it here
#

  $str.=&quot;&lt;table&gt;&quot;; 

#
# Column Templates
# 

  $str.=&quot;&lt;tr height=\&quot;1\&quot;&gt;&lt;td width=\&quot;100\&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td width=\&quot;100\&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td width=\&quot;50\&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;td width=\&quot;25\&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&quot;;

#
# Add rooms button, or room list dropdown plus &quot;add room&quot; button
#

  $USER-&gt;{in_room} = $oldroom;

  my $add_room = getNodeById($query-&gt;param(&quot;add_room&quot;));
my $roomType = getId(getType(&quot;room&quot;));

  $add_room = {&quot;node_id&quot; =&gt; &quot;0&quot;, &quot;type_nodetype&quot; =&gt; $roomType} if $query-&gt;param(&quot;add_room&quot;) == &quot;0&quot;;

  if($add_room and $add_room-&gt;{type_nodetype} = $roomType)
  {
      $add_room-&gt;{criteria} ||= 1;
      $VARS-&gt;{squawk_rooms} .= &quot;,&quot;.getId($add_room) if($add_room-&gt;{criteria} and eval($add_room-&gt;{criteria}));
  }

  my @rooms;

  $str.=&quot;&lt;tr&gt;&lt;td colspan=\&quot;5\&quot;&gt;&quot;;
  if($query-&gt;param(&quot;showaddrooms&quot;)){
    #
    # Show the dropdown list, plus a button 
    # to actually add the rooms
    #
    my $csr = $DB-&gt;sqlSelectMany(&quot;node_id&quot;, &quot;node&quot;, &quot;type_nodetype=&quot;.$roomType);

    while(my $row = $csr-&gt;fetchrow_hashref) {
       my $N = getNodeById($row-&gt;{node_id});
       push @rooms, $N if $N;
    }
  
    @rooms = sort {lc($a-&gt;{title}) cmp lc($b-&gt;{title}) } @rooms;
    unshift @rooms, {node_id =&gt; &quot;0&quot;, title =&gt; &quot;outside&quot;};
    
    $str.=htmlcode(&quot;openform&quot;);
    $str.=&quot;&lt;select name=\&quot;add_room\&quot;&gt;&quot;;
    foreach(@rooms)
    {
       $str.=&quot;&lt;option value=\&quot;$_-&gt;{node_id}\&quot;&gt;$_-&gt;{title}&lt;/option&gt;&quot;;
    }
    $str.=&quot;&lt;/select&gt;&quot;;
    $str.=&quot;&lt;input type=\&quot;submit\&quot; value=\&quot;Add Room\&quot;&gt;&lt;/form&gt;&quot;;
  }else{
    #
    # don't show the dropdown list, just the button bring up the 
    # dropdown list next time
    #
    $str.=htmlcode(&quot;openform&quot;);
    $str.=&quot;&lt;input type=\&quot;hidden\&quot; name=\&quot;showaddrooms\&quot; value=\&quot;1\&quot;&gt;&quot;;
    $str.=&quot;&lt;input type=\&quot;submit\&quot; value=\&quot;Add Rooms\&quot;&gt;&quot;;
    $str.=&quot;&lt;/form&gt;&quot;;
  }
  $str.=&quot;&lt;/td&gt;&lt;/tr&gt;&quot;;

#
# Begin the form that almost everything's in
# (besides the &quot;add rooms&quot; pulldown)
#

$str.=htmlcode(&quot;openform&quot;);

#
# List o rooms
#

  my $sqrms;
  foreach(split(&quot;,&quot;,$VARS-&gt;{squawk_rooms}))
  {
    $sqrms-&gt;{$_} = 1;
  } 

  foreach(my @params = $query-&gt;param)
  {
     next unless $_ =~ /^unsquawk_(\d+)$/;
     delete $sqrms-&gt;{$1};
  }
  
  $VARS-&gt;{squawk_rooms} = join(&quot;,&quot;,(keys %$sqrms));

  if (keys %$sqrms &gt; 0) {

  #my $TAGNODE = getNode 'approved html tags', 'setting';
  #my $TAGS=getVars($TAGNODE);
  
  $str.=&quot;&lt;tr&gt;&quot;;
  $str.=&quot;&lt;td colspan=\&quot;3\&quot;&gt;&lt;strong&gt;Room&lt;/strong&gt;&lt;/td&gt;&quot;;
  $str.=&quot;&lt;td&gt;&lt;strong&gt;Remove Watch&lt;/strong&gt;&lt;/td&gt;&quot;;
  $str.=&quot;&lt;td&gt;&lt;strong&gt;Talk&lt;/strong&gt;&lt;/td&gt;&quot;;
  $str.=&quot;&lt;/tr&gt;&quot;;
  foreach(keys %$sqrms)
  {
      my $room = getNodeById($_);
      $room = {title =&gt; &quot;outside&quot;, node_id =&gt; &quot;0&quot;, type_nodetype =&gt; $roomType } if($_ == 0);
      next unless $room;
      $str.=&quot;&lt;tr&gt;&quot;;
      $str.=&quot;&lt;td colspan=\&quot;3\&quot;&gt;&quot;.(($_ == 0)?(&quot;outside&quot;):(linkNode($room))).&quot;&lt;/td&gt;&quot;;
      $str.=&quot;&lt;td&gt;&lt;input type=\&quot;checkbox\&quot; name=\&quot;unsquawk_$room-&gt;{node_id}\&quot;&gt;&lt;/td&gt;&quot;;
      $str.=&quot;&lt;td&gt;&lt;input type=\&quot;radio\&quot; value=\&quot;$room-&gt;{node_id}\&quot; name=\&quot;talkin\&quot;&quot;.(($VARS-&gt;{squawk_talk} == $room-&gt;{node_id})?(&quot; CHECKED &quot;):(&quot;&quot;)).&quot;&gt;&lt;/td&gt;&quot;;
      $str.=&quot;&lt;/tr&gt;&quot;;
  }

  }


#
# Initialize Message Inbox options
# 


$str.=&quot;&lt;tr height=\&quot;1\&quot;&gt;&lt;td colspan=\&quot;5\&quot;&gt;&lt;hr /&gt;&lt;/td&gt;&lt;/tr&gt;&quot;;

my $showStart = 0;
my $numShow = 0;
my $foruser = '';
my $olduser = '';

#
# Hidden controls
#

$str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;';
#$str.='&lt;input type=&quot;hidden&quot; name=&quot;op&quot; value=&quot;message&quot;&gt;';
$str.='&lt;input type=&quot;hidden&quot; name=&quot;node_id&quot; value=&quot;'.$$NODE{node_id}.'&quot;&gt;';
$str.=$query-&gt;hidden('sexisgood','1');	#so auto-VARS changing works
$str.='&lt;/td&gt;&lt;/tr&gt;';


#
# Message Inbox options
#

{
	#for some reason, we're doing everything in a table; this at least make the options part a little easier
	my @opts;
	push @opts, htmlcode('varcheckbox','autofillInbox,Autofill recipient');
	push @opts, htmlcode('varcheckbox','sortmyinbox,Sort messages by the usergroup the message is for');
	push @opts, 'only show from user '  . $query-&gt;textfield(-name=&gt;'fromuser')  . ', or&amp;nbsp;do&amp;nbsp;the&amp;nbsp;inverse:&amp;nbsp;'.$query-&gt;checkbox(-name=&gt;'notuser',-label=&gt;'(hide from this user)');
	push @opts, 'only show from group ' . $query-&gt;textfield(-name=&gt;'fromgroup') . ', or&amp;nbsp;do&amp;nbsp;the&amp;nbsp;inverse:&amp;nbsp;'.$query-&gt;checkbox(-name=&gt;'notgroup',-label=&gt;'(hide from this group)' );

#N-Wing made this sticky
#	push @opts, 'archived/unarchived messages: '.$query-&gt;popup_menu(-name=&gt;'arcunarc',-values=&gt;['all','archived','unarchived'], -default=&gt;'unarchived');
	push @opts, 'archived/unarchived messages: ' . htmlcode('varsComboBox', 'msginboxUnArc,0, 0,all, 1,unarchived, 2,archived');

	$str.=&quot;&lt;tr&gt;&lt;td colspan=\&quot;5\&quot;&gt;&lt;strong&gt;Message Inbox Options&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&quot;.&quot;\n&quot;;
	foreach(@opts) {
		$str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;' . $_ . &quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;;
	}
}

#
# build filter for archived/unarchived messages
#
my $sqlFilterArc='';	#default of no filtering
if( (exists $VARS-&gt;{msginboxUnArc}) &amp;&amp; (defined $VARS-&gt;{msginboxUnArc}) ) {
	my $v=$VARS-&gt;{msginboxUnArc};
	if($v eq '1') {
		$sqlFilterArc=' AND archive=0';
	} elsif($v eq '2') {
		$sqlFilterArc=' AND archive!=0';
	}
}


#
# Build list of possible users to retrieve messages for.
# Gods can view their own messages or messages for one of
# the bots
#

if($isRoot) {

if(defined($query-&gt;param('spy_user'))) {

	#FIXME after the bot setting is set: get info from there instead
	my @okaytospy = ($$USER{title}, 'Webster 1913', 'EDB', 'Klaproth', 'Cool Man Eddie', 'Grease Monkey', 'Giant Teddy Bear', 'Guest User', 'Virgil', 'Content_Salvage');
	my $okay;
	$$okay{getId(getNode($_, 'user'))} = 1 foreach(@okaytospy);

	$foruser = getNode($query-&gt;param('spy_user'), 'user');

	unless(defined $foruser){

		$foruser = $USER;
		$str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;&lt;small&gt;(No such user ['.$query-&gt;param('spy_user').'])&lt;/small&gt;&lt;/tr&gt;&lt;/td&gt;';

	} 

	$foruser = $USER unless(exists $$okay{$$foruser{node_id}});

} else {
	$foruser = $USER;
}

#
# Dropdown to select $foruser next time around
#

$str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;Message Inbox for: &lt;select name=&quot;spy_user&quot;&gt;&lt;option value=&quot;'.$$foruser{title}.'&quot;&gt;'.$$foruser{title}.'&lt;/option&gt;';

if(getId($foruser) != $UID){  $str.='&lt;option value=&quot;'.$$USER{title}.'&quot;&gt;'.$$USER{title}.'&lt;/option&gt;';}

if(getId($foruser) != getId(getNode('Cool Man Eddie', 'user'))){ $str.='&lt;option value=&quot;Cool Man Eddie&quot;&gt;Cool Man Eddie&lt;/option&gt;';}

if(getId($foruser) != getId(getNode('Guest User', 'user'))){ $str.='&lt;option value=&quot;Guest User&quot;&gt;Guest User&lt;/option&gt;';}

if(getId($foruser) != getId(getNode('EDB', 'user'))){ $str.='&lt;option value=&quot;EDB&quot;&gt;EDB&lt;/option&gt;';}

if(getId($foruser) != getId(getNode('Klaproth', 'user'))){ $str.='&lt;option value=&quot;Klaproth&quot;&gt;Klaproth&lt;/option&gt;';}

if(getId($foruser) != getId(getNode('Webster 1913', 'user'))){ $str.='&lt;option value=&quot;Webster 1913&quot;&gt;Webster 1913&lt;/option&gt;';}

if(getId($foruser) != getId(getNode('Grease Monkey', 'user'))){ $str.='&lt;option value=&quot;Grease Monkey&quot;&gt;Grease Monkey&lt;/option&gt;';}

if(getId($foruser) != getId(getNode('Virgil', 'user'))){ $str.='&lt;option value=&quot;Virgil&quot;&gt;Virgil&lt;/option&gt;';}

if(getId($foruser) != getId(getNode('Content_Salvage', 'user'))){ $str.='&lt;option value=&quot;Content_Salvage&quot;&gt;Content_Salvage&lt;/option&gt;';}

if(getId($foruser) != getId(getNode('Giant Teddy Bear', 'user'))){ $str.='&lt;option value=&quot;Giant Teddy Bear&quot;&gt;Giant Teddy Bear&lt;/option&gt;';}

$str.='&lt;/select&gt;&lt;/tr&gt;&lt;/td&gt;';

} else {
	$foruser = $USER;
}

#
# build list of usergroup-sorted messages
#

#########originally All jay in here:

my $sqlSortInboxNotUG='';	#non-usergroups
if($$VARS{sortmyinbox}) {

        #
        # message are sortedby usergroup, so first,
        # get list of groups
        #

	my $typ = getId(getType('usergroup'));

	my $csr = $DB-&gt;sqlSelectMany('nodegroup_id, (select title from node where node.node_id=nodegroup_id) as groupTitle', 'nodegroup', &quot;node_id=$UID and (select type_nodetype from node where node.node_id=nodegroup_id) = &quot;.$typ);


	my $groups;

	while( my $row = $csr-&gt;fetchrow_hashref) {
		$$groups{$$row{groupTitle}} = $$row{nodegroup_id};
	}

	$$groups{'Content Editors'} = getId(getNode('Content Editors', 'usergroup')) if $isRoot;

	my $sqlq;

	foreach(keys(%$groups)) {
		$sqlq = &quot;for_user=$$foruser{user_id} AND for_usergroup=$$groups{$_}&quot;;
                
		$sqlq .= $sqlFilterArc if length($sqlFilterArc);
		my $num = $DB-&gt;sqlSelect('count(*)', 'message', $sqlq);

		my $tempstr = &quot;&lt;small&gt;$_: $num&lt;/small&gt;&quot;;

		$tempstr = '&lt;strong&gt;&lt;big&gt;'.$tempstr.'&lt;/big&gt;&lt;/strong&gt;'; #if($num &gt; 0);
		$str.='&lt;a href='.urlGen({'fromgroup'=&gt;$_, 'node_id'=&gt;$$NODE{node_id}}).&quot;&gt;$tempstr&lt;/a&gt;&lt;br /&gt;\n&quot; if($num &gt; 0);
	}

		#creates: (for_usergroup!=838015 AND for_usergroup!=923653 AND (etc.))

		$sqlq = &quot;for_user=$$foruser{user_id}&quot;;

		if(scalar(keys(%$groups))) {
                        #jb says I removed the extra AND. we have one down below
                        #map in void context. Use foreach.  
                        #Plus this doesn't form the string correctly
			$sqlSortInboxNotUG = join(',', values(%$groups));


		if(length($sqlSortInboxNotUG)) {
			$sqlSortInboxNotUG = &quot; AND NOT IN (' . $sqlSortInboxNotUG.')&quot;;
			$sqlq .= $sqlSortInboxNotUG;
		}


#return $sqlq; # Gorgonzola commented this out but that only revealed a different problem

		$sqlq .= $sqlFilterArc if length($sqlFilterArc);

		my $num = $DB-&gt;sqlSelect('count(*)', 'message', $sqlq);

		my $tempstr = &quot;&lt;small&gt;other: $num&lt;/small&gt;&quot;;

		$tempstr = '&lt;strong&gt;&lt;big&gt;'.$tempstr.'&lt;/big&gt;&lt;/strong&gt;'; #if($num &gt; 0);
		$str.='&lt;a href='.urlGen({'node_id'=&gt;$$NODE{node_id}}).&quot;&gt;$tempstr&lt;/a&gt;&lt;br /&gt;\n&quot; if($num &gt; 0);
	}

	$sqlq = &quot;for_user=$$foruser{user_id}&quot;;
	$sqlq .= $sqlFilterArc if length($sqlFilterArc);
	$str.='('.linkNode($NODE, $DB-&gt;sqlSelect('count(*)', 'message', $sqlq).' messages total').&quot;)&lt;br /&gt;\n&quot;;

	$str.='&lt;br /&gt;';

	#return $str;
}


#
# message list: Build query
#

my $limits = 'for_user='.getId($foruser);


#TODO have an htmlcode that constructs the query, so XML ticker and showmessages doesn't have to dupe code
my $notUser =($query-&gt;param('notuser')  ? 1 : 0);
my $notGroup=($query-&gt;param('notgroup') ? 1 : 0);
my $filterUser;	#user object, or 0 if none
my $filterGroup;	#group object, or 0 if none
my $filterUID=0;	#user ID, or 0 if none
my $filterGID=0;	#group ID, or 0 if none

if($filterUser=$query-&gt;param('fromuser')) {
	$filterUser = getNode($filterUser, 'user');
	$filterUID = $$filterUser{node_id} if $filterUser;
}
if($filterGroup=$query-&gt;param('fromgroup')) {
	$filterGroup = getNode($filterGroup, 'usergroup') || getNode($filterGroup, 'user');
	$filterGID = $$filterGroup{node_id} if $filterGroup;
}
$filterUser ||= 0;
$filterGroup ||= 0;
$limits .= ' AND author_user'.($notUser?'!=':'=').$filterUID if $filterUser;
$limits .= ' AND for_usergroup'.($notGroup?'!=':'=').$filterGID if ($filterGID || $notGroup);
#$limits .= ' AND for_usergroup=0' if (!($filterGID) &amp;&amp; $$VARS{sortmyinbox});
$limits .= $sqlSortInboxNotUG if $$VARS{sortmyinbox} &amp;&amp; !$filterGID &amp;&amp; length($sqlSortInboxNotUG);
$limits .= $sqlFilterArc if length($sqlFilterArc);

#TODO - LIMIT x,y
my $showLimit='';
my $showMax = $query-&gt;param('showmax') || $$VARS{inboxMax} || 0;
if($showMax =~ /\d+/) {
	$showMax=$1;
} else {
	$showMax=0;
}
$showLimit= ' LIMIT '.$showMax if $showMax;

#debugging here
#return &quot;&lt;p&gt;$limits&lt;/p&gt;&quot;;

#
# message list: run query
#

my $csr = $DB-&gt;sqlSelectMany('*', 'message', $limits, 'ORDER BY message_id');

#
# message list: Display messages
#

my $flag = 0;
my $t;
my @chkboxes;
my $talker;	#author of current message
my $ug;	#usergroup current message is for


my $colHeading = '&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;delete&lt;/th&gt;&lt;th&gt;send time&lt;/th&gt;&lt;th colspan=&quot;3&quot; align=&quot;right&quot;&gt;&amp;#91;un&amp;#93;Archive&lt;/th&gt;&lt;/tr&gt;'.&quot;\n&quot;;
$str.=$colHeading;

while(my $MSG = $csr-&gt;fetchrow_hashref) {
	++$flag;
	my $text = $$MSG{msgtext};
	#FIXME show no user error message, like we do for bad usergroups (instead of just skipping the message)
	$talker = $$MSG{author_user};
	getRef($talker);
	next unless($talker);

	(my $name = $$talker{title}) =~ tr/ /_/;

	#this should prevent punctuation chars in nicks from breaking our HTML
#	$text = encodeHTML($text);
	$text =~ s/\&lt;/&amp;lt;/g;
	$text =~ s/\&gt;/&amp;gt;/g;
	$text =~ s/\[([^\]]*?)$/&amp;#91;$1/;	#dangling [ fixer	#]
        $text =~ s/\[\]/\]/g;                     #parse [] glitch fixer
	$name = encodeHTML($name);

        #
        # checkbox to delete message
        #

	my $chkboxname = 'deletemsg_'.$$MSG{message_id};
	push @chkboxes, $chkboxname;

	$str.='&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;'. #$query-&gt;checkbox($chkboxname, '', 'yup', ' ');
	'&lt;input type=&quot;checkbox&quot; name=&quot;'.$chkboxname.'&quot; VALUE=&quot;yup&quot;&gt;'; # $query-&gt;textbox creates a newline after the tag, which messes up the table
#	$str.=&quot;&lt;td&gt;&lt;a onmouseover='replyTo(\&quot;$name\&quot;)' onclick='replyTo(\&quot;$name\&quot;)' href='#box'&gt;reply&lt;/a&gt;&lt;/td&gt;&quot;;

#Jay's fix for usernames with a single quote in them...

my $safename = $name;
$safename =~ s/'/&amp;\#39;/g;
$safename =~ s/&quot;/&amp;\#34;/g;

        #
        # reply button
        #11/11/04: Replaced button with (r)(ra) links to accommodate for usergroup messages

#	$str.=&quot;&lt;input type='button' value='Reply' onmouseover='replyTo(2, \&quot;$safename\&quot;,0)' onClick='replyTo(2, \&quot;$safename\&quot;,1)'&gt;&lt;/td&gt;&lt;td&gt;&lt;small&gt;&amp;nbsp;&quot;;

	$str.=&quot;(&lt;a onmouseover='replyTo(2, \&quot;$safename\&quot;,0)' href='javascript:replyTo(2,\&quot;$safename\&quot;,1)'&gt;r&lt;/a&gt;)&quot;;
$ug = $$MSG{for_usergroup} || 0;
unless($ug==0) {
getRef($ug);
(my $safeug = $$ug{title}) =~ tr/ /_/;
$safeug =~ s/'/&amp;\#39;/g;
$safeug =~ s/&quot;/&amp;\#34;/g;
$str.=&quot;(&lt;a onmouseover='replyTo(2, \&quot;$safeug\&quot;,0)' href='javascript:replyTo(2,\&quot;$safeug\&quot;,1)'&gt;ra&lt;/a&gt;)&quot;;
}
$str.=&quot;&lt;/td&gt;&lt;td&gt;&lt;small&gt;&amp;nbsp;&quot;;



        #
        # message timestamp
        #

	$t = $$MSG{tstamp};
	# Replaced after MySQL 4.1 upgrade, timestamp is slightly different.
#$str.=substr($t,0,4).'.'.substr($t,4,2).'.'.substr($t,6,2).'&amp;nbsp;at&amp;nbsp;'.substr($t,8,2).':'.substr($t,10,2);
	$str .= substr($t,0,4).'.'.substr($t,5,2).'.'.substr($t,8,2).'&amp;nbsp;at&amp;nbsp;'.substr($t,11,2).':'.substr($t,14,2);

	$str.='&lt;/small&gt;&lt;/td&gt;&lt;td colspan=&quot;2&quot;&gt;';

        #
        # If the message was generated by a usergroup
        # add a link to the group
        #

	$ug = $$MSG{for_usergroup} || 0;
	unless($ug==0) {
		$ug = getNodeById($ug);
		if(defined $ug) {
			$str.='('.linkNode($ug,0,{lastnode_id=&gt;0}).') ';
		} else {
			$str.='(no user or group with ID of '.$$MSG{for_usergroup}.') ';
		}
	}

        #
        # add the message itself 
        #
	#changes literal '\n' into HTML breaks (slash, then n; not a newline)
	$text =~ s/\s+\\n\s+/&lt;br \/&gt;/g;

	#$str.='&lt;em&gt;'.linkNode($talker).' says&lt;/em&gt; '.parseLinks($text) . '&lt;/td&gt;';
        $str.='&lt;em&gt;'.linkNode($talker).' says&lt;/em&gt; '.$text. '&lt;/td&gt;';

	$str.='&lt;td&gt;&lt;tt&gt;'.($$MSG{archive}?'A':'&amp;nbsp;').'&lt;/tt&gt;&lt;input type=&quot;checkbox&quot; value=&quot;yup&quot; name=&quot;' . ($$MSG{archive} ? 'un' : '') . 'archive_' . 

$$MSG{message_id} . '&quot;/&gt;&lt;/td&gt;';

	$str.=&quot;&lt;/tr&gt;\n&quot;;
}
$csr-&gt;finish();

#
# Display message total
#

$str.=$colHeading;

$str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;';
if($flag) {
	#at least 1 message showing
	$str.=&quot;You have $flag messages total&quot;;
	my @allFilters;	#all filters that are being used
	push( @allFilters, (($notUser? 'not':'').' from '         .linkNode($filterUser )) ) if $filterUser;
	push( @allFilters, (($notGroup?'not':'').' sent to group '.linkNode($filterGroup)) ) if $filterGroup;
	$str.=' that are '.join(' and ',@allFilters) if scalar(@allFilters);
	$str.='.';
} else {
	#no messages showing
	$str.='&lt;em&gt;There\'s nothing more depressing than an empty mailbox, especially today.&lt;/em&gt;';
}
$str.='&lt;/td&gt;&lt;/tr&gt;';

#
# Clear any check buttons
#

$str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;' . $query-&gt;reset('Clear All') . ' &lt;input type=&quot;button&quot; value=&quot;Clear Reply&quot; onClick=&quot;clearReply(2);&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;Check All&quot; onClick=&quot;checkAll(2);&quot;&gt;&lt;/td&gt;&lt;/tr&gt;';

# don't use $query-&gt;textfield() here, because sticky forms make things
# really ugly if you happen to write something in the Chatterbox
# don't blame me, i'm just the babysitter
# N-Wing says: why not just clear it via $query-&gt;delete('message'); ?

#
# Display message just sent, if any
#

$str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;&lt;i&gt;'.$query-&gt;param('sentmessage').'&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;' if $query-&gt;param('sentmessage');

#
# Talkifier
#

if ($$VARS{borged}) {

  $str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;&lt;em&gt;You\'re borged, so you can\'t talk right now.&lt;/em&gt;&lt;br /&gt;' . $query-&gt;submit('message_send', 'erase');
  $str.='&lt;/td&gt;&lt;/tr&gt;';

} else {

   $str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;&lt;a name=&quot;box&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;squawk&quot; value=&quot;1&quot;&gt;'.(($$VARS{mitextarea} == 1)?('&lt;textarea name=&quot;message&quot; rows=&quot;8&quot; cols=&quot;35&quot;&gt;&lt;/textarea&gt;'):('&lt;input type=&quot;text&quot; name=&quot;message&quot; value=&quot;&quot; size=&quot;40&quot; maxlength=&quot;255&quot;&gt;')) unless $$VARS{'borged'};
   $str.=' '.$query-&gt;submit('message send', 'talk') . &quot;\n&lt;/td&gt;&lt;/tr&gt;&quot;;
   # $str.='&lt;tr&gt;&lt;td colspan=&quot;5&quot;&gt;' . $query-&gt;reset('Clear All') . &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;
}

#
# That's everything that goes in the form.
#

$str.=$query-&gt;end_form();

#
# Room topic
#

  $str.=&quot;&lt;br&gt;&quot;;

  my $RT = getVars(getNode(&quot;room topics&quot;, &quot;setting&quot;));
  $VARS-&gt;{squawk_talk} ||= 0;
  $str.=&quot;&lt;tr&gt;&lt;td colspan=5&gt;&lt;hr&gt;&lt;p align=\&quot;center\&quot;&gt;&lt;br /&gt;&amp;nbsp;&quot;.$RT-&gt;{$VARS-&gt;{squawk_talk}}.&quot;&lt;/p&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&quot;;

  $str.=&quot;&lt;tr&gt;&quot;;
  #unless($$NODE{title} eq &quot;chatterlight&quot;){
    $str.=&quot;&lt;td&gt;&lt;strong&gt;Where&lt;/strong&gt;&lt;/td&gt;&quot;;
    $str.=&quot;&lt;td&gt;&lt;strong&gt;When&lt;/strong&gt;&lt;/td&gt;&quot;;
    $str.=&quot;&lt;td colspan=\&quot;3\&quot;&gt;&lt;strong&gt;Who&lt;/strong&gt; and &lt;strong&gt;What&lt;/strong&gt;&lt;/td&gt;&quot;;
  #}
  $str.=&quot;&lt;/tr&gt;&quot;;

#
# Banter
#

my $ignorelist = $DB-&gt;sqlSelectMany('ignore_node', 'messageignore', 'messageignore_id='.$UID);
  
my @list;
while (my ($u) = $ignorelist-&gt;fetchrow) {
	push @list, $u;
}

local *in_an_array = sub {
my $needle = shift;
my @haystack = @_;

for (@haystack) {
return 1 if $_ eq $needle;
}
return 0;
};

  my $msgcsr = $DB-&gt;sqlSelectMany(&quot;*&quot;, &quot;message&quot;, &quot;(&quot;.join(&quot; or &quot;, map {&quot; room='$_' &quot; } keys %$sqrms).&quot;) and for_user=0 and tstamp &gt;= date_sub(now(), interval 300 second) order by tstamp asc&quot;);

while(my $msg = $msgcsr-&gt;fetchrow_hashref)
  {
      my $room = getNodeById($msg-&gt;{room});
      $room = {title =&gt; &quot;outside&quot;, node_id =&gt; &quot;0&quot;, type_nodetype =&gt; $roomType } if($msg-&gt;{room} == 0);
      next unless $room;

      my $user = getNodeById($msg-&gt;{author_user});
      next unless $user;
      next if in_an_array($msg-&gt;{author_user},@list);

      my $msgtext = encodeHTML($msg-&gt;{msgtext});
      if ($msgtext =~ /^\/me (.*)$/){
      $msgtext = &quot;&amp;nbsp;&lt;em&gt;$1&lt;/em&gt;&quot;;
      } else {
      $msgtext = &quot;:&amp;nbsp;&quot; . $msgtext;
      }

      #if ($NODE-&gt;{title} eq &quot;chatterlight&quot;)
      #{
      #   $msgtext = &quot;&lt;small&gt;$msgtext&lt;/small&gt;&quot;;
      #}
my $userLink;
my $aid = $msg-&gt;{author_user};

$userLink = linkNode( $aid, undef, {'lastnode_id'=&gt;undef});


	# Make bones and nate look impressive.
	$userLink =~ s/^(.*)$/&lt;strong&gt;$1&lt;\/strong&gt;/ if ($aid == 220 );

      $str.=&quot;&lt;tr&gt;&quot;;
      $str.=&quot;&lt;td&gt;&quot;.(($msg-&gt;{room} == $VARS-&gt;{squawk_talk})?(&quot;&lt;strong&gt;$room-&gt;{title}&lt;/strong&gt;&quot;):(&quot;($room-&gt;{title})&quot;)).&quot;&lt;/td&gt;&quot;;
      $str.=&quot;&lt;td&gt;&lt;small&gt;&quot;.htmlcode('parsetimestamp', &quot;$msg-&gt;{tstamp},2&quot;).&quot;&lt;/small&gt;&lt;/td&gt;&quot;;
      $str.=&quot;&lt;td colspan=\&quot;3\&quot;&gt;&quot;.$userLink.&quot;$msgtext&lt;/td&gt;&quot;;
      $str.=&quot;&lt;/tr&gt;&quot;;
  }
  $str.=&quot;&lt;/table&gt;&quot;;
  $str.=&quot;&lt;br&gt;&amp;nbsp;&lt;br&gt;&quot;;

$str;
%]
&lt;hr&gt;
&lt;p&gt;&lt;small&gt;Report any errors to [JayBonci] or [N-Wing], or just go and use the [Squawkbox] if they don't seem to be around much any more. Originally by [chromatic] and [nate]. If it's broken, don't expect [Gorgonzola] to be able to fix it. In fact, the odds are that nobody can fix it. Sorry.&lt;/small&gt;&lt;/p&gt;</doctext>
  <node_id>1498699</node_id>
  <title>Gab Central</title>
</node>

<node>
  <node_id>1959368</node_id>
  <title>Recalculate XP</title>
  <doctext>&lt;style type=&quot;text/css&quot;&gt;
.mytable th, .mytable td
{
border: 1px solid silver;
padding: 3px;
}
&lt;/style&gt;

[%#/
my $targetStr = '';
my ($targetUser, $targetVars);

if ( $APP-&gt;isAdmin($USER) ) {
   $targetStr .= &quot;&lt;label&gt;Target user:&quot;
      . $query-&gt;textfield(-name =&gt; 'targetUser')
      . &quot;&lt;/label&gt;&lt;br&gt;&quot;
      ;

   my $targetUsername = $query-&gt;param('targetUser');

   if ($targetUsername) {

      $targetUser = getNode($targetUsername, 'user');
      
      if (!$targetUser) {
         $targetStr .= &quot;&lt;p&gt;&lt;em&gt;Could not find user '&quot; 
           . encodeHTML($targetUsername)
           . &quot;'&lt;/em&gt;&lt;/p&gt;&quot;
           ;
      }

   }
}

my $checkCanRecalc = sub {

   ### Check if user joined before October 29, 2008

   return &quot;This service is only needed by and available to users who joined E2 prior to October 29, 2008.
   Don't worry - all of your XP was earned under the present system.&lt;/p&gt;&quot; if ($$USER{node_id} &gt; 1960662);

   return &quot;&lt;p&gt;Our records show that you have already recalculated your XP.
   You are only allowed to recalculate your XP once.&lt;/p&gt;&quot; if ($$VARS{hasRecalculated} == 1);

   return '';
};

my $noRecalcStr = &amp;$checkCanRecalc();

# Do these checks for normal users.  Bypass them if a god is recalculating someone else
if (!$targetUser) {

   if ($noRecalcStr ne '') {

      if ($targetStr) {
         $noRecalcStr .= ''
           . $query-&gt;start_form()
           . $targetStr
           . $query-&gt;hidden('node_id', $$NODE{node_id})
           . $query-&gt;submit('recalculate_XP', 'Recalculate!')
           . $query-&gt;end_form()
           ;
      }

      return $noRecalcStr;
  }

   
   $targetVars = $VARS;
   $targetUser = $USER;

} else {

   $targetVars = getVars($targetUser);

}


my $uid = getId($targetUser);

##################################################
# set variables for each system
#

my $wuBonus = 5;
my $coolBonus = 20;

#####################################################
my $rows;
my $row;
my $queryText;
my $count;

my $writeupCount = 0;
my $heavenTotalReputation = 0;
my $coolCount = 0;
my $xp = 0;
my $upvotes = 0;
my $NodeHeavenCoolCount = 0;

#
# Experience
#
$queryText = &quot;SELECT experience FROM user WHERE user_id=$uid&quot;;
$rows = $DB-&gt;{dbh}-&gt;prepare($queryText);
$rows-&gt;execute()
   or return $rows-&gt;errstr;
$xp = $rows-&gt;fetchrow_array();

#
# Writeup Count
#
$queryText = &quot;SELECT COUNT(*) FROM node,writeup WHERE node.node_id=writeup.writeup_id AND node.author_user=$uid&quot;;
$rows = $DB-&gt;{dbh}-&gt;prepare($queryText);
$rows-&gt;execute()
   or return $rows-&gt;errstr;
$writeupCount = $rows-&gt;fetchrow_array();

#
# Total Upvotes
#
my $queryText2;
my $rows2;
my $row2;
$queryText = &quot;SELECT node_id FROM node
	JOIN draft ON node_id=draft_id
	WHERE node.author_user=$uid&quot;;
$rows = $DB-&gt;{dbh}-&gt;prepare($queryText);
$rows-&gt;execute()
   or return $rows-&gt;errstr;
$queryText2 = &quot;SELECT COUNT(vote_id) FROM vote WHERE weight&gt;0 AND vote_id=?&quot;;
$rows2 = $DB-&gt;{dbh}-&gt;prepare($queryText2);
while($row = $rows-&gt;fetchrow_arrayref)
{
   $rows2-&gt;execute($$row[0]);
   $upvotes += $rows2-&gt;fetchrow_array();
}

#
# Heaven Total Reputation
#
$queryText = &quot;SELECT SUM(heaven.reputation) AS totalReputation FROM heaven WHERE heaven.type_nodetype=117 AND heaven.author_user=$uid&quot;;
$rows = $DB-&gt;{dbh}-&gt;prepare($queryText);
$rows-&gt;execute()
   or return $rows-&gt;errstr;
while($row = $rows-&gt;fetchrow_arrayref)
{
   $heavenTotalReputation = $$row[0];
}

#
# Cool Count
#
$queryText = &quot;SELECT COUNT(*) FROM node 
	JOIN coolwriteups ON node_id=coolwriteups_id
	WHERE node.author_user=$uid&quot;;
$rows = $DB-&gt;{dbh}-&gt;prepare($queryText);
$rows-&gt;execute()
   or return $rows-&gt;errstr;
$coolCount = $rows-&gt;fetchrow_array();

#
# Node Heaven Cool Count
#
$queryText = 'SELECT COUNT(*) from coolwriteups,heaven where coolwriteups_id=node_id AND author_user='.$$targetUser{node_id};
$rows = $DB-&gt;{dbh}-&gt;prepare($queryText)
   or return $rows-&gt;errstr;
$rows-&gt;execute()
   or return $rows-&gt;errstr;
$NodeHeavenCoolCount = $rows-&gt;fetchrow_array();

if ($heavenTotalReputation &lt; 0) {
   $heavenTotalReputation = 0;
}

#
# cached upvotes and cools from deleted drafts/heaven
#
my ($upcache, $coolcache) = $DB -&gt; sqlSelect('upvotes, cools', 'xpHistoryCache',
	&quot;xpHistoryCache_id=$uid&quot;);

my $newXP = (($writeupCount * $wuBonus) + ($upvotes + $upcache + $heavenTotalReputation) + 
	(($coolCount + $coolcache + $NodeHeavenCoolCount) * $coolBonus));

my $str = '';

$str .= &lt;&lt;INTRO;
&lt;p&gt;This superdoc converts your current XP total to the XP total you would have
   if the new system had been in place since the start of your time as a noder.
   Any excess XP will be converted into GP.&lt;/p&gt;&lt;p&gt;Conversion is permanent; once
   you recalculate, you can not go back. Each user can only recalculate their
   XP one time.&lt;/p&gt;
INTRO

$str.=&quot;&amp;nbsp; &lt;b&gt;User: &quot;.$$targetUser{title}.&quot;&lt;/b&gt;&quot;;
$str.= '&lt;table class=&quot;mytable&quot;&gt;
   &lt;tr class=&quot;oddrow&quot;&gt;
   &lt;td&gt;Current XP:&lt;/td&gt;
   &lt;td style=&quot;text-align:right&quot;&gt;'.$xp.'&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr class=&quot;evenrow&quot;&gt;
   &lt;td&gt;Writeups:&lt;/td&gt;
   &lt;td style=&quot;text-align:right&quot;&gt;'.$writeupCount.'&lt;/td&gt;
   &lt;tr class=&quot;oddrow&quot;&gt;
   &lt;td&gt;Upvotes Received:&lt;/td&gt;
   &lt;td style=&quot;text-align:right&quot;&gt;'.($upvotes + $upcache + $heavenTotalReputation).'&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr class=&quot;evenrow&quot;&gt;
   &lt;td&gt;C!s Received:&lt;/td&gt;
   &lt;td style=&quot;text-align:right&quot;&gt;'.($coolCount + $coolcache + $NodeHeavenCoolCount).'&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr class=&quot;oddrow&quot;&gt;
   &lt;td&gt;&lt;b&gt;Recalculated XP:&lt;/b&gt;&lt;/td&gt;

   &lt;td style=&quot;text-align:right&quot;&gt;&lt;b&gt;'.$newXP.'&lt;/b&gt;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;/table&gt;';

if ($xp &gt; $newXP) {
   $str.=&quot;&lt;p&gt;&lt;b&gt;Recalculation Bonus!&lt;/b&gt;&amp;nbsp; Your current XP is greater than your recalculated XP, so if you choose to recalculate you will be awarded a one-time recalculation bonus of  &lt;b&gt;&quot;.($xp - $newXP).&quot; GP!&lt;/b&gt;&lt;/p&gt;&quot;;
   }

$str.=&quot;&lt;p&gt;&lt;/p&gt;&quot;;

$str.=$query-&gt;start_form();
$str.=$targetStr;
$str.=$query-&gt;hidden('node_id', $$NODE{node_id});
$str.= $query-&gt;checkbox(-name=&gt;'confirm',
-value=&gt;'wakaru',
-label=&gt;'I understand that recalculating my stats is permanent, and that I can never go back once I have done so.') . '&lt;/p&gt;';
$str.=$query-&gt;submit('recalculate_XP','Recalculate!');
$str.=$query-&gt;end_form();

if ($query-&gt;param('recalculate_XP')) {
   my $warnstr;
   if ($query-&gt;param('confirm') eq 'wakaru') {
      $APP-&gt;securityLog($NODE, $USER, &quot;$$USER{title} recalculated $$targetUser{title}'s XP&quot;);
      $APP-&gt;adjustExp($targetUser, (-$xp));
      $APP-&gt;adjustExp($targetUser, $newXP);
      $$targetVars{hasRecalculated} = 1;
      $DB -&gt; sqlDelete('xpHistoryCache', &quot;xpHistoryCache_id=$uid&quot;);
      setVars $targetUser, $targetVars;
      $str= &quot;&lt;p&gt;Recalculation complete! You now have &lt;b&gt;&quot;.$newXP.&quot; XP&lt;/b&gt;&quot;;
      if ($xp &gt; $newXP) {
         $$targetUser{GP} += ($xp-$newXP);
         updateNode($targetUser, -1);
         $$targetVars{oldexp} = $$targetUser{experience};
  	    $str.=&quot; and &lt;b&gt;&quot;.$$targetUser{GP}.&quot; GP&lt;/b&gt;.&quot;;
      } else {
          $str.=&quot;.&quot;;
      }
   } else {
      $warnstr = &quot;&lt;p&gt;&lt;b&gt;!! Note !! You must check the box to acknowledge you understand before your XP can be recalculated.&lt;/b&gt;&lt;/p&gt;&quot;;
   }
   return $warnstr.$str;
} else {
  return $str;
}
%]</doctext>
  <type_nodetype>14</type_nodetype>
</node>

<node>
  <node_id>1206744</node_id>
  <type_nodetype>14</type_nodetype>
  <doctext>[%

#constants
my $UID = getId($USER);
my $isGuest = $APP-&gt;isGuest($USER);
my $isRoot = $APP-&gt;isAdmin($USER);

return 'Sorry, but only registered members can use the Noding Speedometer.' if $isGuest;

my $user_in = $query-&gt;param('speedyuser');
my $username = $user_in || $$USER{title};
$username = encodeHTML($username);
# A non-number will break the page, so:
my $clock_nodes = $query-&gt;param('clocknodes');
unless ($clock_nodes) {$clock_nodes=50};
unless ($clock_nodes =~ /^[0-9]+$/) {
  return &quot;Please enter a number of nodes greater than 0.&quot;;
}
my $str = htmlcode('openform').&quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Username: &lt;/td&gt;&lt;td&gt;&lt;input type=\&quot;text\&quot; name=\&quot;speedyuser\&quot; value=\&quot;$username\&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Nodes to clock: &lt;/td&gt;&lt;td&gt;&lt;input type=\&quot;text\&quot; name=\&quot;clocknodes\&quot; value=\&quot;&quot;.$clock_nodes.&quot;\&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;.htmlcode('closeform').&quot;&lt;br&gt;&quot;;

  return $str.=&quot;Okay, the radar gun's ready.  Who should we clock?&quot; unless($user_in);

  my $u = getNode($user_in, 'user');
  return $str.=&quot;&lt;br&gt;&lt;br&gt;Your aim is way off. &quot; . encodeHTML($user_in) . &quot; isn't a user. Try again.&quot; unless($u);

  my $initcnt = $DB-&gt;sqlSelect(&quot;count(*)&quot;, &quot;node&quot;, &quot;author_user=$$u{user_id} AND type_nodetype=&quot;.getId(getType('writeup')));

  return $str.=&quot;&lt;br&gt;&lt;br&gt;Um, user $$u{title} has no writeups!&quot; if ($initcnt == 0);

  $str.= &quot;$$u{title} has &lt;b&gt;$initcnt&lt;/b&gt; nodes in total. &quot;;
  my $cnt;

  if($initcnt &gt;= $clock_nodes){$cnt = $clock_nodes;}else{$str .=&quot;Since it's less than &quot;.$clock_nodes.&quot;, we'll just clock them for $initcnt.&lt;br&gt;&quot;; $cnt = $initcnt};

  my $lastcnt = $DB-&gt;sqlSelect(&quot;TO_DAYS(NOW())-TO_DAYS(publishtime)&quot;, &quot;node JOIN writeup ON writeup_id=node_id&quot;, &quot;author_user=$$u{node_id} ORDER BY publishtime DESC limit &quot;.($cnt-1).&quot;,1&quot;);

if ($lastcnt &lt; 1) {
  $str.=&quot;&lt;br&gt;&lt;br&gt;Wait a while, &quot;;
  return $str.&quot;do at least one [day|lap] around the track before timing yourself.&quot; if($$USER{node_id} == $$u{node_id});
  return $str.&quot;let [&quot;.$$u{title}.&quot;] do at least one [day|lap] around the track before timing them.&quot;;
}

my $speed = $lastcnt/$cnt;

  $str .= &quot;To write the last $cnt nodes, it took $$u{title} $lastcnt days.   This works out at &lt;b&gt;&quot;.sprintf(&quot;%.2f&quot;, $speed).&quot;&lt;/b&gt; days per node.&lt;br&gt;&lt;br&gt;&quot;;

# Setting arbitrary speed values. I guess 1 node per day or faster is RED hot, less than 3 days per node is ORANGE, less than 7 days per node is YELLOW, and anything slower is GREEN.

my $color = &quot;white&quot;;
my $width = &quot;0&quot;;
my $comment = &quot;&quot;;

    SWITCH: {
	if ($speed&lt;=0.75) { $color=&quot;#6600CC&quot;; $width=&quot;100&quot;; $comment=&quot;$$u{title} has broken the speedometer and is probably not even human...&quot;; last SWITCH; }
	if ($speed&lt;=1) { $color=&quot;red&quot;; $width=&quot;90&quot;; $comment=&quot;[THE IRON NODER CHALLENGE|IRON NODER] speed! $$u{title} has been issued a [social life|ticket].&quot;; last SWITCH; }
	if ($speed&lt;=3) { $color=&quot;orange&quot;; $width=&quot;75&quot;; $comment=&quot;Pretty fast! A warning and a doughnut bribe may be in order.&quot;; last SWITCH; }
	if ($speed&lt;=7) { $color=&quot;yellow&quot;; $width=&quot;50&quot;; $comment=&quot;Nothing the node police need to worry about just yet.&quot;; last SWITCH; }
	if ($speed&lt;=20) { $color=&quot;green&quot;; $width=&quot;25&quot;; $comment=&quot;We all get there in our own time, even if we cause tailbacks on the way...&quot;; last SWITCH; }
	if ($speed&gt;20) { $color=&quot;#330000&quot;; $width=&quot;10&quot;; $comment=&quot;We politely suggest that you exit your vehicle and get a taxi. Perhaps the conversation will inspire you.&quot;; last SWITCH; }
    }

  $str.= '&lt;p align=&quot;center&quot;&gt;&lt;table width=&quot;300&quot; style=&quot;margin:auto;&quot; cellpadding=0 cellspacing=0&gt;';
  $str.= '&lt;tr&gt;&lt;td&gt;&lt;table width=&quot;100%&quot; border=0 cellpadding=0 cellspacing=0&gt;';
  $str.= '&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;small&gt;&lt;b&gt;NODING SPEED&lt;/b&gt;&lt;/small&gt;';
  $str.= '&lt;table width=&quot;260&quot; border=0 cellpadding=0 cellspacing=2 style=&quot;border: solid 1px black;&quot;&gt;';
  $str.= '&lt;tr&gt;&lt;td bgcolor=&quot;gray&quot; align=&quot;left&quot;&gt;';
  $str.= '&lt;table width=&quot;'.$width.'%&quot; border=0 cellpadding=0 cellspacing=0 bgcolor=&quot;'.$color.'&quot;&gt;';
  $str.= '&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/clear.gif&quot; width=1 height=13 alt=&quot;&quot; border=0&gt;';
  $str.= '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;';
  $str.= '&lt;p align=&quot;center&quot;&gt;'.$comment.'&lt;/p&gt;';
  $str.= '&lt;hr width=&quot;25%&quot;&gt;';

# Projections. Because we're allowing them to clock X nodes, it makes sense to base the
# projections only on the last X nodes rather than basing it on their overall node-fu.
# The formula for average XP per writeup is: ((5 * NoWUs) + (20 * C!s) + upvotes) / NoWUs

# If Writeups are the holdup then:
# No. of days to levelup = writeups required * days per node
# If xp is the holdup (as will usually now be the case) then:
# No. of days to levelup = XP to next level / ((1/days per node) * AVG XP)

  my $lvwu = getVars(getNode(&quot;level writeups&quot;, &quot;setting&quot;));
  my $lvxp = getVars(getNode(&quot;level experience&quot;, &quot;setting&quot;));
  my $curlvl = $APP-&gt;getLevel($u);
  my $curxp = $$u{experience};
  my $req_wu = ($$lvwu{$curlvl+1}) - $initcnt;
  my $req_xp = ($$lvxp{$curlvl+1}) - $curxp;
  my $daystolevel_wu = 0;
  my $daystolevel_xp = 0;
  my $daystolevel = 0;
  my $total_upvotes = 0;
  my $total_cools = 0;

my $clocked_nodes = $DB-&gt;sqlSelectMany('title, node_id, reputation, cooled', 'node inner join writeup on node_id=writeup_id', &quot;author_user=$$u{node_id} and type_nodetype=&quot;.getId(getNode('writeup','nodetype')), 'order by publishtime desc limit 0, '.$cnt);

while (my $N = $clocked_nodes-&gt;fetchrow_hashref) {
                my ($name, $type) = ($$N{title} =~ m|(.*) \(([a-z-]+)\)|);

		if (($name eq &quot;E2 Nuke Request&quot;) or
	        ($name eq &quot;Edit these E2 titles&quot;) or
        	($name eq &quot;Nodeshells marked for destruction&quot;) or
	        ($name eq &quot;Broken Nodes&quot;)) {
		        next;
		}

                my ($votescast) = $DB-&gt;sqlSelect('count(*)', 'vote', 'vote_id='.$$N{node_id});
		my $upvotes = ($votescast + $$N{reputation})/2;
		if (int($upvotes) != $upvotes) {
			$upvotes = $DB-&gt;sqlSelect('count(*)', 'vote', 'vote_id='.$$N{node_id}.' and weight=1');}
                $total_upvotes += $upvotes;
                $total_cools += $$N{cooled};
		}

  my $AVG = (($cnt * 5) + ($total_cools * 20) + $total_upvotes) / $cnt;
  my $nodes_needed=0;


#debug 
#$str.= &quot;reqwu: $req_wu, reqxp: $req_xp, lvwu: &quot;.$$lvwu{$curlvl+1}.&quot;, initcnt: $initcnt, cnt: $cnt&quot;;


  if ($req_wu &gt; 0) {$daystolevel_wu = $req_wu * $speed; $nodes_needed = $req_wu} else {$req_wu = 0;}
  if ($req_xp &gt; 0) {$daystolevel_xp = $req_xp / ((1/$speed) * $AVG); my $temp = $req_xp / $AVG; if ($temp &gt; $nodes_needed) {$nodes_needed = $temp;}} else {$req_xp = 0;}
  if ($daystolevel_wu &gt; $daystolevel_xp) {$daystolevel = $daystolevel_wu;} else {$daystolevel = $daystolevel_xp;}

  $str.=&quot;&lt;p&gt;&lt;big&gt;&lt;strong&gt;Level-up Projections&lt;/strong&gt;&lt;/big&gt;&lt;/p&gt;&quot;;
  $str.=&quot;&lt;p&gt;$$u{title} needs &lt;b&gt;$req_wu&lt;/b&gt; nodes and &lt;b&gt;$req_xp&lt;/b&gt; experience to reach Level &quot;.($curlvl + 1).&quot;. Based on a noding speed of &lt;b&gt;&quot;.sprintf(&quot;%.2f&quot;, $speed).&quot;&lt;/b&gt; days per node, &quot;;
  $str.=&quot;and an average XP per node of &lt;b&gt;&quot;.sprintf(&quot;%.2f&quot;, $AVG).&quot;&lt;/b&gt; (clocked over the last $cnt nodes), &quot; if ($req_xp &gt; 0);
  $str.= &quot;this will take &lt;b&gt;&quot;.sprintf(&quot;%.0f&quot;, $nodes_needed).&quot;&lt;/b&gt; nodes, written over a period of &lt;b&gt;&quot;.sprintf(&quot;%.0f&quot;, $daystolevel).&quot;&lt;/b&gt; days.&lt;/p&gt;&quot;;

  return $str;

%]</doctext>
  <title>Noding speedometer</title>
</node>

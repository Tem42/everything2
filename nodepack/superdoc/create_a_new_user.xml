<node>
  <doctext>[%
use DateTime;

return &quot;New user creation disabled from dev server. &quot;
	. &quot;If you want in, go to e2 and ask a member of [edev] to let you in.&quot;
	if $HTMLVARS{isDevServer} ;

my $str;
my @addrs = htmlcode('get ips');

#for debugging, let logged in admins have debug checkbox
my $isRoot = exists $HTMLVARS{group_gods}{getId($USER)};

### Generate the CAPTCHA (the keys must be different for .com, .net, and .org)
use HTML::Tiny;
use Captcha::reCAPTCHA;
my $captcha = Captcha::reCAPTCHA-&gt;new;
my $reCAPTCHAPublicKey = '';
my $reCAPTCHAPrivateKey = '';
my $server = $ENV{HTTP_HOST};

if($server =~ m/everything2\.com$/){
	$reCAPTCHAPublicKey = '6LfsXAIAAAAAABqYVncS2qc2o7P8rHoxOH_3QH2t';
	$reCAPTCHAPrivateKey = '6LfsXAIAAAAAAM4PtmzdbhTmpiieSNJ2YUBnjPRd';
}elsif($server =~ m/everything2\.net$/){
	$reCAPTCHAPublicKey = '6LfuXAIAAAAAAIeVU24N_zB8Ez0kK9rzNeOKx8HX';
	$reCAPTCHAPrivateKey = '6LfuXAIAAAAAAAA9bE5SO5c60BH69t6lT4B4ShY2';
}elsif($server =~ m/everything2\.org$/){
	$reCAPTCHAPublicKey = '6LfvXAIAAAAAAI2xn_O42yiTXbB_e-9gA6AfXVi8';
	$reCAPTCHAPrivateKey = '6LfvXAIAAAAAAAOPw0yZVfmK4Nviw-KTiLfMdq_g';
}
my $reCAPTCHA = $captcha-&gt;get_html( $reCAPTCHAPublicKey );


### Generate the Login HTML stub
local *generateLogin = sub {
	$query-&gt;start_form
	.'&lt;input type=&quot;hidden&quot; NAME=&quot;op&quot; VALUE=&quot;newuser&quot; /&gt;'
	.$query-&gt;hidden('node_id', getId($NODE))
	.'&lt;div&gt;&lt;strong&gt;Username&lt;/strong&gt;&lt;br /&gt;'
	.'&lt;input type=&quot;text&quot; NAME=&quot;nu_name&quot; maxlength=&quot;20&quot; VALUE=&quot;&quot; /&gt;'
	.'&lt;/div&gt;&lt;br /&gt;'
	.'&lt;div&gt;&lt;strong&gt;Real Name&lt;/strong&gt;&lt;br /&gt;'
	.$query-&gt;textfield('nu_realname', '', 20)
	.'&lt;/div&gt;&lt;br /&gt;'
	.'&lt;div&gt;&lt;strong&gt;Email Address&lt;/strong&gt;&lt;br /&gt;'
	.$query-&gt;textfield('nu_email', '', 20)
	.'&lt;/div&gt;&lt;br /&gt;'
	.'&lt;div&gt;&lt;strong&gt;Password&lt;/strong&gt;&lt;br /&gt;'
	.$query-&gt;password_field('nu_password', '', 20)
	.'&lt;/div&gt;&lt;br /&gt;'
	.'&lt;div&gt;&lt;strong&gt;Password, again&lt;/strong&gt;&lt;br /&gt;'
	.$query-&gt;password_field('nu_password2', '', 20)
	.'&lt;/div&gt;&lt;br /&gt;'
	.'&lt;div&gt;&lt;strong&gt;Show your Humanity&lt;/strong&gt;&lt;br /&gt;'
	.$reCAPTCHA
	.'&lt;/div&gt;&lt;br /&gt;'
	.$query-&gt;submit('sexisgood', 'submit')
	.$query-&gt;end_form;
};

my $testCreateOnly = 0;


local *debugLog = sub {
	my $msg = $_[0] || '';

	#internal host from [admin searchform] (htmlcode)
	my $servername = `hostname`;
	chomp $servername;
	$servername =~ s/\..*//g;

	# Grab all IP addresses and log all of them
	my $addr = join ' - ', @addrs;
	#address from general container
	#maybe use later for acount-creation-abuse ban

	$msg .= ' on '.$servername.&quot; as $ENV{SERVER_NAME}&quot;;
	$msg .= ' IP '.$addr;
	$msg .= ' (testing only)' if $testCreateOnly;
	$msg = $dbh-&gt;quote($msg);
	$DB-&gt;sqlInsert('seclog', {
		'seclog_node'=&gt;$$NODE{node_id},
		'seclog_user'=&gt;$$USER{user_id},	#probably just guest user
		'seclog_details'=&gt;$msg,
	});
};

my $errorMessage = '';

if ($query-&gt;param('op') eq 'newuser') {

	my $doNotSend = 0;
	my $realname = $query-&gt;param('nu_realname');
	$realname =~ s/(\\g|;|&quot;|'|`)//g;  # No SQL injection here.
	#my $realname = '';

	my $email = $query-&gt;param('nu_email');
	$email =~ s/\s+//g;
	#if * is 1 or more characters, checking for *@*.*
	# local address portion may contain alpha-numeric and a bunch of punctuation
        # host portion may contain only alphanum, dots, and dashes
	unless ($email =~ /^([A-Za-z0-9!#\$%&amp;'*+\/=?^_`{|}~\.-]+\@[a-zA-Z0-9\.-]+\.[a-zA-Z]{2,4})$/) {
		$errorMessage = &quot;You must provide a valid email address.&quot;;
	}

	$email = $1;

	if ($email =~ /^\./ || $email =~ /\.\@/ || $email =~ /\.\./) {
		$errorMessage = &quot;You must provide a valid email address.&quot;;
		$email = undef;
	}


	my $name = $query-&gt;param('nu_name');
	$name =~ s/\t//g;

##################
#CHECK THE CAPTCHA

my $challenge = $query-&gt;param('recaptcha_challenge_field');
my $response = $query-&gt;param('recaptcha_response_field');
my $result = $captcha-&gt;check_answer( $reCAPTCHAPrivateKey, $ENV{'REMOTE_ADDR'}, $challenge, $response );

unless ( $result-&gt;{is_valid} ) {
	debugLog('attempted create user ['.encodeHTML($name,1).'], but failed CAPTCHA.');
	$errorMessage=&quot;You did not correctly type the two reCAPTCHA words.  Please try again.&quot;;
}



####################
#CHECK IF THE USER EXISTS

	my $olduser;
	my @allUserTypes = ('user', 'usergroup', 'superdoc', 'restricted_superdoc', 'nodetype', 'document', 'superdocnolinks', 'fullpage');
	foreach(@allUserTypes) {
		$olduser = getNode($name, $_) unless $olduser;
	}

	if($olduser) {
		debugLog('attempted create user ['.encodeHTML($name,1).'], but exactly matches: ID '. getId($olduser) .', type '.$$olduser{type_nodetype});
		$errorMessage = &quot;Sorry, '&quot;.linkNode($olduser).&quot;' already exists.  Pick a variation, or try another name...&quot;;
	}



###################
#CHECK FOR &quot;_&quot; vs &quot; &quot; CONFLICTS

	my $match=lc($name);
	$match=~s/[_ ]/_/g;
	$match=~s/\\/\\\\/g;

	my $match2 = lc($name);
	$match2 =~ s/[_ ]/[_ ]/g;
	$match2 =~ s/\\/\\\\/g;

	my $closeuser = 0;
	foreach(@allUserTypes) {
		$_ = 'type_nodetype='.getId(getType($_));
	}
	my $csr =$DB-&gt;sqlSelectMany('title','node','title like '.$dbh-&gt;quote($match).' AND (' . join(' OR ',@allUserTypes) . ')');
	while(my ($u) = $csr-&gt;fetchrow) {
		next unless $u =~ m/^$match2$/i;
		$closeuser = 1;
	}

	if($closeuser) {
		debugLog('attempted create user &quot;'.encodeHTML($name,1).'&quot;, but close to another');
		$errorMessage = &quot;Sorry, your username clashes with a username which already exists.  Pick a variation, or try another name...&quot;;  
	}



##############################
#USERNAME SANITY CHECKING

	unless ($name =~ m/\w/) {
		$errorMessage=&quot;Uh...  how about some more letters in that username?&quot;;
	}

	if($name =~ m/[\[\]\&lt;\&gt;\&amp;\{\}\|\/\\]/) {
		$errorMessage=&quot;That username has a special character in it.  Try something else.&quot;;
	}

	if(($name =~ m/^\s/) or ($name =~ m/\s$/)) {
		$errorMessage=&quot;Sorry, your username may not have spaces at either end.&quot;;
	}

	if ($name =~ m/\_/ &amp;&amp; $name =~ m/ /) {
		$errorMessage=&quot;Usernames cannot contain both spaces and underscores.&quot;;
	}

	if($name =~ m/\s\s/) {
		$errorMessage=&quot;Please don't use multiple spaces in a row.&quot;;
	}



##################
#MAKE SURE THEY ENTERED THE SAME PASSWORD TWICE
my $passwd = $query-&gt;param('nu_password');
my $passwd2 = $query-&gt;param('nu_password2');
unless($passwd eq $passwd2){
	$errorMessage=&quot;Your passwords don't match.  Please try again.&quot;;
}



##################
#CHECK FOR REGISTRATION UNDER A BLACKLISTED IP
#  - make them jump through all the other hoops
#    before finding out if they're on the blacklist.


for my $address (@addrs) {

	my $ipblacklist_id =
		$DB-&gt;sqlSelect(
			'ipblacklist_id'
			, 'ipblacklist'
			, 'ipblacklist_ipaddress = ' . $DB-&gt;quote($address)
		);

	if($ipblacklist_id){
					debugLog('attempted create user ['.encodeHTML($name,1).'] from blacklisted IP - '.encodeHTML($address).'.');
					$errorMessage=&quot;We're sorry, but we can't accept new user signups from this IP address.&quot;;
	}

}



##################
#CREATE &quot;ERROR&quot; IF ONLY TESTING

	if (($errorMessage eq '')&amp;&amp;($testCreateOnly)) {
		$errorMessage= 'You would be able to create user='.$name.', email='.$email.'.';
	}



##################
#NO ERROR? CREATE USER

	if ($errorMessage eq '') {
		debugLog('success create user ['.encodeHTML($name,1).']');

		### Generate an Authentication Hash
		my @chars = ( 'A' .. 'Z', 'a' .. 'z', 0 .. 9);
		my $validationkey = join('', @chars[ map { rand @chars } ( 1 .. 25 ) ]);
 
		### Create the User Node
		my $NEWUSER = $DB-&gt;insertNode($name, $DB-&gt;getType('user'), -1, {
			'realname' =&gt; $realname,
			'email' =&gt; $email,
			'nick' =&gt; $name,
			'passwd' =&gt; $passwd,
			'validationkey' =&gt; $validationkey
		});
		getRef $NEWUSER;
		$$NEWUSER{author_user} = getId ($NEWUSER);
		$DB-&gt;updateNode($NEWUSER,-1);
		$HTMLVARS{newuser} = getId($NEWUSER);

		map {
			$DB-&gt;sqlInsert(
				&quot;iplog&quot;
				, {iplog_user =&gt; $$NEWUSER{user_id}
				, iplog_ipaddy =&gt; $_}
			)
		} @addrs;
		my $addr = join ',', @addrs;

		### Save a few initial settings
		my $uservars = getVars( $NEWUSER );
		$$uservars{ 'showmessages_replylink' } = 1;
		$$uservars{ipaddy} = $addr;
		$$uservars{preference_last_update_time} = DateTime-&gt;now()-&gt;epoch();

		$$uservars{infected} = 1 if htmlcode('checkInfected') == 1;

		setVars( $NEWUSER, $uservars );

		### Put the new user on email suspension until he or she verifies his or her account
		$DB-&gt;sqlInsert(&quot;suspension&quot;, 
			{&quot;suspension_user&quot; =&gt; $$NEWUSER{node_id},  
			&quot;suspension_sustype&quot; =&gt; '1948205',        ### Email Suspention Type Node ID
			&quot;suspendedby_user&quot; =&gt; '113'}              ### Root's Node ID
		);


		### Send the User a Welcome Message
		my $msgText = &quot;Hi there and welcome to E2! I hope you're enjoying the site. If you haven't already done so, I recommend reading both [E2 Quick Start] and [Links on Everything2] before you start writing anything. If you have any questions or need help, feel free to ask any editor (we all have a \$ next to our names in the Other Users list)&quot;;
		$HTMLVARS{msgparams} = {
			'author_id' =&gt; getId(getNode('Virgil','user')),
			'recipient_id' =&gt; $$NEWUSER{author_user},
			'message' =&gt; $msgText,
		};
		my $sendResult = htmlcode('sendPrivateMessage','');

		### Send the User a Welcome Email
		use Everything::MAIL;
		my ($n) = getNodeWhere({title=&gt;'Welcome to the Everything2 community!'},
		 						$DB-&gt;getType('mail')
		);
		$$n{doctext} =~ s/\&lt;name\&gt;/$$NEWUSER{realname}/g;
		$$n{doctext} =~ s/\&lt;user\&gt;/$$NEWUSER{title}/g;
		$$n{doctext} =~ s/\&lt;passwd\&gt;/$$NEWUSER{passwd}/g;
		$$n{doctext} =~ s/\&lt;user_id\&gt;/$$NEWUSER{user_id}/g;
		$$n{doctext} =~ s/\&lt;validationkey\&gt;/$$NEWUSER{validationkey}/g;
		$$n{doctext} =~ s/\&lt;site_name\&gt;/$HTMLVARS{site_name}/g;
		$$n{doctext} =~ s/\&lt;homenode\&gt;/http:\/\/$ENV{SERVER_NAME}\/index\.pl\?node=$$NEWUSER{title}\&amp;type=user/g;
		$$n{doctext} =~ s/\&lt;site_url\&gt;/http:\/\/$ENV{SERVER_NAME}\//g;
		$$n{doctext} =~ s/\&lt;login\&gt;/http:\/\/$ENV{SERVER_NAME}\/index\.pl\?node_id=$HTMLVARS{login_node}/g;
		$$n{doctext} =~ s/\&lt;verify_email_url\&gt;/http:\/\/$ENV{SERVER_NAME}\/index\.pl\?node_id=$HTMLVARS{verifyEmailAccount_node}/g;
		$$n{doctext} =~ s/\&lt;servername\&gt;/$ENV{SERVER_NAME}/g;
		node2mail($$NEWUSER{email},$n, 1);

		my $homenodeLink = linkNode($NEWUSER,&quot;your homenode&quot;);
		$str.= &lt;&lt;__HERE__
		&lt;div id='login_info' style='width: 600px; margin-left: 50px;'&gt;
			
			&lt;h3&gt;Welcome, $$NEWUSER{realname}!&lt;/h3&gt;

			&lt;p&gt;Your new user account has been created, and an email has been sent to the address you provided.  &lt;strong&gt;Check your email for an authentication code&lt;/strong&gt;.  You'll need to click on that link before you start writing with us.  Save this email for future reference: it introduces you to our community and contains info on what Everything2's all about.&lt;/p&gt;

			&lt;p&gt;After you have logged in, you may change your password by visiting $homenodeLink and hitting the &lt;strong&gt;edit user information&lt;/strong&gt; link.&lt;/p&gt;

			&lt;p&gt;The best ways to get started after logging in is to introduce yourself in our chat room (located in the sidebar on the right side of your screen) and [E2 Mentoring Sign-Up|sign up for a mentor] to help you grow your writing.&lt;/p&gt;
		
			&lt;h2&gt;[Welcome to Everything|Welcome to Everything2]!&lt;/h2&gt;

		&lt;/div&gt;
__HERE__
;

		return $str;
	}

}


######################
#SHOW CREATION FORM

	$str.=&quot;&lt;h3&gt;Thanks for showing interest in Everything2!&lt;/h3&gt;&quot;
	.&quot;&lt;p style=\&quot;margin: 10px 50px; width: 600px; \&quot;&gt; Creating a new user account will allow you to contact writers on the site and submit writeups of your own on any subject you like.&lt;/p&gt;&quot;;  

	$str.= &quot;&lt;h2 class='error_message'&gt;$errorMessage&lt;/h2&gt;&quot; if $errorMessage;

	$str.= &quot;&lt;h3&gt;Getting to know you&lt;/h3&gt;&quot;;

	$str .= &quot;&lt;div id='login_form' style='width: 600px; margin-left: 50px;'&gt;&quot; .generateLogin().&quot;&lt;/div&gt;&quot;;

	$str .= '&lt;h3&gt;Important Information&lt;/h3&gt;

	&lt;div id=&quot;login_info&quot; style=&quot;width: 600px; margin-left: 50px;&quot;&gt;

	&lt;h4&gt;Email Privacy Policy&lt;/h4&gt;

	&lt;p&gt;We are not going to send you junk email &quot;member updates&quot;, sell your address to spammers, or display your email address for people to see. We collect your email solely so that you can retrieve your password in case you forget it.&lt;/p&gt;

	&lt;h4&gt;No Spam or Advertising&lt;/h4&gt;

	&lt;p&gt;If you plan on using our site to promote your web site, business, or what-have-you free of charge, please don\'t bother. It\'s not worth your time and it wastes ours, too. All it does is annoy the few site users who see your post during the five minutes that it takes our staff to notice it and delete it. We will also not hesitate to ban you for plugging your goods on our site. &lt;b&gt;ATTENTION FAKE PROFILERS AND FORUM SPAMMERS: AS OF APRIL 2010, NEW ACCOUNTS ADVERTISING ANY PRODUCT, SERVICE, OR WEB SITE (INCLUDING &quot;PERSONAL&quot; SITES AND BLOGS) IN THEIR PROFILE ARE SUBJECT TO SUMMARY AND INSTANT DELETION. THEIR DETAILS WILL ALSO BE SUBMITTED TO PUBLIC BLACKLISTS FOR OTHER WEB SITES\' USE.&lt;/B&gt;&lt;/p&gt;

&lt;h4&gt;Underage users&lt;/h4&gt;

&lt;p&gt;Everything2 may include member-created content designed for an adult audience. Viewing this content does not require an account. For logged-in account holders, Everything2 may display text conversations conducted by adults and intended for an adult audience. On-site communications are not censored or restricted by default. Users under the age of 18 are advised that they should expect to be interacting primarily with adults and that the site may not be considered appropriate by their parents, guardians, or other powers-that-be. Everything2 is not intended for use by children under the age of 13 and does not include any features or content designed to appeal to children of that age.&lt;/p&gt;

	&lt;/div&gt;';



	return $str;

%]
</doctext>
  <node_id>101</node_id>
  <type_nodetype>14</type_nodetype>
  <title>Create a New User</title>
</node>

<node>
  <title>Magical Writeup Reparenter</title>
  <type_nodetype>14</type_nodetype>
  <doctext>&lt;p align=&quot;right&quot;&gt;&lt;small&gt;Bugs to to [rootbeer277]&lt;/small&gt;&lt;/p&gt;

[%
return 'No magic for you, I\'m afraid.' unless $APP-&gt;isEditor($USER);

## Writeup reparenting tool
## This is called from e2node or writeup admin tools, or
## the Master Control Nodelet
##   If called from an e2node, it is passed old_e2node_id
##   If called from a writeup it is passed old_writeup_id
##     and we'll need to lookup its parent to get the old_e2node_id
## Needs old_e2node_id, new_e2node_id, list of writeup_ids
## Once the reparenting is done, the new e2node will need
##   to be repaired and reordered.
##   Update this tool to do that automatically?

##########
## getNodeByNameOrId( $node_id_or_name, $nodetype )
##
## Utility routine to get a node by ID or by name.  In either
##  case, insures the proper nodetype of node is retreived.
## Returns undef if a matching node isn't found.
## Otherwise, returns a noderef
my $getNodeByNameOrId = sub {
	my ($node_id_or_name, $nodetype) = @_;
	my $target_node = undef;

	if ($node_id_or_name =~ m/\D/)
		{ $target_node = getNode($node_id_or_name, $nodetype); }
	else
		{
		$target_node = getNodeById($node_id_or_name, $nodetype);
		$target_node = undef 
			unless $target_node
			&amp;&amp; $target_node-&gt;{type}{title} eq $nodetype
			;
		}

	return $target_node;

};

##########
## Declare variables
my $old_e2node_id = $query-&gt;param('old_e2node_id');
                      # node_id of old parent
my $old_e2node;       # noderef to the node if old_e2node_id or writeup's parent checks out
my $old_writeup_id = $query-&gt;param('old_writeup_id');
                      # node_id of writeup
my $writeup;          # noderef to writeup if old_writeup_id checks out
my $parent_node;      # noderef to the parent of writeup, if it exists

my $new_e2node_id = $query-&gt;param('new_e2node_id');
                      # node_id of new parent
my $new_e2node;       # noderef to the new parent node if new_e2node_id checks out

my $inputs_string;    # instructions and fields for inputs
my $selection_string; # instr/fields for selecting writeups to move
my $feedback_string;  # instr/fields for feedback after move is done

my %success_reparent; # Keep track of successful reparentings so we don't
                      #  give weird feedback after submission

##########
## First get the old_writeup_id
if ( defined $old_e2node_id )
	{
	$old_e2node = $getNodeByNameOrId-&gt;($old_e2node_id, 'e2node');
	}
## only look at old_writeup_id if we don't get a old_e2node_id
elsif ( defined $old_writeup_id )
	{
	$writeup = $getNodeByNameOrId-&gt;($old_writeup_id, 'writeup');
	$old_e2node =
		$parent_node =
			$getNodeByNameOrId-&gt;($writeup-&gt;{'parent_e2node'}, 'e2node');
	# If this node's parent e2node is invalid, try automatically finding
	#  and reparenting it
	if ($writeup &amp;&amp; !$parent_node)
		{
		my $guessParentTitle = $$writeup{title};
		# strip off '(idea)' writeuptype from title, if present
		#  but be tolerant of writeups where it gets cut off
		$guessParentTitle =~ s/^(.*?)(\([^\(]*)?$/$1/;
		my $potentialParent = getNode($guessParentTitle, 'e2node');
		if ($potentialParent)
			{
			$new_e2node = $potentialParent;
			$query-&gt;param(&quot;reparent_&quot; . $old_writeup_id, 1);
			}
		}
	
	}
	

##########
## Next we check new_e2node_id
if ( defined $new_e2node_id )
	{ 
	$new_e2node = $getNodeByNameOrId-&gt;($new_e2node_id, 'e2node');
	}


##########
## Feedback for moved writeups
## Note that this section comes before the writeup list
## This prevents moved writeups from showing up under the old node

## Order of operations:
##   Foreach writeup to be moved
##     Copy old title for use in feedback
##     Remove writeup from the old nodegroup (unless unparented)
##     Rename writeup to new e2node title (type)
##     Set writeup's parent node
##     Insert writeup into node nodegroup
##     Update writeup
##     Add security log entry
##     /msg writeup author
##     Generate onscreen feedback

if ( ($old_e2node || $writeup) &amp;&amp; $new_e2node )
	{
	my $movedsomething = 0;
	my $newgroup = $new_e2node-&gt;{'group'};
	$newgroup = [ ] unless $newgroup &amp;&amp; ref $newgroup eq 'ARRAY';

	foreach my $move_writeup_id (grep { /^reparent_/ } $query-&gt;param() )
		{
		next unless ($query-&gt;param($move_writeup_id) == 1);
		$move_writeup_id =~ s/^reparent_//;
		my $alreadyinnodegroup = scalar grep { $_ == $move_writeup_id; } @$newgroup;
		my $move_writeup = htmlcode('make node sane', $move_writeup_id);
		next unless $move_writeup;
		$movedsomething = 1;
		$success_reparent{$move_writeup_id} = 1;

		removeFromNodegroup($old_e2node, $move_writeup, -1)
			if ($old_e2node &amp;&amp; $new_e2node-&gt;{'node_id'} != $old_e2node-&gt;{'node_id'});

		my $oldtitle = $move_writeup-&gt;{'title'};
		my $author = getNodeById($move_writeup-&gt;{'author_user'});
		my $authortitle = &quot;bad author&quot;;
		$authortitle = $author-&gt;{'title'} if $author;
		# Reset writeup type just in case it was invalid
		my $writeuptype = $getNodeByNameOrId-&gt;($move_writeup-&gt;{'wrtype_writeuptype'}, 'writeuptype');
		$writeuptype = getNode('idea', 'writeuptype') unless $writeuptype;
		$move_writeup-&gt;{'wrtype_writeuptype'} = $writeuptype-&gt;{'node_id'};
		$move_writeup-&gt;{'title'} = $new_e2node-&gt;{'title'}
			. &quot; ($writeuptype-&gt;{'title'})&quot;;
		$move_writeup-&gt;{'parent_e2node'} = $new_e2node-&gt;{'node_id'};
		insertIntoNodegroup($new_e2node, -1, $move_writeup)
			unless ($alreadyinnodegroup);
		updateNode($move_writeup, -1);
                
                $APP-&gt;securityLog($NODE, $USER, $oldtitle. &quot; by [&quot;.encodeHTML($authortitle).&quot;]&quot;. &quot; was moved to [&quot;.encodeHTML($move_writeup-&gt;{'title'}).&quot;]&quot;);
		$DB-&gt;sqlInsert('message'
			, {msgtext=&gt;'I moved your writeup &quot;['.encodeHTML($oldtitle).']&quot;'
			.' You can now find it at &quot;['.$new_e2node-&gt;{'title'}.']&quot;'
			, author_user =&gt; $USER-&gt;{'node_id'}
			, for_user    =&gt; $move_writeup-&gt;{'author_user'}}
			);
		$feedback_string .= &quot;&lt;p&gt;Didn't insert into nodegroup since it was already in the destination e2node.&lt;/p&gt;&quot; if $alreadyinnodegroup;
		$feedback_string .= &quot;\n&lt;p&gt;&quot;.encodeHTML($oldtitle)
			. &quot; by &quot;.linkNode($author)
			. &quot; has been moved from &quot;;
		$feedback_string .= linkNode($old_e2node) if ($old_e2node);
		$feedback_string .= &quot;&lt;i&gt;an unparented state&lt;/i&gt;&quot; if (!$old_e2node);
		$feedback_string .= &quot; to &quot;.linkNode($new_e2node).&quot;&lt;/p&gt;&quot;;
		}

	# Get nodes with updated groups now that we've moved stuff.
  if ($movedsomething)
		{
		htmlcode('repair e2node', $new_e2node) if ($movedsomething);
		$old_e2node = getNodeById($old_e2node-&gt;{'node_id'}) if $old_e2node;
		$new_e2node = getNodeById($new_e2node-&gt;{'node_id'}) if $new_e2node;
		}

	}

##########
## If we do not have an old_e2node_id and do not have writeups to move
##   Ask for old_e2node_id or writeup_id
## If we do not have new_e2node_id
##   Ask for new_e2node_id
## If we have old_e2node_id or writeup_id
##   Generate list of writeup to move
## If we have writeups to move and new_e2node_id
##   Perform movement, provide feedback

$inputs_string = &quot;\n&quot; . htmlcode('openform');
if ($writeup)
	{
	$inputs_string .= &quot;\n&quot; . $query-&gt;hidden(-name =&gt; 'old_writeup_id');
	$inputs_string .= &quot;\n&lt;p&gt;A writeup id has been supplied: &quot; . $old_writeup_id . &quot;&lt;/p&gt;&quot;; 
	$inputs_string .= &quot;\n&quot;;

	if (!$parent_node &amp;&amp; !$success_reparent{$writeup-&gt;{'node_id'}})
		{
		$inputs_string .= &quot;\n&lt;p&gt;Writeup &quot;.linkNode($writeup)
		.&quot; is unparented!  But we can still move it.&quot;
		.&quot; &lt;/p&gt;&quot;; 
		}
	else
		{
		# Default to moving to parent so the most common problem --
		#  orphaned nodes -- can be easily fixed
		$query-&gt;param('new_e2node_id', $parent_node-&gt;{'title'})
			unless $new_e2node_id;
		}
}

## Old node id
if ($old_writeup_id &amp;&amp; !$writeup)
	{ $inputs_string .= &quot;\n&lt;p&gt;Invalid writeup id provided.&lt;/p&gt;&quot;; }
if ($old_e2node_id &amp;&amp; !$old_e2node)
	{ $inputs_string .= &quot;\n&lt;p&gt;Invalid e2node id provided.&lt;/p&gt;&quot;; }

if (!$writeup)
	{
	if  (!$old_e2node_id)
		{ $inputs_string .= &quot;\n&lt;p&gt;Please provide the node id (or title) of the e2node from which we will be moving.&lt;/p&gt;&quot;; }
	else
		{ $inputs_string .= &quot;\n&lt;p&gt;Old node id:&lt;br&gt;&quot;; }
	$inputs_string .= &quot;\n\t&quot; . $query-&gt;textfield(-name =&gt; 'old_e2node_id');
	if ($old_e2node) 
		{ $inputs_string .= &quot; (Currently: &quot;.linkNode($old_e2node).&quot;)&lt;/p&gt;&quot;; }

	}

## New node id
if ($new_e2node_id &amp;&amp; !$new_e2node &amp;&amp; $new_e2node_id =~ /\D/)
	{ $inputs_string .= &quot;\n\n&lt;p&gt;Invalid new node title provided.&lt;/p&gt;&quot;; }
elsif ($new_e2node_id &amp;&amp; !$new_e2node)
	{ $inputs_string .= &quot;\n\n&lt;p&gt;Invalid new node id provided.&lt;/p&gt;&quot;; }

if (!$new_e2node)
	{ $inputs_string .= &quot;\n\n&lt;p&gt;Please input a node title or id into which we will move the writeup(s):&lt;br&gt;&quot;; }
else
	{ $inputs_string .= &quot;\n\n&lt;p&gt;New node id (or title) for the writeups:&lt;br&gt;&quot;; }
$inputs_string .= &quot;\n\t&quot; . $query-&gt;textfield(-name =&gt; 'new_e2node_id');

if ($new_e2node)
	{ $inputs_string .= &quot; (Currently: &quot;.linkNode($new_e2node).&quot;)&lt;/p&gt;&quot;; }


##########
## list the writeups available in old e2node to move
## note that this section is after the moving area, 
##   this prevents them from being listed under the old node
$selection_string .= &quot;\n&quot;;

my $list_writeups = sub {

	my ($list_node, $mandatory_node) = @_;
	return unless $list_node || $mandatory_node;
	my $mandatory_node_id = $mandatory_node-&gt;{'node_id'} if $mandatory_node;

	my $group = [ ];
	push(@$group, @{$list_node-&gt;{'group'}}) if $list_node &amp;&amp; $list_node-&gt;{'group'};
	## Add writeup to the group if it's not already there
	##  so we can reparent unparented writeups
	if ($mandatory_node &amp;&amp; !(grep { $_ == $mandatory_node_id} @$group))
		{
		push (@$group, $mandatory_node_id);
		$selection_string .= &quot;\n&lt;p&gt;The target writeup &quot;.linkNode($mandatory_node)
			. &quot; was not found in &quot;.linkNode($list_node).&quot;'s nodegroup. &quot;
			. &quot; You may want to move the writeup into the node to fix this.&lt;/p&gt;&quot;
			if $list_node;
		}

	if ($group &amp;&amp; scalar @$group)
		{
		$selection_string .= &quot;\n&lt;ul&gt;&quot;; 
		my $check_all = $query -&gt; param('reparent_all');
		foreach my $move_writeup_id (@$group)
			{
			my $move_writeup = $getNodeByNameOrId-&gt;($move_writeup_id, 'writeup');
			if ($move_writeup)
				{
				my $checked = ( $writeup &amp;&amp; $move_writeup_id == $writeup-&gt;{node_id} );
				my $saveAE = $query-&gt;autoEscape();
				$query-&gt;autoEscape(0);
				my $label =
					&quot;\n\t&quot; 
					. linkNode($move_writeup)
					. &quot;\n\t by &quot;
					. linkNode(getNodeById($move_writeup-&gt;{'author_user'}))
					. &quot;\n\t (id = $move_writeup_id)&quot;;
				$selection_string .= &quot;\n\t&lt;li&gt;&quot;
				. $query-&gt;checkbox(-name =&gt; &quot;reparent_$move_writeup_id&quot;
					, -value =&gt; '1'
					, -checked =&gt; $check_all || $checked
					, -label =&gt; $label
					)
				. &quot;&lt;/li&gt;&quot;;
				$query-&gt;autoEscape($saveAE);
				}
			else   ## Don't know if this will ever actually happen but we should Be Prepared
				{
				$selection_string .=
				&quot;\n\t&lt;li&gt;$move_writeup_id does not appear to be a valid writeup id!&quot;;
				$selection_string .=
				linkNode($list_node).&quot; may have a bad group.&lt;/li&gt;&quot;
					if $list_node;;
				}
			}
		$selection_string .=&quot;\n&lt;/ul&gt;&quot;;
		}
	elsif ($list_node)
		{ $selection_string .= &quot;\n&lt;p&gt;&quot;.linkNode($list_node).&quot; is a nodeshell.&lt;/p&gt;&quot;; }

};

# Don't force listing of writeup if we just did a reparent
$writeup = undef if ($writeup &amp;&amp; $success_reparent{$writeup-&gt;{'node_id'}});

# List writeups in both source and destination node,
#  so that after a move, the results are readily apparent
&amp;$list_writeups($old_e2node, $writeup);
if ($new_e2node
		&amp;&amp; (!$old_e2node || $old_e2node-&gt;{'node_id'} != $new_e2node-&gt;{'node_id'})
		)
	{
	$selection_string .= &quot;\n&lt;hr&gt;\n&quot; if $old_e2node || $writeup;
	$selection_string .=
		&quot;&lt;p&gt;Destination node: &quot; . linkNode($new_e2node) . &quot;&lt;/p&gt;&quot;;
	&amp;$list_writeups($new_e2node)
}

## Close form, supply submit button
$selection_string .= &quot;\n&lt;br&gt;&quot; . htmlcode('closeform');

return($inputs_string 
	. $selection_string 
	. $feedback_string 
	. &quot;&lt;p&gt;[Lord Brawl] says: Try [Klaproth Van Lines] for bulk moves. Certain conditions apply.&lt;/p&gt;&quot;);
%]</doctext>
  <node_id>1138488</node_id>
</node>

<node>
  <node_id>863558</node_id>
  <title>List Nodes of Type</title>
  <doctext>[%
# list nodes of type
#	lists all available nodetypes, prompts to display nodes of that nodetype
#	only available to members of gods, editors, and edev
#	original version written by chromatic for EDC
#	modified by N-Wing

my $UID = $$USER{node_id};
my $isRoot = $APP-&gt;isAdmin($USER);
my $isCE = $APP-&gt;isEditor($USER);
my $isEDev = $APP-&gt;isDeveloper($USER);
return 'Sorry, cowboy. You must be at least [edev|this tall] to ride the Node Type Lister!' unless $isCE || $isEDev;
my $str;
my $sth = $DB-&gt;{dbh}-&gt;prepare('SELECT title, node_id FROM node, nodetype WHERE node_id = nodetype_id ORDER BY title');
$sth-&gt;execute();
my $opt = '';
#TODO would be more secure to have list of things allowed, instead of things not allowed



#reasons for skipping:
#	user, e2node, writeup - a zillion of them
#	ditto, plus privacy
#	restricted_superdoc - admins only
#	bug - ?
#	oppressor_superdoc - editors only
#	debate, debatecomment - like writeups/e2nodes - eventually a zillion of them

my %skips;
@skips{qw(user e2node writeup draft)} = ();	#later filter useralias
delete $skips{'user'} if $$USER{node_id}==9740 || 1306028 || 1390290;	#2005 August new user create bug - N-Wing wants easy way to get these
#and Two Sheds and Wiccanpiper wanted to list users for other reasons.

#not sure about collaboration - is that supposed to be a group private thing, or public thing that only certain people can edit?

if($isRoot) {
#	@skips{qw()} = ();
} else {
	@skips{qw(restricted_superdoc bug)} = ();
	@skips{qw(oppressor_superdoc debate debatecomment)} = () unless $isCE;
}


#get node types
my @choiceNodeTypes = (0, '(choose a node type)');
my $t;
my $nid;
my %validTypeIDs;	#key is valid node_id, value is title
while(my $item = $sth-&gt;fetchrow_arrayref) {
	$nid = $item-&gt;[1];
# the getNode call may slow things down, so I'm commenting it out
#	next unless canReadNode($USER, getNode($nid));

	$t = $item-&gt;[0];

	# the man says you're not worthy to read these
	# or it slows down the server for everything
	# so getcher own installation, buddy!
	next if (exists $skips{$t});

	push(@choiceNodeTypes, $nid, $t);
	$validTypeIDs{$nid} = $t;
}
$opt .= 'nodetype: ' . htmlcode('varsComboBox','ListNodesOfType_Type', 0, @choiceNodeTypes) . &quot;&lt;br /&gt;\n&quot;;

my $choicelist = [
	'0','(no sorting)',
	'idA','node_id, ascending (lowest first)',
	'idD','node_id, descending (highest first)',
	'nameA','title, ascending (ABC)',
	'nameD','title, descending (ZYX)',
	'authorA','author\'s ID, ascending (lowest ID first)',
	'authorD','author\'s ID, descending (highest ID first)',
	'createA','create time, ascending (oldest first)',
	'createD','create time, descending (newest first)',
];
$opt .= 'sort order: ';
$opt .= ' &lt;small&gt;1:&lt;/small&gt; '.htmlcode('varsComboBox','ListNodesOfType_Sort', 0, @$choicelist);
$opt .= ' &lt;small&gt;2:&lt;/small&gt; '.htmlcode('varsComboBox','ListNodesOfType_Sort2', 0, @$choicelist);
$opt .= '&lt;br /&gt;
';

$opt .= 'only show things (' . $query-&gt;checkbox('filter_user_not',0,1,'not') . ') written by ' . $query-&gt;textfield('filter_user') . '&lt;br /&gt;
';

$str .= 'Choose your poison, sir:
&lt;form method=&quot;POST&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;node_id&quot; value=&quot;' . $NODE-&gt;{node_id} . '&quot; /&gt;
';
$str .= $opt;
$str .= $query-&gt;submit('fetch','Fetch!') . '
&lt;/form&gt;';

my $selectionTypeID = $VARS-&gt;{ListNodesOfType_Type};
return $str unless $query-&gt;param('fetch');	#check if user hit Fetch button
return $str unless $selectionTypeID &amp;&amp; exists($validTypeIDs{$selectionTypeID});
return $str . ' &lt;span style=&quot;background-color: yellow;&quot; title=&quot;'.$selectionTypeID.'&quot;&gt;!!! Assertion Error !!!&lt;/span&gt;' unless $selectionTypeID =~ /^[1-9]\d*$/;
	
#force a 0 or 1 from a CGI parameter
local *cgiBool = sub {
	return ($query-&gt;param($_[0]) eq '1') ? 1 : 0;
};

#mapping of unsafe VARS sort data into safe SQL
my %mapVARStoSQL = (
	'0' =&gt; '',
	'idA' =&gt; 'node_id ASC',
	'idD' =&gt; 'node_id DESC',
	'nameA' =&gt; 'title ASC',
	'nameD' =&gt; 'title DESC',
	'authorA' =&gt; 'author_user ASC',
	'authorD' =&gt; 'author_user DESC',
	'createA' =&gt; 'createtime ASC',
	'createD' =&gt; 'createtime DESC',
);
#loop so can have secondary (or more!) sorting
#maybe TODO don't allow stupid combos
my $sqlSort = '';
foreach my $varsSortKey ('ListNodesOfType_Sort', 'ListNodesOfType_Sort2') {
	last unless exists $VARS-&gt;{$varsSortKey};
	$t = $VARS-&gt;{$varsSortKey};
	last unless defined $t;
	last unless exists $mapVARStoSQL{$t};
	$sqlSort .= ',' unless length($sqlSort)==0;
	$sqlSort .= $mapVARStoSQL{$t};
}

my $filterUserNot = cgiBool('filter_user_not');
my $filterUser = (defined $query-&gt;param('filter_user')) ? $query-&gt;param('filter_user') : undef;
if(defined $filterUser) {
	$filterUser = getNode($filterUser, 'user') || getNode($filterUser, 'usergroup') || undef;
}
my $sqlFilterUser = '';
my $plainTextFilter='';
if(defined $filterUser) {
	$sqlFilterUser = ' AND author_user'.($filterUserNot?'!=':'=').getId($filterUser);
	$plainTextFilter.=($filterUserNot?' not':'').' created by '.linkNode($filterUser,0,{lastnode_id=&gt;0});
}

my $total;
$sth = $DB-&gt;{dbh}-&gt;prepare(&quot;SELECT COUNT(*) FROM node WHERE type_nodetype='$selectionTypeID'&quot;.$sqlFilterUser);
$sth-&gt;execute();
($total) = $sth-&gt;fetchrow;
$str .= 'Found &lt;strong&gt;' . $total . '&lt;/strong&gt; nodes of nodetype &lt;strong&gt;&lt;a href=' . urlGen({'node_id'=&gt;$selectionTypeID}) . '&gt;' . $validTypeIDs{$selectionTypeID} . '&lt;/a&gt;&lt;/strong&gt;';
$str .= $plainTextFilter if length($plainTextFilter);
$str .= '.';

my $num = $isRoot ? 100 : $isCE ? 75 : 60;


#gets a node given the ID
#this caches nodes between hits, so it doesn't hurt to get 1 user a zillion times
#note: this is completely pointless if E2 keeps a cache per-page-load, but I don't think it currently does that
#returns undef if unable to get a node
#created: 2001.11.27.n2; updated: 2002.05.14.n2
#author: N-Wing
my %ids = ($$USER{node_id}=&gt;$USER, $$NODE{node_id}=&gt;$NODE);
local *getNodeFromID = sub {
	my $nid = $_[0];
	return undef unless (defined $nid) &amp;&amp; ($nid=~/^\d+$/);

	#already known, return it
	return $ids{$nid} if exists $ids{$nid};

	#unknown, find that (we also cache a mis-hit, so we don't try to get it again later)
	my $N = getNodeById($nid);
	return $ids{$nid}=$N;
};


my $listedItems = '';
my $next = $query-&gt;param('next') || '0';
my $queryText = &quot;SELECT node_id, title, author_user, createtime FROM node WHERE type_nodetype = '$selectionTypeID'&quot;;
$queryText .= $sqlFilterUser if length($sqlFilterUser);
$queryText .= ' ORDER BY '.$sqlSort if length($sqlSort);
$queryText .= &quot; LIMIT $next, $num&quot;;

$sth = $DB-&gt;{dbh}-&gt;prepare($queryText);
$sth-&gt;execute();
my $numCurFound=0;
my $aID; #author ID
while(my $item = $sth-&gt;fetchrow_arrayref) {
	++$numCurFound;
	$listedItems .= '&lt;tr&gt;&lt;td&gt;';
	$aID = $$item[2];

	#show edit link if admin or user viewing page created node
	if( $isRoot || ($aID==$UID) ) {
		$listedItems .= '&lt;small&gt;(' . linkNode(@$item[0],'edit',{lastnode_id=&gt;0,displaytype=&gt;'edit'}) . ')&lt;/small&gt;';
	}

	$listedItems .= '&lt;/td&gt;&lt;td&gt;' . linkNode(@$item[0,1],{lastnode_id=&gt;0}) . '&lt;/td&gt;&lt;td&gt;' . $$item[0] . '&lt;/td&gt;';
	$listedItems .= '&lt;td&gt;'.linkNode(getNodeFromID($aID),0,{lastnode_id=&gt;0}).'&lt;/td&gt;';
	my $createTime = @$item[3];
	$listedItems .= '&lt;td&gt;' . htmlcode('parsetimestamp',$createTime.',1') . '&lt;/td&gt;&lt;td&gt;' . htmlcode('timesince',$createTime.',1,100') . '&lt;/td&gt;';
	$listedItems .= &quot;&lt;/tr&gt;\n&quot;;
}
$str .= ' (Showing items '.($next+1).' to '.($next+$numCurFound).'.)' if $total;
$str .= '&lt;/p&gt;&lt;p&gt;&lt;table border=&quot;0&quot;&gt;
&lt;tr&gt;&lt;th&gt;edit&lt;/th&gt;&lt;th&gt;title&lt;/th&gt;&lt;th&gt;node_id&lt;/th&gt;&lt;th&gt;author&lt;/th&gt;&lt;th&gt;created&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;
'.$listedItems.'
&lt;/table&gt;&lt;/p&gt;
';
return $str if ($total &lt; $num);


local *jumpLinkGen = sub {
	my ($startNum, $disp) = @_;
	my $opts = {
		'node_id'=&gt;$$NODE{node_id},
		'fetch'=&gt;1,
		'next'=&gt;$startNum,
#		'chosen_type'=&gt;$selection,	#stored in VARS now
	};
	if(defined $filterUser) {
		$$opts{filter_user}=$$filterUser{title};
		$$opts{filter_user_not}=$filterUserNot;
	}
	return '&lt;a href='.urlGen($opts).'&gt;'.$disp.'&lt;/a&gt;';
};

my $nextprev='';
my $remainder = $total - ($next + $num);
if($next &gt; 0) {
	$nextprev .= jumpLinkGen($next-$num, 'previous '.$num).&quot;&lt;br /&gt;\n&quot;;
}
if($remainder &lt; $num and $remainder &gt; 0) {
	$nextprev .= jumpLinkGen($next+$num, 'next '.$remainder).&quot;\n&quot;;
} elsif($remainder &gt; 0) {
	$nextprev .= jumpLinkGen($next+$num, 'next '.$num).&quot;&lt;br /&gt;\n&quot;;
}
$str .= qq|&lt;p align=&quot;right&quot;&gt;$nextprev&lt;/p&gt;| if length($nextprev);

return $str;
%]</doctext>
  <type_nodetype>14</type_nodetype>
</node>

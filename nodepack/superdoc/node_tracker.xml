<node>
  <type_nodetype>14</type_nodetype>
  <doctext>&lt;p&gt;&lt;em&gt;Finally, its time had come.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is essentially a port of [cow of doom]'s node tracker.
Obviously there's been some interface modification since we've got a
direct line to the e2 database, but he did most of the heavy lifting,
and should be lauded for his hard work, [pbuh].&lt;/p&gt;

&lt;p&gt;This is in beta, and things may change at any moment. To that end,
I haven't really messed with any of the data being collected (or much of anything else),
so if there's a feature you would like here or something seems off (especially if things are broken!),
please let [kthejoker|me] know.  Thanks.&lt;/p&gt;

&lt;p&gt;P.S.: Do &lt;strong&gt;not&lt;/strong&gt; sit here and refresh this page constantly.
It's not the heaviest page on the site, but it's not exactly the lightest either, okay?
I will hunt you down. So just visit it every once in a while, marvel at your greatness,
hit &quot;update&quot; to save the new data, and then head back out into the nodegel. Cool? - k&lt;/p&gt;

[%#'

return &quot;Sorry, for logged in users only&quot; if ($APP-&gt;isGuest($USER));

my $str;
my $trackerStr;
my %info;
my %oldinfo;
my %node;
my %oldnode;
my %types;
my @reps;
my @wudata;
my $minmerit;
my $maxmerit;
my @nodes;
my $line=' 'x65;

my ($head, $didhead, $change);


local * uniq = sub {
# takes a list argument
# assumes the list is sorted (use sort() if not)
# returns that list with duplicates removed
# examples: @foo=uniq(@sorted); @foo=uniq(sort(@random));
  my (@list, @result);
  @list = @_; @result = ();
  foreach (@list) {
    if ((!@result) || ($result[-1] != $_)) {push(@result,$_);}
  }
  return(@result);
};

my $userid=$$USER{user_id};
#my $userid = $query-&gt;param('userid') if $query-&gt;param('userid');


local * getOldInfo = sub {
my $tData = $DB-&gt;sqlSelect(&quot;tracker_data&quot;,&quot;nodetracker&quot;,&quot;tracker_user=$userid limit 1&quot;);
return 0 unless $tData;
return 1 if ($tData eq 'data');
my @tD = split(/\n/,$tData);
my $iData = shift(@tD);
my $dStr;
($oldinfo{xp}, $oldinfo{nodes}, $oldinfo{cools}, $oldinfo{totalrep}, $oldinfo{merit},
         $oldinfo{devotion}, $oldinfo{average}, $oldinfo{median}, $oldinfo{upvotes}, $oldinfo{downvotes},
         $oldinfo{maxcools},$oldinfo{maxvotes})  = split(/:/,$iData);

	$oldinfo{xp} = $oldinfo{xp} || 0;
	$oldinfo{cools} = $oldinfo{cools} ||0;
	$oldinfo{totalrep} = $oldinfo{totalrep} || 0;
	$oldinfo{nodes} = $oldinfo{nodes} ||0;
	$oldinfo{merit} = $oldinfo{merit} || 0;
	$oldinfo{devotion} = $oldinfo{devotion} || 0;
	$oldinfo{average} = $oldinfo{average} || 0;
	$oldinfo{median} = $oldinfo{median} || 0;
	$oldinfo{upvotes} = $oldinfo{upvotes} || 0;
	$oldinfo{downvotes} = $oldinfo{downvotes} || 0;
	$oldinfo{maxcools} = $oldinfo{maxcools} || 0;
	$oldinfo{maxvotes} = $oldinfo{maxvotes} || 0;
	chomp($oldinfo{xp}, $oldinfo{nodes}, $oldinfo{cools}, $oldinfo{totalrep},$oldinfo{merit},
              $oldinfo{devotion}, $oldinfo{average}, $oldinfo{median}, $oldinfo{upvotes}, $oldinfo{downvotes},
              $oldinfo{maxcools},$oldinfo{maxvotes});
	if ($oldinfo{nodes}) {
            $oldinfo{wnf} = (($oldinfo{totalrep}+(10*$oldinfo{cools}))/$oldinfo{nodes});
            $oldinfo{nodefu} = $oldinfo{xp}/$oldinfo{nodes};
            $oldinfo{coolratio} = ($oldinfo{cools}*100)/$oldinfo{nodes};
        }

foreach (@tD) {
           chomp;
            if (/^(\d+):(-?\d+):(\d+):(.+):(\d+):(\d+)$/) {
                @{$oldnode{$1}} = ($2,$3,$4,$5,$6);
            }
            elsif (/^(\d+):(-?\d+):(\d+):(.*)$/) {
                @{$oldnode{$1}} = ($2,$3,$4,0,0);
            }

            if ($oldinfo{maxrep} &lt;= 0) {$oldinfo{maxrep}=$oldinfo{minrep}=$2;}
            if ($2 &gt; $oldinfo{maxrep}) {$oldinfo{maxrep}=$2;}
            if ($2 &lt; $oldinfo{minrep}) {$oldinfo{minrep}=$2;}
}

$oldinfo{votes} = $oldinfo{upvotes} + $oldinfo{downvotes};

     return 1;

};

local * infodiff = sub {
   my $arg = $_[0];
    my $str = $info{$arg};
    $oldinfo{$arg} = 0 unless defined($oldinfo{$arg});
 if ($oldinfo{$arg} != $info{$arg}) {
        $str .= &quot; (&quot;.($info{$arg}&gt;$oldinfo{$arg}?'+':'');
        $str .= ($info{$arg}-$oldinfo{$arg}).&quot;)&quot;;
    }
    return $str;
};

local * infodiff_fp = sub {
    my $arg = $_[0];
    my $perc = $_[1];
    
    my $str = sprintf &quot;%1.2f&quot;, $info{$arg};
    if (defined($perc)) {$str .= '%';}

    $oldinfo{$arg} = 0 unless defined($oldinfo{$arg});

    my $diff = $info{$arg} - $oldinfo{$arg};
    if (($diff &gt; 0.001) || ($diff &lt; -0.001)) {
        $str .= &quot; (&quot;;
        $str .= &quot;+&quot; if ($diff &gt; 0);
        $str .= sprintf &quot;%1.3f%s)&quot;, $diff, defined($perc) ? &quot;%&quot; : &quot;&quot;;
    }
    return($str);
};

local * MakeEven = sub{
    my ($aref) = @_;
    my $len = 0;
    my $pipetext = 0; # length of undisplayed pipe link text
    # find max length of the array contents
    # note that hard/pipe link code artificially extends this with undisplayed characters
    foreach (@$aref) {
        $pipetext = 0;
        if (m/\[(.*?\|)/) {
            $pipetext = length($1);
            }
        $len = (length($_) - $pipetext) if ((length($_) - $pipetext) &gt; $len)
    }
    foreach (@$aref) {
        if (m/--$/) {
            $_ .= &quot;-&quot; x ($len - length($_));
        }
        else {
            $_ .= &quot; &quot; x ($len - length($_));
        }
        # hard link characters are counted but not displayed
        # add spaces too account for them
        if (m/\[/) { 
            $_ .= &quot; &quot;; 
            if (m/\]/) { $_ .= &quot; &quot;; }
        }
    }
};

local * getCurrentInfo = sub {

$info{xp} = $$USER{experience};
my $csr= $DB-&gt;sqlSelectMany(
  &quot;node.node_id, node.reputation, writeup.cooled, parent_node.title, type_node.title AS type&quot;
  , 'node
  	JOIN writeup ON node.node_id = writeup.writeup_id
	JOIN node AS parent_node ON parent_node.node_id = writeup.parent_e2node
	JOIN node AS type_node ON  type_node.node_id = writeup.wrtype_writeuptype'
  , &quot;node.author_user = $userid AND node.type_nodetype=117&quot;
  , 'ORDER BY writeup.publishtime DESC'
);

my $nStr = 'test';
while (my $N = $csr-&gt;fetchrow_hashref) {
		my %n;
  
my ($name, $type) = ($$N{title}, $$N{type});

		if (($name eq &quot;E2 Nuke Request&quot;) or
	        ($name eq &quot;Edit these E2 titles&quot;) or
        	($name eq &quot;Nodeshells marked for destruction&quot;) or
	        ($name eq &quot;Broken Nodes&quot;)) {
		        next;
		}

		$n{name} = $name;
		$n{type} = $type;
		$n{node_id} = $$N{node_id};
		$n{reputation} = $$N{reputation};
		$n{cooled} = $$N{cooled};

		my ($votescast) = $DB-&gt;sqlSelect('count(*)', 'vote', 'vote_id='.$$N{node_id});
		$n{upvotes} = ($votescast + $$N{reputation})/2;
		$n{downvotes} = ($votescast - $$N{reputation})/2;

		if (int($n{upvotes}) != $n{upvotes}) {
			$n{downvotes} = $DB-&gt;sqlSelect('count(*)', 'vote', 'vote_id='.$$N{node_id}.' and weight=-1');
			$n{upvotes} = $votescast - $n{downvotes};
			$n{reputation} = $n{upvotes} - $n{downvotes};
		}

		$n{votes} = $n{downvotes} + $n{upvotes};

		$types{$type} = 0 unless defined($types{$type});
		$types{$type}++;
		$info{nodes}++;

		push(@reps, $n{reputation});
		$info{totalrep} += $n{reputation};
		$info{cools} += $n{cooled};
		$info{downvotes} += $n{downvotes};
		$info{upvotes} += $n{upvotes};

		if ($info{nodes} == 1) {
			$info{maxrep}=$info{minrep}=$n{reputation};
			$info{maxvotes}=$n{votes};
			$info{maxcools}=$n{cooled};
		}

		if ($n{reputation} &gt; $info{maxrep}) {$info{maxrep}=$n{reputation}}
		if ($n{reputation} &lt; $info{minrep}) {$info{minrep}=$n{reputation}}
		if ($n{votes} &gt; $info{maxvotes}) {$info{maxvotes} = $n{votes}}
		if ($n{cooled} &gt; $info{maxcools}) {$info{maxcools} = $n{cooled}}

		$node{$n{node_id}} = [$n{reputation},$n{cooled},$name,$n{upvotes},$n{downvotes}];

	}
	$info{votes} = $info{upvotes} + $info{downvotes};

	return $nStr;
	
};

local * meritCalc = sub {

my @rep2 = sort {$a &lt;=&gt; $b} @reps;

my $sz = 0 + @rep2;
return unless $sz;
my $stt = int(($sz)/4);
my $stp = int(($sz*3)/4 + 0.5);
my $tot = 0;
my $tot2 = 0;

my @counts;

for (my $i=0; $i&lt;500; ++$i) {
   push @counts, 0;
}

for (my $i=$stt; $i&lt;$stp; ++$i) {
   my $rep = $rep2[$i];
   $tot += $rep;
   $counts[$rep]++ if ($rep &gt;= 0);
}


for (my $i=0; $i&lt;500; ++$i) {
   $counts[$i] = 0;
}
my $minrep = $rep2[0];

for (my $i=0; $i&lt;$sz; ++$i) {
   my $rep = $rep2[$i];
   $tot2 += $rep;
   $counts[$rep - $minrep]++;
}


$info{average} = $tot2/$sz;
$info{median} = $rep2[$sz/2];
$info{merit} = $tot/($stp-$stt);
$info{devotion} = int($info{merit} * @rep2 + 0.5);
$minmerit = $rep2[$stt];
$maxmerit = $rep2[$stp-1];


if ($info{nodes}) {
  $info{wnf} = (($info{totalrep}+(10*$info{cools}))/$info{nodes});
  $info{nodefu} = $info{xp}/$info{nodes};
  $info{coolratio} = ($info{cools}*100)/$info{nodes};
}
};

local * trackerOverview = sub {
$trackerStr .= sprintf(&quot;
        E2 USER INFO: last update %s
\n&quot;,
       $DB-&gt;sqlSelect(&quot;lasttime&quot;,&quot;nodetracker&quot;,&quot;tracker_user=$userid limit 1&quot;));



my @c1;
my @c2;
my @c3;

push @c1, &quot;Nodes:     &quot;    . infodiff('nodes');
push @c2, &quot;XP:          &quot;  . infodiff('xp');
push @c3, &quot;Cools:       &quot;  . infodiff('cools');

push @c1, &quot;Max Rep:   &quot;    . infodiff('maxrep');
push @c2, &quot;Min Rep:     &quot;  . infodiff('minrep');
push @c3, &quot;Total Rep:   &quot;  . infodiff('totalrep');

push @c1, &quot;[Node-Fu]:   &quot;  . infodiff_fp('nodefu');
push @c2, &quot;[Node-Fu|WNF]:         &quot;        . infodiff_fp('wnf');
push @c3, &quot;Cool Ratio:  &quot;  . infodiff_fp('coolratio', 'yes');

push @c1, &quot;[Merit]:     &quot;  . infodiff_fp('merit');
push @c2, &quot;Average Rep: &quot;  . infodiff_fp('average');
push @c3, &quot;Median rep:  &quot;  . infodiff('median');

push @c1, &quot;Up votes:  &quot;     . infodiff('upvotes');
push @c2, &quot;[Devotion]:    &quot; . infodiff('devotion');
push @c3, &quot;Merit Range: $minmerit to $maxmerit&quot;;

push @c1, &quot;Max Cools: &quot;   . infodiff('maxcools');
push @c2, &quot;Down votes:  &quot; . infodiff('downvotes');
push @c3, &quot;Votes:       &quot; . infodiff('votes');

push @c1, &quot;Max Votes: &quot;   . infodiff('maxvotes');


MakeEven(\@c1);
MakeEven(\@c2);

for (my $i=0; $i&lt;7; ++$i) {
    $trackerStr .= &quot;$c1[$i]   $c2[$i]   $c3[$i]\n&quot;;
}

$trackerStr .= &quot;\n&lt;/pre&gt;&lt;tt&gt;&quot;;
};





local * trackerNodes = sub {


if ($info{nodes}) {
  foreach (keys %types) {
    $trackerStr .= sprintf(&quot;%s: %3.1f%%  &quot;,$_,(100 * $types{$_})/($info{nodes}));
  }
}


$trackerStr .= &quot;\n$line\n&lt;/tt&gt;&lt;pre&gt;&quot;;

$head=&quot;
        Published/Removed/Renamed:
Change      Title\n$line\n&quot;;
$didhead = 0;

foreach (uniq(sort({$b&lt;=&gt;$a} keys(%node),keys(%oldnode)))) {
    if (!exists($oldnode{$_})) {
        if (!$didhead) {$trackerStr .= $head; $didhead = 1;}
        $trackerStr .= sprintf(&quot;Published | %s\n&quot;,$node{$_}-&gt;[2]);
        $oldnode{$_} = [0,0,$node{$_}-&gt;[2]];
        push @nodes, $_;
    } elsif (!exists($node{$_})) {
        if (!$didhead) {$trackerStr .= $head; $didhead = 1;}
        $trackerStr .= sprintf(&quot;Removed   | %s\n&quot;,$oldnode{$_}-&gt;[2]);
    } else {
        if ($node{$_}-&gt;[0] != $oldnode{$_}-&gt;[0]) {push (@nodes, $_);}
        if ($node{$_}-&gt;[1] != $oldnode{$_}-&gt;[1]) {push (@nodes, $_);}
        if ($node{$_}-&gt;[3] != $oldnode{$_}-&gt;[3]) {push (@nodes, $_);}
        if ($node{$_}-&gt;[4] != $oldnode{$_}-&gt;[4]) {push (@nodes, $_);}
        if ($node{$_}-&gt;[2] ne $oldnode{$_}-&gt;[2]) {
            if (!$didhead) {$trackerStr .= $head; $didhead = 1;}
            $trackerStr .= sprintf(&quot;Renamed   | %s-&gt;%s\n&quot;,$oldnode{$_}-&gt;[2],$node{$_}-&gt;[2]);
        }
    }
}
$change = undef;
if ($didhead) {$trackerStr .= $line.&quot;\n&quot;; $change = 1;}
};

local * trackerRep = sub {

$head=&quot;
        Reputation Changes / Cools:\n&quot;;

$didhead = 0;
my (@a1, @a2, @a3, @a4, @a5, @a6);


foreach (uniq(@nodes)) {
  if (!$didhead) {
      $trackerStr .= $head;
      $didhead = 1;

      push @a1, &quot;Rep&quot;;
      push @a1, &quot;   &quot;;
      push @a2, &quot;+/-&quot;;
      push @a2, &quot;   &quot;;
      push @a3, &quot;C!&quot;;
      push @a3, &quot;  &quot;;
      push @a4, &quot;+/-&quot;;
      push @a4, &quot;   &quot;;
      push @a5, &quot;Title&quot;;
      push @a5, &quot;    &quot;;
push @a6, &quot; &quot;;
push @a6, &quot; &quot;;
  }
  $oldnode{$_}-&gt;[3] = 0 unless defined($oldnode{$_}-&gt;[3]);
  $oldnode{$_}-&gt;[4] = 0 unless defined($oldnode{$_}-&gt;[4]);
  my $d  = $node{$_}-&gt;[0]-$oldnode{$_}-&gt;[0];
  my $d1 = $node{$_}-&gt;[3]-$oldnode{$_}-&gt;[3];
  my $d2 = $node{$_}-&gt;[4]-$oldnode{$_}-&gt;[4];
  my $dcool = $node{$_}-&gt;[1] - $oldnode{$_}-&gt;[1];
  if ($node{$_}-&gt;[3] &amp;&amp; $node{$_}-&gt;[4]) {
      push @a1, sprintf &quot;%+i (%+i/%+i)&quot;, $node{$_}-&gt;[0], $node{$_}-&gt;[3], -$node{$_}-&gt;[4];
  }
  else {
      push @a1, sprintf &quot;%+i&quot;, $node{$_}-&gt;[0];
  }
  if ($d1 and $d2) {
      push @a2, sprintf &quot;%+i (%+i/%+i)&quot;, $d, $d1, -$d2;
  }
  else {
      push @a2, sprintf &quot;%+i&quot;, $d;
  }
  push @a3, sprintf &quot;%i&quot;, $node{$_}-&gt;[1];
  if ($dcool) {
      push @a4, sprintf &quot;%+i&quot;, $dcool;
  }
  else {
      push @a4, &quot;&quot;;
  }
  push @a5, $node{$_}-&gt;[2];
push @a6, $_;
}

if ($didhead) {

    MakeEven(\@a1);
    MakeEven(\@a2);
    MakeEven(\@a3);
    MakeEven(\@a4);
    
    for (my $i=0; $i &lt; @a1; ++$i) {
        $trackerStr .= &quot;$a1[$i]  $a2[$i]  $a3[$i]  $a4[$i]  &quot;;
        if ($a6[$i] ne &quot; &quot;) {
                $trackerStr .= linkNode($a6[$i],&quot;$a5[$i]&quot;).&quot;\n&quot;;
        }
        else {
                $trackerStr .= &quot;$a5[$i] $a6[$i]\n&quot;;
        }
    }
    $trackerStr .= &quot;\n&quot;;
}
elsif (!$change) {
  $trackerStr .= &quot;No nodes changed.\n&quot;;
}
};

local * updateTracker = sub {

 my $tStr = &quot;$info{xp}:$info{nodes}:$info{cools}:$info{totalrep}:&quot;.
  &quot;$info{merit}:$info{devotion}:$info{average}:$info{median}:$info{upvotes}:$info{downvotes}:&quot;.
  &quot;$info{maxcools}:$info{maxvotes}\n&quot;;
   foreach (sort {$b&lt;=&gt;$a} keys(%node)) {
    $tStr .= &quot;$_:&quot;.join(&quot;:&quot;,@{$node{$_}}).&quot;\n&quot;;
  }
$DB-&gt;sqlUpdate(&quot;nodetracker&quot;,{tracker_data =&gt; $tStr, -lasttime =&gt; 'now()', -hits =&gt; 'hits + 1' },&quot;tracker_user=$userid limit 1&quot;);

return $tStr;

};



my $hasOld = getOldInfo();
if (!$hasOld) {
$DB-&gt;sqlInsert(&quot;nodetracker&quot;,{tracker_user =&gt; $userid, tracker_data =&gt; 'data'});
}
getCurrentInfo();
meritCalc();

if ($query-&gt;param(&quot;update&quot;)) {
updateTracker();
getOldInfo();
}

trackerOverview();

trackerNodes();

trackerRep();

my $finalStr = &quot;&lt;pre&gt;&quot;.$trackerStr.&quot;&lt;/pre&gt;&quot;;

$finalStr .=htmlcode('openform');
$finalStr.=$query-&gt;submit(&quot;update&quot;,&quot;Update&quot;);
$finalStr.=$query-&gt;end_form;

return $finalStr.&quot;&lt;br /&gt;&lt;br /&gt;&quot;.$str;

%]
</doctext>
  <title>Node Tracker</title>
  <node_id>1882393</node_id>
</node>

<node>
  <type_nodetype>1144104</type_nodetype>
  <doctext>[%
##########
# This section creates the user search field - always displayed

my $isCE = exists($HTMLVARS{'group_content editors'}{$$USER{node_id}});
return unless(isGod($USER) || $isCE);
return if $query-&gt;param(&quot;userEdit&quot;);

my($welcome) = qq(Welcome to the User Oracle. Please enter a user name&lt;br&gt;);
$welcome .= htmlcode('openform');
$welcome .= $query-&gt;textfield('the_oracle_subject');
$welcome .= htmlcode('closeform');
$welcome;
%]

[%
##########
# This section lists the variables if a username is given and we're not editing a variable

# The below is for allowing gods to check what CEs are allowed to see
my $isCE = exists($HTMLVARS{'group_content editors'}{$$USER{node_id}});
return unless (isGod($USER) || $isCE);
my $orasubj = $query-&gt;param('the_oracle_subject');
return unless($orasubj);
my $oraref = getNode($orasubj, 'user');

my($hash) = getVars($oraref);
my($return);

if (isGod($USER))
{
$return .= getVars($oraref);
}

# message to content editors explaining what this is
$return .= '&lt;p&gt;As a content editor, you can view an abbreviated list of user settings.
&lt;br&gt;Any given variable will not be displayed unless the user has turned it on at least once. 1=on, 0 or blank=off&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;browser&lt;/dt&gt;&lt;dd&gt;the web browser and operating system the noder is using&lt;/dd&gt;
&lt;dt&gt;easter_eggs&lt;/dt&gt;&lt;dd&gt;how many easter eggs the noder has&lt;/dd&gt;
&lt;dt&gt;nodelets&lt;/dt&gt;&lt;dd&gt;list of nodelets the noder has turned on, node_id and name&lt;/dd&gt;
&lt;dt&gt;preferred_theme&lt;/dt&gt;&lt;dd&gt;the E2 theme, such as Jukka, EKW, or Zen, the noder has active&lt;/dd&gt;
&lt;dt&gt;settings_useTinyMCE&lt;/dt&gt;&lt;dd&gt;whether or not the noder has tinyMCE turned on.&lt;/dd&gt;
&lt;dt&gt;userstyle&lt;/dt&gt;&lt;dd&gt;the Zen stylesheet the noder has active&lt;/dd&gt;
&lt;dt&gt;wuhead&lt;/dt&gt;&lt;dd&gt;the code for displaying the writeupheader&lt;/dd&gt;
&lt;/dl&gt;' if $isCE;

my $oddeven = 0; # tracks odd rows for .oddrow class color
my $oddrowclass = &quot;&quot;; # blank if even row, contains .oddrow class color if odd row

$return .= qq(&lt;table border=0 cellpadding=2 cellspacing=1&gt;);
foreach(sort(keys(%{$hash}))) {
	next if ($_) eq 'noteletRaw'; # notelet can run code that breaks the page
	next if ($_) eq 'noteletScreened';
	# Allow content editors to view an abbreviated list
	unless ($_ eq 'settings_useTinyMCE' 
			|| $_ eq &quot;easter_eggs&quot; 
			|| $_ eq &quot;nodelets&quot; 
			|| $_ eq &quot;preferred_theme&quot; 
			|| $_ eq &quot;userstyle&quot; 
			|| $_ eq &quot;wuhead&quot; 
			|| $_ eq &quot;browser&quot;) {
		next if $isCE; 
	}
	# replace undefined values with a blank
	${$hash}{$_} = &quot;&amp;nbsp;&quot; if(!${$hash}{$_}); 
	if ($oddeven%2 == 0) { $oddrowclass = ' class=&quot;oddrow&quot;'; }
	else { $oddrowclass = ' class=&quot;evenrow&quot;'; }
	
	# first special case: style defacer code to be listed in PRE tags
	# personal nodelet should be linked
	# CSV lists should have extra space between variables to prevent page stretching
	if ($_ eq 'customstyle') {
		$return .= qq(\n\n&lt;tr$oddrowclass&gt;&lt;td&gt;$_&lt;/td&gt;&lt;td&gt;=&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;small&gt;${$hash}{$_}&lt;/small&gt;&lt;/pre&gt;);
	} elsif ($_ eq 'personal_nodelet') {
		$return .= qq(\n\n&lt;tr$oddrowclass&gt;&lt;td&gt;$_&lt;/td&gt;&lt;td&gt;=&lt;/td&gt;&lt;td&gt;);
		unless ($hash-&gt;{$_} eq '&amp;nbsp;') {
			my @items_list = split(/&lt;br&gt;/,$hash-&gt;{$_});
			foreach my $i (@items_list) {
				$return .= qq(\n[$i]&lt;br&gt;) if $i;
			}
		}
	} else {
		my $cleancsv = ${$hash}{$_};
		$cleancsv =~ s/,/, /g;
		$return .= qq(\n\n&lt;tr$oddrowclass&gt;&lt;td&gt;$_&lt;/td&gt;&lt;td&gt;=&lt;/td&gt;&lt;td&gt;$cleancsv);
	}
	
	# don't let CEs perform an IP hunt
	$return .= &quot; &quot;.linkNode($NODE,&quot;edit&quot;,{userEdit =&gt; $orasubj, varEdit =&gt; $_}).&quot; &quot; unless $isCE;
	if ($_ eq 'ipaddy') { 
		$return .= linkNode(getNode('IP Hunter', 'restricted_superdoc'), &quot;&lt;br&gt;&lt;tt&gt;(check other users with this IP)&lt;/tt&gt; &quot;, {hunt_ip =&gt; $$hash{$_}}) 
	}
	
	# second special case: fetch node titles for these node_ids to be human-readable
	if ($_ eq 'preferred_theme' 
		|| $_ eq 'userstyle' 
		|| $_ eq 'lastnoded' 
		|| $_ eq 'current_nodelet'
		|| $_ eq 'group') {
		# undefined hash values are replaced with '&amp;nbsp;'
		unless ($hash-&gt;{$_} eq '&amp;nbsp;') { 
			# check to make sure node exists before grabbing its title
			if (getNodeById($$hash{$_})) { 
				$return .= &quot; &lt;br&gt;&lt;tt&gt;(&quot; . linkNode($$hash{$_},getNodeById($$hash{$_})-&gt;{title}) . &quot;)&lt;/tt&gt; &quot;;
			} else {
				$return .= &quot; &lt;br&gt;&lt;tt&gt;(&quot; . linkNode($$hash{$_},'&lt;b style=&quot;color:red;&quot;&gt;ERROR:&lt;/b&gt; Node not found!)&lt;/tt&gt;');
			}
		}
	}
	
	# third special case: fetch node titles for these CSV lists of node_ids to be human-readable
	if ($_ eq 'nodelets' 
		|| $_ eq 'bookbucket'
		|| $_ eq 'favorite_noders'
		|| $_ eq 'emailSubscribedusers'
		|| $_ eq 'nodetrail' 
		|| $_ eq 'nodebucket'
		|| $_ eq 'can_weblog') {
		unless ($hash-&gt;{$_} eq '&amp;nbsp;') {
			my @items_list = split(/,/,$hash-&gt;{$_});
			foreach my $i (@items_list) {
				# check to make sure node exists before grabbing its title
				if (getNodeById($i)) { 
					$return .= &quot;\n&lt;br&gt;&quot; . linkNode($i,getNodeById($i)-&gt;{title}) if $i;
				} else {
					$return .= &quot;\n&lt;br&gt;(&quot; . linkNode($i,'&lt;b style=&quot;color:red;&quot;&gt;ERROR:&lt;/b&gt; Node not found!)') if $i;
				}
			}
		}
	}
	
	# fourth special case: fetch included javascript titles but do not link
	if ($_ eq 'includedJS') {
		unless ($hash-&gt;{$_} eq '&amp;nbsp;') {
			my @items_list = split(/,/,$hash-&gt;{$_});
			foreach my $i (@items_list) {
			#check to make sure node exists before grabbing title
			if (getNodeById($i)) {
					$return .= &quot;\n&lt;br&gt;&quot; . getNodeById($i)-&gt;{title} if $i;
				} else {
					$return .= &quot;\n&lt;br&gt;(&lt;b style=\&quot;color:red;\&quot;&gt;ERROR:&lt;/b&gt; Node not found!)&quot; if $i;
				}
			}
		}
	}
	
	# fifth special case: get titles of notifications_nodelet items
	# assumption: 'settings' will have more than just the notifications in it some day
	# therefore, look for &quot;notifications&quot;: and return the list that comes after it.
	# this technique can be applied to other hypothetical things saved in 'settings'
	if ($_ eq 'settings') {
		unless ($hash-&gt;{$_} eq '&amp;nbsp;') {
			my @items_list1 = split(/{|}/,$hash-&gt;{$_});
			for (my $j=0; $j &lt;= $#items_list1; $j++) {
				if ($items_list1[$j] eq '&quot;notifications&quot;:') {
					my @items_list2 = split(/,/,$items_list1[$j+1]);
					foreach my $i (@items_list2) {
						$i =~ /\&quot;(\d*)\&quot;:\d/;
						$return .= &quot;\n&lt;br&gt;&quot; . getNodeById($1)-&gt;{title} if $1;
					}
				}
			}
		}
	}
			
	$oddeven++;
	$return .= &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;

}
$return .= qq(&lt;/table&gt;);

$return;
%]

[%
##########
# This section is for pulling up the variable edits

return unless isGod($USER);

if (defined($query-&gt;param(&quot;new_value&quot;))) {

	my $u = getNode($query-&gt;param(&quot;new_user&quot;),&quot;user&quot;);
	my $v = getVars($u);

	$$v{$query-&gt;param(&quot;new_var&quot;)} = $query-&gt;param(&quot;new_value&quot;);
	setVars($u, $v);

	if ($$u{user_id} == $$USER{user_id}) {
		$VARS = $v;
	}

	getVars($u);

	return $$v{$query-&gt;param(&quot;new_var&quot;)};

}

my $varEdit = $query-&gt;param(&quot;varEdit&quot;);
return unless $varEdit;

my $orasubj = $query-&gt;param('userEdit');
return unless($orasubj);

my $oraref = getNode($orasubj, 'user');
my($v) = getVars($oraref);

my $str;

$str .= htmlcode('openform');
$str .= &quot;Editing &quot;.$orasubj.&quot; - var &lt;b&gt;$varEdit&lt;/b&gt;&lt;br /&gt;&quot;;
$str .= &quot;&lt;b&gt;Old Value:&lt;/b&gt; &quot;.$$v{$varEdit}.&quot;&lt;br /&gt;&quot;;
$str .= &quot;&lt;b&gt;New Value:&lt;/b&gt; &quot;.$query-&gt;textfield('new_value',&quot;&quot;,50);
$str .= $query-&gt;hidden(&quot;new_user&quot;,$orasubj);
$str .= $query-&gt;hidden(&quot;new_var&quot;,$varEdit);
$str .= htmlcode('closeform');

%]</doctext>
  <node_id>1946673</node_id>
  <title>The Oracle</title>
</node>
